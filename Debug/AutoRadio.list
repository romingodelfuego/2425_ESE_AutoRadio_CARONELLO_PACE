
AutoRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c51c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800c6ac  0800c6ac  0000d6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb88  0800cb88  0000e14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb88  0800cb88  0000db88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb90  0800cb90  0000e14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb90  0800cb90  0000db90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb94  0800cb94  0000db94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800cb98  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000580c  2000014c  0800cce4  0000e14c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005958  0800cce4  0000e958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e14c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025150  00000000  00000000  0000e17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000575a  00000000  00000000  000332cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e50  00000000  00000000  00038a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001781  00000000  00000000  0003a878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db0a  00000000  00000000  0003bff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028f4e  00000000  00000000  00069b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001067e5  00000000  00000000  00092a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00199236  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008960  00000000  00000000  0019927c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001a1bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c694 	.word	0x0800c694

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	0800c694 	.word	0x0800c694

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__gedf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800061c:	e006      	b.n	800062c <__cmpdf2+0x4>
 800061e:	bf00      	nop

08000620 <__ledf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpdf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpdf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000634:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000638:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800063c:	bf18      	it	ne
 800063e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000642:	d01b      	beq.n	800067c <__cmpdf2+0x54>
 8000644:	b001      	add	sp, #4
 8000646:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800064a:	bf0c      	ite	eq
 800064c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000650:	ea91 0f03 	teqne	r1, r3
 8000654:	bf02      	ittt	eq
 8000656:	ea90 0f02 	teqeq	r0, r2
 800065a:	2000      	moveq	r0, #0
 800065c:	4770      	bxeq	lr
 800065e:	f110 0f00 	cmn.w	r0, #0
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf58      	it	pl
 8000668:	4299      	cmppl	r1, r3
 800066a:	bf08      	it	eq
 800066c:	4290      	cmpeq	r0, r2
 800066e:	bf2c      	ite	cs
 8000670:	17d8      	asrcs	r0, r3, #31
 8000672:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000676:	f040 0001 	orr.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000684:	d102      	bne.n	800068c <__cmpdf2+0x64>
 8000686:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800068a:	d107      	bne.n	800069c <__cmpdf2+0x74>
 800068c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d1d6      	bne.n	8000644 <__cmpdf2+0x1c>
 8000696:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800069a:	d0d3      	beq.n	8000644 <__cmpdf2+0x1c>
 800069c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <__aeabi_cdrcmple>:
 80006a4:	4684      	mov	ip, r0
 80006a6:	4610      	mov	r0, r2
 80006a8:	4662      	mov	r2, ip
 80006aa:	468c      	mov	ip, r1
 80006ac:	4619      	mov	r1, r3
 80006ae:	4663      	mov	r3, ip
 80006b0:	e000      	b.n	80006b4 <__aeabi_cdcmpeq>
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdcmpeq>:
 80006b4:	b501      	push	{r0, lr}
 80006b6:	f7ff ffb7 	bl	8000628 <__cmpdf2>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	bf48      	it	mi
 80006be:	f110 0f00 	cmnmi.w	r0, #0
 80006c2:	bd01      	pop	{r0, pc}

080006c4 <__aeabi_dcmpeq>:
 80006c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c8:	f7ff fff4 	bl	80006b4 <__aeabi_cdcmpeq>
 80006cc:	bf0c      	ite	eq
 80006ce:	2001      	moveq	r0, #1
 80006d0:	2000      	movne	r0, #0
 80006d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d6:	bf00      	nop

080006d8 <__aeabi_dcmplt>:
 80006d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006dc:	f7ff ffea 	bl	80006b4 <__aeabi_cdcmpeq>
 80006e0:	bf34      	ite	cc
 80006e2:	2001      	movcc	r0, #1
 80006e4:	2000      	movcs	r0, #0
 80006e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ea:	bf00      	nop

080006ec <__aeabi_dcmple>:
 80006ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f0:	f7ff ffe0 	bl	80006b4 <__aeabi_cdcmpeq>
 80006f4:	bf94      	ite	ls
 80006f6:	2001      	movls	r0, #1
 80006f8:	2000      	movhi	r0, #0
 80006fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fe:	bf00      	nop

08000700 <__aeabi_dcmpge>:
 8000700:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000704:	f7ff ffce 	bl	80006a4 <__aeabi_cdrcmple>
 8000708:	bf94      	ite	ls
 800070a:	2001      	movls	r0, #1
 800070c:	2000      	movhi	r0, #0
 800070e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000712:	bf00      	nop

08000714 <__aeabi_dcmpgt>:
 8000714:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000718:	f7ff ffc4 	bl	80006a4 <__aeabi_cdrcmple>
 800071c:	bf34      	ite	cc
 800071e:	2001      	movcc	r0, #1
 8000720:	2000      	movcs	r0, #0
 8000722:	f85d fb08 	ldr.w	pc, [sp], #8
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000738:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800073c:	f000 b96a 	b.w	8000a14 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f806 	bl	8000758 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__udivmoddi4>:
 8000758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800075c:	9d08      	ldr	r5, [sp, #32]
 800075e:	460c      	mov	r4, r1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d14e      	bne.n	8000802 <__udivmoddi4+0xaa>
 8000764:	4694      	mov	ip, r2
 8000766:	458c      	cmp	ip, r1
 8000768:	4686      	mov	lr, r0
 800076a:	fab2 f282 	clz	r2, r2
 800076e:	d962      	bls.n	8000836 <__udivmoddi4+0xde>
 8000770:	b14a      	cbz	r2, 8000786 <__udivmoddi4+0x2e>
 8000772:	f1c2 0320 	rsb	r3, r2, #32
 8000776:	4091      	lsls	r1, r2
 8000778:	fa20 f303 	lsr.w	r3, r0, r3
 800077c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000780:	4319      	orrs	r1, r3
 8000782:	fa00 fe02 	lsl.w	lr, r0, r2
 8000786:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800078a:	fa1f f68c 	uxth.w	r6, ip
 800078e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000792:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000796:	fb07 1114 	mls	r1, r7, r4, r1
 800079a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079e:	fb04 f106 	mul.w	r1, r4, r6
 80007a2:	4299      	cmp	r1, r3
 80007a4:	d90a      	bls.n	80007bc <__udivmoddi4+0x64>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80007ae:	f080 8112 	bcs.w	80009d6 <__udivmoddi4+0x27e>
 80007b2:	4299      	cmp	r1, r3
 80007b4:	f240 810f 	bls.w	80009d6 <__udivmoddi4+0x27e>
 80007b8:	3c02      	subs	r4, #2
 80007ba:	4463      	add	r3, ip
 80007bc:	1a59      	subs	r1, r3, r1
 80007be:	fa1f f38e 	uxth.w	r3, lr
 80007c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007c6:	fb07 1110 	mls	r1, r7, r0, r1
 80007ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ce:	fb00 f606 	mul.w	r6, r0, r6
 80007d2:	429e      	cmp	r6, r3
 80007d4:	d90a      	bls.n	80007ec <__udivmoddi4+0x94>
 80007d6:	eb1c 0303 	adds.w	r3, ip, r3
 80007da:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80007de:	f080 80fc 	bcs.w	80009da <__udivmoddi4+0x282>
 80007e2:	429e      	cmp	r6, r3
 80007e4:	f240 80f9 	bls.w	80009da <__udivmoddi4+0x282>
 80007e8:	4463      	add	r3, ip
 80007ea:	3802      	subs	r0, #2
 80007ec:	1b9b      	subs	r3, r3, r6
 80007ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007f2:	2100      	movs	r1, #0
 80007f4:	b11d      	cbz	r5, 80007fe <__udivmoddi4+0xa6>
 80007f6:	40d3      	lsrs	r3, r2
 80007f8:	2200      	movs	r2, #0
 80007fa:	e9c5 3200 	strd	r3, r2, [r5]
 80007fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000802:	428b      	cmp	r3, r1
 8000804:	d905      	bls.n	8000812 <__udivmoddi4+0xba>
 8000806:	b10d      	cbz	r5, 800080c <__udivmoddi4+0xb4>
 8000808:	e9c5 0100 	strd	r0, r1, [r5]
 800080c:	2100      	movs	r1, #0
 800080e:	4608      	mov	r0, r1
 8000810:	e7f5      	b.n	80007fe <__udivmoddi4+0xa6>
 8000812:	fab3 f183 	clz	r1, r3
 8000816:	2900      	cmp	r1, #0
 8000818:	d146      	bne.n	80008a8 <__udivmoddi4+0x150>
 800081a:	42a3      	cmp	r3, r4
 800081c:	d302      	bcc.n	8000824 <__udivmoddi4+0xcc>
 800081e:	4290      	cmp	r0, r2
 8000820:	f0c0 80f0 	bcc.w	8000a04 <__udivmoddi4+0x2ac>
 8000824:	1a86      	subs	r6, r0, r2
 8000826:	eb64 0303 	sbc.w	r3, r4, r3
 800082a:	2001      	movs	r0, #1
 800082c:	2d00      	cmp	r5, #0
 800082e:	d0e6      	beq.n	80007fe <__udivmoddi4+0xa6>
 8000830:	e9c5 6300 	strd	r6, r3, [r5]
 8000834:	e7e3      	b.n	80007fe <__udivmoddi4+0xa6>
 8000836:	2a00      	cmp	r2, #0
 8000838:	f040 8090 	bne.w	800095c <__udivmoddi4+0x204>
 800083c:	eba1 040c 	sub.w	r4, r1, ip
 8000840:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000844:	fa1f f78c 	uxth.w	r7, ip
 8000848:	2101      	movs	r1, #1
 800084a:	fbb4 f6f8 	udiv	r6, r4, r8
 800084e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000852:	fb08 4416 	mls	r4, r8, r6, r4
 8000856:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800085a:	fb07 f006 	mul.w	r0, r7, r6
 800085e:	4298      	cmp	r0, r3
 8000860:	d908      	bls.n	8000874 <__udivmoddi4+0x11c>
 8000862:	eb1c 0303 	adds.w	r3, ip, r3
 8000866:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800086a:	d202      	bcs.n	8000872 <__udivmoddi4+0x11a>
 800086c:	4298      	cmp	r0, r3
 800086e:	f200 80cd 	bhi.w	8000a0c <__udivmoddi4+0x2b4>
 8000872:	4626      	mov	r6, r4
 8000874:	1a1c      	subs	r4, r3, r0
 8000876:	fa1f f38e 	uxth.w	r3, lr
 800087a:	fbb4 f0f8 	udiv	r0, r4, r8
 800087e:	fb08 4410 	mls	r4, r8, r0, r4
 8000882:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000886:	fb00 f707 	mul.w	r7, r0, r7
 800088a:	429f      	cmp	r7, r3
 800088c:	d908      	bls.n	80008a0 <__udivmoddi4+0x148>
 800088e:	eb1c 0303 	adds.w	r3, ip, r3
 8000892:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000896:	d202      	bcs.n	800089e <__udivmoddi4+0x146>
 8000898:	429f      	cmp	r7, r3
 800089a:	f200 80b0 	bhi.w	80009fe <__udivmoddi4+0x2a6>
 800089e:	4620      	mov	r0, r4
 80008a0:	1bdb      	subs	r3, r3, r7
 80008a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008a6:	e7a5      	b.n	80007f4 <__udivmoddi4+0x9c>
 80008a8:	f1c1 0620 	rsb	r6, r1, #32
 80008ac:	408b      	lsls	r3, r1
 80008ae:	fa22 f706 	lsr.w	r7, r2, r6
 80008b2:	431f      	orrs	r7, r3
 80008b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80008b8:	fa04 f301 	lsl.w	r3, r4, r1
 80008bc:	ea43 030c 	orr.w	r3, r3, ip
 80008c0:	40f4      	lsrs	r4, r6
 80008c2:	fa00 f801 	lsl.w	r8, r0, r1
 80008c6:	0c38      	lsrs	r0, r7, #16
 80008c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008cc:	fbb4 fef0 	udiv	lr, r4, r0
 80008d0:	fa1f fc87 	uxth.w	ip, r7
 80008d4:	fb00 441e 	mls	r4, r0, lr, r4
 80008d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008dc:	fb0e f90c 	mul.w	r9, lr, ip
 80008e0:	45a1      	cmp	r9, r4
 80008e2:	fa02 f201 	lsl.w	r2, r2, r1
 80008e6:	d90a      	bls.n	80008fe <__udivmoddi4+0x1a6>
 80008e8:	193c      	adds	r4, r7, r4
 80008ea:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80008ee:	f080 8084 	bcs.w	80009fa <__udivmoddi4+0x2a2>
 80008f2:	45a1      	cmp	r9, r4
 80008f4:	f240 8081 	bls.w	80009fa <__udivmoddi4+0x2a2>
 80008f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008fc:	443c      	add	r4, r7
 80008fe:	eba4 0409 	sub.w	r4, r4, r9
 8000902:	fa1f f983 	uxth.w	r9, r3
 8000906:	fbb4 f3f0 	udiv	r3, r4, r0
 800090a:	fb00 4413 	mls	r4, r0, r3, r4
 800090e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000912:	fb03 fc0c 	mul.w	ip, r3, ip
 8000916:	45a4      	cmp	ip, r4
 8000918:	d907      	bls.n	800092a <__udivmoddi4+0x1d2>
 800091a:	193c      	adds	r4, r7, r4
 800091c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000920:	d267      	bcs.n	80009f2 <__udivmoddi4+0x29a>
 8000922:	45a4      	cmp	ip, r4
 8000924:	d965      	bls.n	80009f2 <__udivmoddi4+0x29a>
 8000926:	3b02      	subs	r3, #2
 8000928:	443c      	add	r4, r7
 800092a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800092e:	fba0 9302 	umull	r9, r3, r0, r2
 8000932:	eba4 040c 	sub.w	r4, r4, ip
 8000936:	429c      	cmp	r4, r3
 8000938:	46ce      	mov	lr, r9
 800093a:	469c      	mov	ip, r3
 800093c:	d351      	bcc.n	80009e2 <__udivmoddi4+0x28a>
 800093e:	d04e      	beq.n	80009de <__udivmoddi4+0x286>
 8000940:	b155      	cbz	r5, 8000958 <__udivmoddi4+0x200>
 8000942:	ebb8 030e 	subs.w	r3, r8, lr
 8000946:	eb64 040c 	sbc.w	r4, r4, ip
 800094a:	fa04 f606 	lsl.w	r6, r4, r6
 800094e:	40cb      	lsrs	r3, r1
 8000950:	431e      	orrs	r6, r3
 8000952:	40cc      	lsrs	r4, r1
 8000954:	e9c5 6400 	strd	r6, r4, [r5]
 8000958:	2100      	movs	r1, #0
 800095a:	e750      	b.n	80007fe <__udivmoddi4+0xa6>
 800095c:	f1c2 0320 	rsb	r3, r2, #32
 8000960:	fa20 f103 	lsr.w	r1, r0, r3
 8000964:	fa0c fc02 	lsl.w	ip, ip, r2
 8000968:	fa24 f303 	lsr.w	r3, r4, r3
 800096c:	4094      	lsls	r4, r2
 800096e:	430c      	orrs	r4, r1
 8000970:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000974:	fa00 fe02 	lsl.w	lr, r0, r2
 8000978:	fa1f f78c 	uxth.w	r7, ip
 800097c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000980:	fb08 3110 	mls	r1, r8, r0, r3
 8000984:	0c23      	lsrs	r3, r4, #16
 8000986:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800098a:	fb00 f107 	mul.w	r1, r0, r7
 800098e:	4299      	cmp	r1, r3
 8000990:	d908      	bls.n	80009a4 <__udivmoddi4+0x24c>
 8000992:	eb1c 0303 	adds.w	r3, ip, r3
 8000996:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800099a:	d22c      	bcs.n	80009f6 <__udivmoddi4+0x29e>
 800099c:	4299      	cmp	r1, r3
 800099e:	d92a      	bls.n	80009f6 <__udivmoddi4+0x29e>
 80009a0:	3802      	subs	r0, #2
 80009a2:	4463      	add	r3, ip
 80009a4:	1a5b      	subs	r3, r3, r1
 80009a6:	b2a4      	uxth	r4, r4
 80009a8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009ac:	fb08 3311 	mls	r3, r8, r1, r3
 80009b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009b4:	fb01 f307 	mul.w	r3, r1, r7
 80009b8:	42a3      	cmp	r3, r4
 80009ba:	d908      	bls.n	80009ce <__udivmoddi4+0x276>
 80009bc:	eb1c 0404 	adds.w	r4, ip, r4
 80009c0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80009c4:	d213      	bcs.n	80009ee <__udivmoddi4+0x296>
 80009c6:	42a3      	cmp	r3, r4
 80009c8:	d911      	bls.n	80009ee <__udivmoddi4+0x296>
 80009ca:	3902      	subs	r1, #2
 80009cc:	4464      	add	r4, ip
 80009ce:	1ae4      	subs	r4, r4, r3
 80009d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009d4:	e739      	b.n	800084a <__udivmoddi4+0xf2>
 80009d6:	4604      	mov	r4, r0
 80009d8:	e6f0      	b.n	80007bc <__udivmoddi4+0x64>
 80009da:	4608      	mov	r0, r1
 80009dc:	e706      	b.n	80007ec <__udivmoddi4+0x94>
 80009de:	45c8      	cmp	r8, r9
 80009e0:	d2ae      	bcs.n	8000940 <__udivmoddi4+0x1e8>
 80009e2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009e6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ea:	3801      	subs	r0, #1
 80009ec:	e7a8      	b.n	8000940 <__udivmoddi4+0x1e8>
 80009ee:	4631      	mov	r1, r6
 80009f0:	e7ed      	b.n	80009ce <__udivmoddi4+0x276>
 80009f2:	4603      	mov	r3, r0
 80009f4:	e799      	b.n	800092a <__udivmoddi4+0x1d2>
 80009f6:	4630      	mov	r0, r6
 80009f8:	e7d4      	b.n	80009a4 <__udivmoddi4+0x24c>
 80009fa:	46d6      	mov	lr, sl
 80009fc:	e77f      	b.n	80008fe <__udivmoddi4+0x1a6>
 80009fe:	4463      	add	r3, ip
 8000a00:	3802      	subs	r0, #2
 8000a02:	e74d      	b.n	80008a0 <__udivmoddi4+0x148>
 8000a04:	4606      	mov	r6, r0
 8000a06:	4623      	mov	r3, r4
 8000a08:	4608      	mov	r0, r1
 8000a0a:	e70f      	b.n	800082c <__udivmoddi4+0xd4>
 8000a0c:	3e02      	subs	r6, #2
 8000a0e:	4463      	add	r3, ip
 8000a10:	e730      	b.n	8000874 <__udivmoddi4+0x11c>
 8000a12:	bf00      	nop

08000a14 <__aeabi_idiv0>:
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <MCP23S17_init>:
#include "shell.h"

#define MCP23S17_ADDR 0x40//A0=A1=A2=GND
#define MCP23S17_SPI hspi3

void MCP23S17_init(void){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0

	/* 0x00 - IODIRA | 0x01 - IODIRB
	 * 0 : All Pins as Output
	 */
	MCP23S17_WriteRegister(0x00, 0x00) == HAL_OK ? debug(START,"MCP23S17 - IODIRA") : debug(D_ERROR,"MCP23S17 - IODIRA");
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2000      	movs	r0, #0
 8000a22:	f000 f929 	bl	8000c78 <MCP23S17_WriteRegister>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d104      	bne.n	8000a36 <MCP23S17_init+0x1e>
 8000a2c:	498c      	ldr	r1, [pc, #560]	@ (8000c60 <MCP23S17_init+0x248>)
 8000a2e:	488d      	ldr	r0, [pc, #564]	@ (8000c64 <MCP23S17_init+0x24c>)
 8000a30:	f00a fcd0 	bl	800b3d4 <debug>
 8000a34:	e003      	b.n	8000a3e <MCP23S17_init+0x26>
 8000a36:	498a      	ldr	r1, [pc, #552]	@ (8000c60 <MCP23S17_init+0x248>)
 8000a38:	488b      	ldr	r0, [pc, #556]	@ (8000c68 <MCP23S17_init+0x250>)
 8000a3a:	f00a fccb 	bl	800b3d4 <debug>
	osDelay(10);
 8000a3e:	200a      	movs	r0, #10
 8000a40:	f008 f891 	bl	8008b66 <osDelay>
	MCP23S17_WriteRegister(0x01, 0x00) == HAL_OK ? debug(START,"MCP23S17 - IODIRB") : debug(D_ERROR,"MCP23S17 - IODIRB");
 8000a44:	2100      	movs	r1, #0
 8000a46:	2001      	movs	r0, #1
 8000a48:	f000 f916 	bl	8000c78 <MCP23S17_WriteRegister>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d104      	bne.n	8000a5c <MCP23S17_init+0x44>
 8000a52:	4986      	ldr	r1, [pc, #536]	@ (8000c6c <MCP23S17_init+0x254>)
 8000a54:	4883      	ldr	r0, [pc, #524]	@ (8000c64 <MCP23S17_init+0x24c>)
 8000a56:	f00a fcbd 	bl	800b3d4 <debug>
 8000a5a:	e003      	b.n	8000a64 <MCP23S17_init+0x4c>
 8000a5c:	4983      	ldr	r1, [pc, #524]	@ (8000c6c <MCP23S17_init+0x254>)
 8000a5e:	4882      	ldr	r0, [pc, #520]	@ (8000c68 <MCP23S17_init+0x250>)
 8000a60:	f00a fcb8 	bl	800b3d4 <debug>

	/* 0x12 - GPIOA | 0x13 - GPIOB
	 *
	 */
	MCP23S17_WriteRegister(0x12, 0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 8000a64:	21ff      	movs	r1, #255	@ 0xff
 8000a66:	2012      	movs	r0, #18
 8000a68:	f000 f906 	bl	8000c78 <MCP23S17_WriteRegister>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d104      	bne.n	8000a7c <MCP23S17_init+0x64>
 8000a72:	497f      	ldr	r1, [pc, #508]	@ (8000c70 <MCP23S17_init+0x258>)
 8000a74:	487b      	ldr	r0, [pc, #492]	@ (8000c64 <MCP23S17_init+0x24c>)
 8000a76:	f00a fcad 	bl	800b3d4 <debug>
 8000a7a:	e003      	b.n	8000a84 <MCP23S17_init+0x6c>
 8000a7c:	497c      	ldr	r1, [pc, #496]	@ (8000c70 <MCP23S17_init+0x258>)
 8000a7e:	487a      	ldr	r0, [pc, #488]	@ (8000c68 <MCP23S17_init+0x250>)
 8000a80:	f00a fca8 	bl	800b3d4 <debug>
	MCP23S17_WriteRegister(0x13, 0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 8000a84:	21ff      	movs	r1, #255	@ 0xff
 8000a86:	2013      	movs	r0, #19
 8000a88:	f000 f8f6 	bl	8000c78 <MCP23S17_WriteRegister>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d104      	bne.n	8000a9c <MCP23S17_init+0x84>
 8000a92:	4977      	ldr	r1, [pc, #476]	@ (8000c70 <MCP23S17_init+0x258>)
 8000a94:	4873      	ldr	r0, [pc, #460]	@ (8000c64 <MCP23S17_init+0x24c>)
 8000a96:	f00a fc9d 	bl	800b3d4 <debug>
 8000a9a:	e003      	b.n	8000aa4 <MCP23S17_init+0x8c>
 8000a9c:	4974      	ldr	r1, [pc, #464]	@ (8000c70 <MCP23S17_init+0x258>)
 8000a9e:	4872      	ldr	r0, [pc, #456]	@ (8000c68 <MCP23S17_init+0x250>)
 8000aa0:	f00a fc98 	bl	800b3d4 <debug>

	for (int i = 0; i<9; i++){
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	e01a      	b.n	8000ae0 <MCP23S17_init+0xc8>
		MCP23S17_WriteRegister(0x12, (0xFF<<i)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 8000aaa:	22ff      	movs	r2, #255	@ 0xff
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2012      	movs	r0, #18
 8000ab8:	f000 f8de 	bl	8000c78 <MCP23S17_WriteRegister>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d104      	bne.n	8000acc <MCP23S17_init+0xb4>
 8000ac2:	496b      	ldr	r1, [pc, #428]	@ (8000c70 <MCP23S17_init+0x258>)
 8000ac4:	4867      	ldr	r0, [pc, #412]	@ (8000c64 <MCP23S17_init+0x24c>)
 8000ac6:	f00a fc85 	bl	800b3d4 <debug>
 8000aca:	e003      	b.n	8000ad4 <MCP23S17_init+0xbc>
 8000acc:	4968      	ldr	r1, [pc, #416]	@ (8000c70 <MCP23S17_init+0x258>)
 8000ace:	4866      	ldr	r0, [pc, #408]	@ (8000c68 <MCP23S17_init+0x250>)
 8000ad0:	f00a fc80 	bl	800b3d4 <debug>
		osDelay(50);
 8000ad4:	2032      	movs	r0, #50	@ 0x32
 8000ad6:	f008 f846 	bl	8008b66 <osDelay>
	for (int i = 0; i<9; i++){
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3301      	adds	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b08      	cmp	r3, #8
 8000ae4:	dde1      	ble.n	8000aaa <MCP23S17_init+0x92>
	}
	for (int i = 0; i<=8; i++){
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	e01a      	b.n	8000b22 <MCP23S17_init+0x10a>
		MCP23S17_WriteRegister(0x13, (0xFF<<i)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOB") : debug(D_ERROR,"MCP23S17 - GPIOB");
 8000aec:	22ff      	movs	r2, #255	@ 0xff
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	4619      	mov	r1, r3
 8000af8:	2013      	movs	r0, #19
 8000afa:	f000 f8bd 	bl	8000c78 <MCP23S17_WriteRegister>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d104      	bne.n	8000b0e <MCP23S17_init+0xf6>
 8000b04:	495b      	ldr	r1, [pc, #364]	@ (8000c74 <MCP23S17_init+0x25c>)
 8000b06:	4857      	ldr	r0, [pc, #348]	@ (8000c64 <MCP23S17_init+0x24c>)
 8000b08:	f00a fc64 	bl	800b3d4 <debug>
 8000b0c:	e003      	b.n	8000b16 <MCP23S17_init+0xfe>
 8000b0e:	4959      	ldr	r1, [pc, #356]	@ (8000c74 <MCP23S17_init+0x25c>)
 8000b10:	4855      	ldr	r0, [pc, #340]	@ (8000c68 <MCP23S17_init+0x250>)
 8000b12:	f00a fc5f 	bl	800b3d4 <debug>
		osDelay(50);
 8000b16:	2032      	movs	r0, #50	@ 0x32
 8000b18:	f008 f825 	bl	8008b66 <osDelay>
	for (int i = 0; i<=8; i++){
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	2b08      	cmp	r3, #8
 8000b26:	dde1      	ble.n	8000aec <MCP23S17_init+0xd4>
	}
	osDelay(500);
 8000b28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b2c:	f008 f81b 	bl	8008b66 <osDelay>
	MCP23S17_WriteRegister(0x12, 0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 8000b30:	21ff      	movs	r1, #255	@ 0xff
 8000b32:	2012      	movs	r0, #18
 8000b34:	f000 f8a0 	bl	8000c78 <MCP23S17_WriteRegister>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d104      	bne.n	8000b48 <MCP23S17_init+0x130>
 8000b3e:	494c      	ldr	r1, [pc, #304]	@ (8000c70 <MCP23S17_init+0x258>)
 8000b40:	4848      	ldr	r0, [pc, #288]	@ (8000c64 <MCP23S17_init+0x24c>)
 8000b42:	f00a fc47 	bl	800b3d4 <debug>
 8000b46:	e003      	b.n	8000b50 <MCP23S17_init+0x138>
 8000b48:	4949      	ldr	r1, [pc, #292]	@ (8000c70 <MCP23S17_init+0x258>)
 8000b4a:	4847      	ldr	r0, [pc, #284]	@ (8000c68 <MCP23S17_init+0x250>)
 8000b4c:	f00a fc42 	bl	800b3d4 <debug>
	MCP23S17_WriteRegister(0x13, 0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 8000b50:	21ff      	movs	r1, #255	@ 0xff
 8000b52:	2013      	movs	r0, #19
 8000b54:	f000 f890 	bl	8000c78 <MCP23S17_WriteRegister>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d104      	bne.n	8000b68 <MCP23S17_init+0x150>
 8000b5e:	4944      	ldr	r1, [pc, #272]	@ (8000c70 <MCP23S17_init+0x258>)
 8000b60:	4840      	ldr	r0, [pc, #256]	@ (8000c64 <MCP23S17_init+0x24c>)
 8000b62:	f00a fc37 	bl	800b3d4 <debug>
 8000b66:	e003      	b.n	8000b70 <MCP23S17_init+0x158>
 8000b68:	4941      	ldr	r1, [pc, #260]	@ (8000c70 <MCP23S17_init+0x258>)
 8000b6a:	483f      	ldr	r0, [pc, #252]	@ (8000c68 <MCP23S17_init+0x250>)
 8000b6c:	f00a fc32 	bl	800b3d4 <debug>
	osDelay(500);
 8000b70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b74:	f007 fff7 	bl	8008b66 <osDelay>
	for (int i =0;i<9;i++){
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	e02f      	b.n	8000bde <MCP23S17_init+0x1c6>
		MCP23S17_WriteRegister(0x12, (0xFF<<i)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 8000b7e:	22ff      	movs	r2, #255	@ 0xff
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	4619      	mov	r1, r3
 8000b8a:	2012      	movs	r0, #18
 8000b8c:	f000 f874 	bl	8000c78 <MCP23S17_WriteRegister>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d104      	bne.n	8000ba0 <MCP23S17_init+0x188>
 8000b96:	4936      	ldr	r1, [pc, #216]	@ (8000c70 <MCP23S17_init+0x258>)
 8000b98:	4832      	ldr	r0, [pc, #200]	@ (8000c64 <MCP23S17_init+0x24c>)
 8000b9a:	f00a fc1b 	bl	800b3d4 <debug>
 8000b9e:	e003      	b.n	8000ba8 <MCP23S17_init+0x190>
 8000ba0:	4933      	ldr	r1, [pc, #204]	@ (8000c70 <MCP23S17_init+0x258>)
 8000ba2:	4831      	ldr	r0, [pc, #196]	@ (8000c68 <MCP23S17_init+0x250>)
 8000ba4:	f00a fc16 	bl	800b3d4 <debug>
		MCP23S17_WriteRegister(0x13, (0xFF<<i)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOB") : debug(D_ERROR,"MCP23S17 - GPIOB");
 8000ba8:	22ff      	movs	r2, #255	@ 0xff
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	2013      	movs	r0, #19
 8000bb6:	f000 f85f 	bl	8000c78 <MCP23S17_WriteRegister>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d104      	bne.n	8000bca <MCP23S17_init+0x1b2>
 8000bc0:	492c      	ldr	r1, [pc, #176]	@ (8000c74 <MCP23S17_init+0x25c>)
 8000bc2:	4828      	ldr	r0, [pc, #160]	@ (8000c64 <MCP23S17_init+0x24c>)
 8000bc4:	f00a fc06 	bl	800b3d4 <debug>
 8000bc8:	e003      	b.n	8000bd2 <MCP23S17_init+0x1ba>
 8000bca:	492a      	ldr	r1, [pc, #168]	@ (8000c74 <MCP23S17_init+0x25c>)
 8000bcc:	4826      	ldr	r0, [pc, #152]	@ (8000c68 <MCP23S17_init+0x250>)
 8000bce:	f00a fc01 	bl	800b3d4 <debug>
		osDelay(50);
 8000bd2:	2032      	movs	r0, #50	@ 0x32
 8000bd4:	f007 ffc7 	bl	8008b66 <osDelay>
	for (int i =0;i<9;i++){
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b08      	cmp	r3, #8
 8000be2:	ddcc      	ble.n	8000b7e <MCP23S17_init+0x166>
	}
	osDelay(100);
 8000be4:	2064      	movs	r0, #100	@ 0x64
 8000be6:	f007 ffbe 	bl	8008b66 <osDelay>
	for (int i = 8; i>=0; i--){
 8000bea:	2308      	movs	r3, #8
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	e02f      	b.n	8000c50 <MCP23S17_init+0x238>
		MCP23S17_WriteRegister(0x12, (0xFF<<i)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 8000bf0:	22ff      	movs	r2, #255	@ 0xff
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	2012      	movs	r0, #18
 8000bfe:	f000 f83b 	bl	8000c78 <MCP23S17_WriteRegister>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d104      	bne.n	8000c12 <MCP23S17_init+0x1fa>
 8000c08:	4919      	ldr	r1, [pc, #100]	@ (8000c70 <MCP23S17_init+0x258>)
 8000c0a:	4816      	ldr	r0, [pc, #88]	@ (8000c64 <MCP23S17_init+0x24c>)
 8000c0c:	f00a fbe2 	bl	800b3d4 <debug>
 8000c10:	e003      	b.n	8000c1a <MCP23S17_init+0x202>
 8000c12:	4917      	ldr	r1, [pc, #92]	@ (8000c70 <MCP23S17_init+0x258>)
 8000c14:	4814      	ldr	r0, [pc, #80]	@ (8000c68 <MCP23S17_init+0x250>)
 8000c16:	f00a fbdd 	bl	800b3d4 <debug>
		MCP23S17_WriteRegister(0x13, (0xFF<<i)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOB") : debug(D_ERROR,"MCP23S17 - GPIOB");
 8000c1a:	22ff      	movs	r2, #255	@ 0xff
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	2013      	movs	r0, #19
 8000c28:	f000 f826 	bl	8000c78 <MCP23S17_WriteRegister>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d104      	bne.n	8000c3c <MCP23S17_init+0x224>
 8000c32:	4910      	ldr	r1, [pc, #64]	@ (8000c74 <MCP23S17_init+0x25c>)
 8000c34:	480b      	ldr	r0, [pc, #44]	@ (8000c64 <MCP23S17_init+0x24c>)
 8000c36:	f00a fbcd 	bl	800b3d4 <debug>
 8000c3a:	e003      	b.n	8000c44 <MCP23S17_init+0x22c>
 8000c3c:	490d      	ldr	r1, [pc, #52]	@ (8000c74 <MCP23S17_init+0x25c>)
 8000c3e:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <MCP23S17_init+0x250>)
 8000c40:	f00a fbc8 	bl	800b3d4 <debug>
		osDelay(50);
 8000c44:	2032      	movs	r0, #50	@ 0x32
 8000c46:	f007 ff8e 	bl	8008b66 <osDelay>
	for (int i = 8; i>=0; i--){
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	dacc      	bge.n	8000bf0 <MCP23S17_init+0x1d8>
	}

}
 8000c56:	bf00      	nop
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	0800c6ac 	.word	0x0800c6ac
 8000c64:	0800c6c0 	.word	0x0800c6c0
 8000c68:	0800c6cc 	.word	0x0800c6cc
 8000c6c:	0800c6d8 	.word	0x0800c6d8
 8000c70:	0800c6ec 	.word	0x0800c6ec
 8000c74:	0800c700 	.word	0x0800c700

08000c78 <MCP23S17_WriteRegister>:

HAL_StatusTypeDef MCP23S17_WriteRegister(uint8_t reg, uint8_t data){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	71bb      	strb	r3, [r7, #6]
	uint8_t pData[3];

	pData[0] = MCP23S17_ADDR ;
 8000c88:	2340      	movs	r3, #64	@ 0x40
 8000c8a:	733b      	strb	r3, [r7, #12]
	pData[1] = reg;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	737b      	strb	r3, [r7, #13]
	pData[2] = data;
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2180      	movs	r1, #128	@ 0x80
 8000c98:	480b      	ldr	r0, [pc, #44]	@ (8000cc8 <MCP23S17_WriteRegister+0x50>)
 8000c9a:	f001 fd77 	bl	800278c <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&MCP23S17_SPI, pData, 3, HAL_MAX_DELAY);
 8000c9e:	f107 010c 	add.w	r1, r7, #12
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	4808      	ldr	r0, [pc, #32]	@ (8000ccc <MCP23S17_WriteRegister+0x54>)
 8000caa:	f005 fb5b 	bl	8006364 <HAL_SPI_Transmit>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2180      	movs	r1, #128	@ 0x80
 8000cb6:	4804      	ldr	r0, [pc, #16]	@ (8000cc8 <MCP23S17_WriteRegister+0x50>)
 8000cb8:	f001 fd68 	bl	800278c <HAL_GPIO_WritePin>
	return ret;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]

}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	48000400 	.word	0x48000400
 8000ccc:	2000062c 	.word	0x2000062c

08000cd0 <sgtl5000_init>:
}



HAL_StatusTypeDef sgtl5000_init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	71fb      	strb	r3, [r7, #7]

	// NOTE: This next Write call is needed ONLY if VDDD is
	// externally driven
	// Turn off startup power supplies to save power (Clear bit 12 and 13)
	// Write CHIP_ANA_POWER 0x4260
	mask = (1 << 12) | (1 << 13);
 8000cda:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000cde:	80bb      	strh	r3, [r7, #4]
	sgtl5000_i2c_clear_bit(SGTL5000_CHIP_ANA_POWER, mask);
 8000ce0:	88bb      	ldrh	r3, [r7, #4]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	2030      	movs	r0, #48	@ 0x30
 8000ce6:	f000 f8e2 	bl	8000eae <sgtl5000_i2c_clear_bit>
	// NOTE: The next modify call is only needed if both VDDA and
	// VDDIO are greater than 3.1 V
	// Configure the charge pump to use the VDDIO rail (set bit 5 and bit 6)
	// Write CHIP_LINREG_CTRL 0x006C
	// VDDA and VDDIO = 3.3V so it IS necessary
	mask = (1 << 5) | (1 << 6);
 8000cea:	2360      	movs	r3, #96	@ 0x60
 8000cec:	80bb      	strh	r3, [r7, #4]
	sgtl5000_i2c_set_bit(SGTL5000_CHIP_LINREG_CTRL, mask);
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	2026      	movs	r0, #38	@ 0x26
 8000cf4:	f000 f8bc 	bl	8000e70 <sgtl5000_i2c_set_bit>
	// on the VDDA voltage value.
	// Set ground, ADC, DAC reference voltage (bits 8:4). The value should
	// be set to VDDA/2. This example assumes VDDA = 1.8 V. VDDA/2 = 0.9 V.
	// The bias current should be set to 50% of the nominal value (bits 3:1)
	// Write CHIP_REF_CTRL 0x004E
	mask = 0x01FF;	// VAG_VAL = 1.575V, BIAS_CTRL = -50%, SMALL_POP = 1
 8000cf8:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8000cfc:	80bb      	strh	r3, [r7, #4]
	sgtl5000_i2c_write_register(SGTL5000_CHIP_REF_CTRL, mask);
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	4619      	mov	r1, r3
 8000d02:	2028      	movs	r0, #40	@ 0x28
 8000d04:	f000 f886 	bl	8000e14 <sgtl5000_i2c_write_register>
	// Set LINEOUT reference voltage to VDDIO/2 (1.65 V) (bits 5:0)
	// and bias current (bits 11:8) to the recommended value of 0.36 mA
	// for 10 kOhm load with 1.0 nF capacitance
	// Write CHIP_LINE_OUT_CTRL 0x0322
//	mask = 0x0322;	// LO_VAGCNTRL = 1.65V, OUT_CURRENT = 0.36mA (?)
	mask = 0x031E;
 8000d08:	f240 331e 	movw	r3, #798	@ 0x31e
 8000d0c:	80bb      	strh	r3, [r7, #4]
	sgtl5000_i2c_write_register(SGTL5000_CHIP_LINE_OUT_CTRL, mask);
 8000d0e:	88bb      	ldrh	r3, [r7, #4]
 8000d10:	4619      	mov	r1, r3
 8000d12:	202c      	movs	r0, #44	@ 0x2c
 8000d14:	f000 f87e 	bl	8000e14 <sgtl5000_i2c_write_register>

	// Enable short detect mode for headphone left/right
	// and center channel and set short detect current trip level
	// to 75 mA
	// Write CHIP_SHORT_CTRL 0x1106
	mask = 0x1106;	// MODE_CM = 2, MODE_LR = 1, LVLADJC = 200mA, LVLADJL = 75mA, LVLADJR = 50mA
 8000d18:	f241 1306 	movw	r3, #4358	@ 0x1106
 8000d1c:	80bb      	strh	r3, [r7, #4]
	sgtl5000_i2c_write_register(SGTL5000_CHIP_SHORT_CTRL, mask);
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	4619      	mov	r1, r3
 8000d22:	203c      	movs	r0, #60	@ 0x3c
 8000d24:	f000 f876 	bl	8000e14 <sgtl5000_i2c_write_register>

	// Enable Zero-cross detect if needed for HP_OUT (bit 5) and ADC (bit 1)
	// Write CHIP_ANA_CTRL 0x0133
	mask = 0x0004;	// Unmute all + SELECT_ADC = LINEIN
 8000d28:	2304      	movs	r3, #4
 8000d2a:	80bb      	strh	r3, [r7, #4]
//	mask = 0x0000;	// Unmute all + SELECT_ADC = MIC
	sgtl5000_i2c_write_register( SGTL5000_CHIP_ANA_CTRL, mask);
 8000d2c:	88bb      	ldrh	r3, [r7, #4]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	2024      	movs	r0, #36	@ 0x24
 8000d32:	f000 f86f 	bl	8000e14 <sgtl5000_i2c_write_register>

	//------------Power up Inputs/Outputs/Digital Blocks---------
	// Power up LINEOUT, HP, ADC, DAC
	// Write CHIP_ANA_POWER 0x6AFF
	mask = 0x6AFF;	// LINEOUT_POWERUP, ADC_POWERUP, CAPLESS_HEADPHONE_POWERUP, DAC_POWERUP, HEADPHONE_POWERUP, REFTOP_POWERUP, ADC_MONO = stereo
 8000d36:	f646 23ff 	movw	r3, #27391	@ 0x6aff
 8000d3a:	80bb      	strh	r3, [r7, #4]
	// VAG_POWERUP, VCOAMP_POWERUP = 0, LINREG_D_POWERUP, PLL_POWERUP = 0, VDDC_CHRGPMP_POWERUP, STARTUP_POWERUP = 0, LINREG_SIMPLE_POWERUP,
	// DAC_MONO = stereo
	sgtl5000_i2c_write_register(SGTL5000_CHIP_ANA_POWER, mask);
 8000d3c:	88bb      	ldrh	r3, [r7, #4]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2030      	movs	r0, #48	@ 0x30
 8000d42:	f000 f867 	bl	8000e14 <sgtl5000_i2c_write_register>
	// Power up desired digital blocks
	// I2S_IN (bit 0), I2S_OUT (bit 1), DAP (bit 4), DAC (bit 5),
	// ADC (bit 6) are powered on
	// Write CHIP_DIG_POWER 0x0073
	mask = 0x0073;	// I2S_IN_POWERUP, I2S_OUT_POWERUP, DAP_POWERUP, DAC_POWERUP, ADC_POWERUP
 8000d46:	2373      	movs	r3, #115	@ 0x73
 8000d48:	80bb      	strh	r3, [r7, #4]
	sgtl5000_i2c_write_register(SGTL5000_CHIP_DIG_POWER, mask);
 8000d4a:	88bb      	ldrh	r3, [r7, #4]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	2002      	movs	r0, #2
 8000d50:	f000 f860 	bl	8000e14 <sgtl5000_i2c_write_register>
	// Value = (int)(40*log(VAG_VAL/LO_VAGCNTRL) + 15)
	// Assuming VAG_VAL and LO_VAGCNTRL is set to 0.9 V and
	// 1.65 V respectively, the // left LO vol (bits 12:8) and right LO
	// volume (bits 4:0) value should be set // to 5
	// Write CHIP_LINE_OUT_VOL 0x0505
	mask = 0x1f1f;	// TODO recalculer
 8000d54:	f641 731f 	movw	r3, #7967	@ 0x1f1f
 8000d58:	80bb      	strh	r3, [r7, #4]
	sgtl5000_i2c_write_register(SGTL5000_CHIP_LINE_OUT_VOL, mask);
 8000d5a:	88bb      	ldrh	r3, [r7, #4]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	202e      	movs	r0, #46	@ 0x2e
 8000d60:	f000 f858 	bl	8000e14 <sgtl5000_i2c_write_register>

	// Configure SYS_FS clock to 48 kHz
	// Configure MCLK_FREQ to 256*Fs
	// Modify CHIP_CLK_CTRL->SYS_FS 0x0002 // bits 3:2
	// Modify CHIP_CLK_CTRL->MCLK_FREQ 0x0000 // bits 1:0
	mask = 0x0004;	// SYS_FS = 48kHz
 8000d64:	2304      	movs	r3, #4
 8000d66:	80bb      	strh	r3, [r7, #4]
	sgtl5000_i2c_write_register(SGTL5000_CHIP_CLK_CTRL, mask);
 8000d68:	88bb      	ldrh	r3, [r7, #4]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	2004      	movs	r0, #4
 8000d6e:	f000 f851 	bl	8000e14 <sgtl5000_i2c_write_register>
	// Configure the I2S clocks in master mode
	// NOTE: I2S LRCLK is same as the system sample clock
	// Modify CHIP_I2S_CTRL->MS 0x0001 // bit 7
	// Non, on reste en slave!
	mask = 0x0130;	// DLEN = 16 bits
 8000d72:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8000d76:	80bb      	strh	r3, [r7, #4]
	sgtl5000_i2c_write_register(SGTL5000_CHIP_I2S_CTRL, mask);
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	2006      	movs	r0, #6
 8000d7e:	f000 f849 	bl	8000e14 <sgtl5000_i2c_write_register>
	// Laissons tout par défaut pour l'instant
//	mask = 0x0000;	// ADC -> DAC
//	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_SSS_CTRL, mask);

	// Le reste //
	mask = 0x0000;	// Unmute
 8000d82:	2300      	movs	r3, #0
 8000d84:	80bb      	strh	r3, [r7, #4]
	sgtl5000_i2c_write_register(SGTL5000_CHIP_ADCDAC_CTRL, mask);
 8000d86:	88bb      	ldrh	r3, [r7, #4]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	200e      	movs	r0, #14
 8000d8c:	f000 f842 	bl	8000e14 <sgtl5000_i2c_write_register>

	mask = 0x3C3C;
 8000d90:	f643 433c 	movw	r3, #15420	@ 0x3c3c
 8000d94:	80bb      	strh	r3, [r7, #4]
//	mask = 0x4747;
	sgtl5000_i2c_write_register(SGTL5000_CHIP_DAC_VOL, mask);
 8000d96:	88bb      	ldrh	r3, [r7, #4]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	2010      	movs	r0, #16
 8000d9c:	f000 f83a 	bl	8000e14 <sgtl5000_i2c_write_register>

	mask = 0x0251;	// BIAS_RESISTOR = 2, BIAS_VOLT = 5, GAIN = 1
 8000da0:	f240 2351 	movw	r3, #593	@ 0x251
 8000da4:	80bb      	strh	r3, [r7, #4]
	sgtl5000_i2c_write_register(SGTL5000_CHIP_MIC_CTRL, mask);
 8000da6:	88bb      	ldrh	r3, [r7, #4]
 8000da8:	4619      	mov	r1, r3
 8000daa:	202a      	movs	r0, #42	@ 0x2a
 8000dac:	f000 f832 	bl	8000e14 <sgtl5000_i2c_write_register>
//		uint16_t reg = 0;
//		sgtl5000_i2c_read_register(h_sgtl5000, register_map[i], &reg);
//		printf("%02d: [0x%04x] = 0x%04x\r\n", i, register_map[i], reg);
//	}

	return ret;
 8000db0:	79fb      	ldrb	r3, [r7, #7]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <sgtl5000_i2c_read_register>:
int sgtl5000_i2c_read_register(uint16_t reg_address, uint16_t * p_data)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af04      	add	r7, sp, #16
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	uint8_t reg[2];
	ret = HAL_I2C_Mem_Read(&hi2c2, SGTL5000_DEV_ADDR, reg_address, I2C_MEMADD_SIZE_16BIT, reg, 2, HAL_MAX_DELAY);
 8000dc8:	88fa      	ldrh	r2, [r7, #6]
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dce:	9302      	str	r3, [sp, #8]
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2302      	movs	r3, #2
 8000ddc:	2114      	movs	r1, #20
 8000dde:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <sgtl5000_i2c_read_register+0x54>)
 8000de0:	f001 fe9c 	bl	8002b1c <HAL_I2C_Mem_Read>
 8000de4:	4603      	mov	r3, r0
 8000de6:	73fb      	strb	r3, [r7, #15]

	*p_data = (reg[0] << 8) + reg[1];
 8000de8:	7b3b      	ldrb	r3, [r7, #12]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	7b7a      	ldrb	r2, [r7, #13]
 8000df0:	4413      	add	r3, r2
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	801a      	strh	r2, [r3, #0]

	if (ret == HAL_OK)
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <sgtl5000_i2c_read_register+0x46>
	{
		// HAL_I2C_Mem_Read s'est bien passé
		return 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e001      	b.n	8000e06 <sgtl5000_i2c_read_register+0x4a>
	}
	else
	{
		// HAL_I2C_Mem_Read a retourné une erreur
		return -1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
	}
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000040c 	.word	0x2000040c

08000e14 <sgtl5000_i2c_write_register>:

int sgtl5000_i2c_write_register(uint16_t reg_address, uint16_t data)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af04      	add	r7, sp, #16
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	460a      	mov	r2, r1
 8000e1e:	80fb      	strh	r3, [r7, #6]
 8000e20:	4613      	mov	r3, r2
 8000e22:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t reg[2];

	reg[0] = (data >> 8);
 8000e24:	88bb      	ldrh	r3, [r7, #4]
 8000e26:	0a1b      	lsrs	r3, r3, #8
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	733b      	strb	r3, [r7, #12]
	reg[1] = data & 0xFF;	// Masque (et logique bit à bit entre data et 0x00FF)
 8000e2e:	88bb      	ldrh	r3, [r7, #4]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	737b      	strb	r3, [r7, #13]

	ret = HAL_I2C_Mem_Write(&hi2c2, SGTL5000_DEV_ADDR, reg_address, I2C_MEMADD_SIZE_16BIT, reg, 2, HAL_MAX_DELAY);
 8000e34:	88fa      	ldrh	r2, [r7, #6]
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e3a:	9302      	str	r3, [sp, #8]
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2302      	movs	r3, #2
 8000e48:	2114      	movs	r1, #20
 8000e4a:	4808      	ldr	r0, [pc, #32]	@ (8000e6c <sgtl5000_i2c_write_register+0x58>)
 8000e4c:	f001 fd52 	bl	80028f4 <HAL_I2C_Mem_Write>
 8000e50:	4603      	mov	r3, r0
 8000e52:	73fb      	strb	r3, [r7, #15]

	if (ret == HAL_OK)
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <sgtl5000_i2c_write_register+0x4a>
	{
		return 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e001      	b.n	8000e62 <sgtl5000_i2c_write_register+0x4e>
	}
	else
	{
		return -1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
	}
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000040c 	.word	0x2000040c

08000e70 <sgtl5000_i2c_set_bit>:

int sgtl5000_i2c_set_bit(uint16_t reg_address, uint16_t mask)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	460a      	mov	r2, r1
 8000e7a:	80fb      	strh	r3, [r7, #6]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	80bb      	strh	r3, [r7, #4]
	uint16_t reg;
	// Lire le registre
	sgtl5000_i2c_read_register(reg_address, &reg);
 8000e80:	f107 020e 	add.w	r2, r7, #14
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff97 	bl	8000dbc <sgtl5000_i2c_read_register>
	// Modifier les bits selon le masque
	// Tous les 0 dans le masque ne modifient pas le registre
	// Tous les 1 dans le masque imposent des 1 dans le registre
	// Pour faire ça, on utilise un OU logique (symbole | : altgr+6)
	// Exemple : 0x0001 0010 | 0x0000 0001 = 0x0001 0011
	reg = reg | mask;
 8000e8e:	89fa      	ldrh	r2, [r7, #14]
 8000e90:	88bb      	ldrh	r3, [r7, #4]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	81fb      	strh	r3, [r7, #14]

	// Écrire le registre
	sgtl5000_i2c_write_register(reg_address, reg);
 8000e98:	89fa      	ldrh	r2, [r7, #14]
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ffb8 	bl	8000e14 <sgtl5000_i2c_write_register>

	return 0;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <sgtl5000_i2c_clear_bit>:

int sgtl5000_i2c_clear_bit(uint16_t reg_address, uint16_t mask)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	460a      	mov	r2, r1
 8000eb8:	80fb      	strh	r3, [r7, #6]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	80bb      	strh	r3, [r7, #4]
	uint16_t reg;
	// Lire le registre
	sgtl5000_i2c_read_register(reg_address, &reg);
 8000ebe:	f107 020e 	add.w	r2, r7, #14
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff78 	bl	8000dbc <sgtl5000_i2c_read_register>

	// Modifier les bits selon le masque
	// Tilde inverse tous les bits (les 0 deviennent des 1, les 1 deviennent des 0)
	// Tilde : altgr+2
	// ~(0x0001 0000) = 0x1110 1111
	reg = reg & (~mask);
 8000ecc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	89fb      	ldrh	r3, [r7, #14]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4013      	ands	r3, r2
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	81fb      	strh	r3, [r7, #14]

	// Écrire le registre
	sgtl5000_i2c_write_register(reg_address, reg);
 8000ee0:	89fa      	ldrh	r2, [r7, #14]
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff94 	bl	8000e14 <sgtl5000_i2c_write_register>

	return 0;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <MX_DMA_Init+0x48>)
 8000f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f02:	4a0f      	ldr	r2, [pc, #60]	@ (8000f40 <MX_DMA_Init+0x48>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <MX_DMA_Init+0x48>)
 8000f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2105      	movs	r1, #5
 8000f1a:	2010      	movs	r0, #16
 8000f1c:	f000 ffec 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f20:	2010      	movs	r0, #16
 8000f22:	f001 f805 	bl	8001f30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2105      	movs	r1, #5
 8000f2a:	2011      	movs	r0, #17
 8000f2c:	f000 ffe4 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000f30:	2011      	movs	r0, #17
 8000f32:	f000 fffd 	bl	8001f30 <HAL_NVIC_EnableIRQ>

}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000

08000f44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	4a06      	ldr	r2, [pc, #24]	@ (8000f74 <vApplicationGetIdleTaskMemory+0x30>)
 8000f5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2280      	movs	r2, #128	@ 0x80
 8000f60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2000016c 	.word	0x2000016c
 8000f74:	2000020c 	.word	0x2000020c

08000f78 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <MX_FREERTOS_Init+0x30>)
 8000f80:	1d3c      	adds	r4, r7, #4
 8000f82:	461d      	mov	r5, r3
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f007 fd9a 	bl	8008ace <osThreadCreate>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a03      	ldr	r2, [pc, #12]	@ (8000fac <MX_FREERTOS_Init+0x34>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa8:	0800c720 	.word	0x0800c720
 8000fac:	20000168 	.word	0x20000168

08000fb0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f007 fdd4 	bl	8008b66 <osDelay>
 8000fbe:	e7fb      	b.n	8000fb8 <StartDefaultTask+0x8>

08000fc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	4b38      	ldr	r3, [pc, #224]	@ (80010b8 <MX_GPIO_Init+0xf8>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	4a37      	ldr	r2, [pc, #220]	@ (80010b8 <MX_GPIO_Init+0xf8>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe2:	4b35      	ldr	r3, [pc, #212]	@ (80010b8 <MX_GPIO_Init+0xf8>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fee:	4b32      	ldr	r3, [pc, #200]	@ (80010b8 <MX_GPIO_Init+0xf8>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	4a31      	ldr	r2, [pc, #196]	@ (80010b8 <MX_GPIO_Init+0xf8>)
 8000ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80010b8 <MX_GPIO_Init+0xf8>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <MX_GPIO_Init+0xf8>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	4a2b      	ldr	r2, [pc, #172]	@ (80010b8 <MX_GPIO_Init+0xf8>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001012:	4b29      	ldr	r3, [pc, #164]	@ (80010b8 <MX_GPIO_Init+0xf8>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b26      	ldr	r3, [pc, #152]	@ (80010b8 <MX_GPIO_Init+0xf8>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	4a25      	ldr	r2, [pc, #148]	@ (80010b8 <MX_GPIO_Init+0xf8>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102a:	4b23      	ldr	r3, [pc, #140]	@ (80010b8 <MX_GPIO_Init+0xf8>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_RESET_GPIO_Port, VU_RESET_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	2101      	movs	r1, #1
 800103a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103e:	f001 fba5 	bl	800278c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2120      	movs	r1, #32
 8001046:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104a:	f001 fb9f 	bl	800278c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_NSS_GPIO_Port, SPI3_NSS_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	481a      	ldr	r0, [pc, #104]	@ (80010bc <MX_GPIO_Init+0xfc>)
 8001054:	f001 fb9a 	bl	800278c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001058:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800105e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4814      	ldr	r0, [pc, #80]	@ (80010c0 <MX_GPIO_Init+0x100>)
 8001070:	f001 f9e2 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VU_RESET_Pin|LD2_Pin;
 8001074:	2321      	movs	r3, #33	@ 0x21
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108e:	f001 f9d3 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_NSS_Pin;
 8001092:	2380      	movs	r3, #128	@ 0x80
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_NSS_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4804      	ldr	r0, [pc, #16]	@ (80010bc <MX_GPIO_Init+0xfc>)
 80010aa:	f001 f9c5 	bl	8002438 <HAL_GPIO_Init>

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	@ 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000400 	.word	0x48000400
 80010c0:	48000800 	.word	0x48000800

080010c4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <MX_I2C2_Init+0x74>)
 80010ca:	4a1c      	ldr	r2, [pc, #112]	@ (800113c <MX_I2C2_Init+0x78>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <MX_I2C2_Init+0x74>)
 80010d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001140 <MX_I2C2_Init+0x7c>)
 80010d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <MX_I2C2_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010da:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <MX_I2C2_Init+0x74>)
 80010dc:	2201      	movs	r2, #1
 80010de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <MX_I2C2_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010e6:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <MX_I2C2_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_I2C2_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <MX_I2C2_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <MX_I2C2_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010fe:	480e      	ldr	r0, [pc, #56]	@ (8001138 <MX_I2C2_Init+0x74>)
 8001100:	f001 fb5c 	bl	80027bc <HAL_I2C_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800110a:	f000 f973 	bl	80013f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800110e:	2100      	movs	r1, #0
 8001110:	4809      	ldr	r0, [pc, #36]	@ (8001138 <MX_I2C2_Init+0x74>)
 8001112:	f002 f8df 	bl	80032d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800111c:	f000 f96a 	bl	80013f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001120:	2100      	movs	r1, #0
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_I2C2_Init+0x74>)
 8001124:	f002 f921 	bl	800336a <HAL_I2CEx_ConfigDigitalFilter>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800112e:	f000 f961 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000040c 	.word	0x2000040c
 800113c:	40005800 	.word	0x40005800
 8001140:	10d19ce4 	.word	0x10d19ce4

08001144 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0ac      	sub	sp, #176	@ 0xb0
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2288      	movs	r2, #136	@ 0x88
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00a fb5f 	bl	800b828 <memset>
  if(i2cHandle->Instance==I2C2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a21      	ldr	r2, [pc, #132]	@ (80011f4 <HAL_I2C_MspInit+0xb0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d13b      	bne.n	80011ec <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001174:	2380      	movs	r3, #128	@ 0x80
 8001176:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001178:	2300      	movs	r3, #0
 800117a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4618      	mov	r0, r3
 8001182:	f002 ffd5 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800118c:	f000 f932 	bl	80013f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <HAL_I2C_MspInit+0xb4>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001194:	4a18      	ldr	r2, [pc, #96]	@ (80011f8 <HAL_I2C_MspInit+0xb4>)
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <HAL_I2C_MspInit+0xb4>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011a8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b0:	2312      	movs	r3, #18
 80011b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011c2:	2304      	movs	r3, #4
 80011c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011cc:	4619      	mov	r1, r3
 80011ce:	480b      	ldr	r0, [pc, #44]	@ (80011fc <HAL_I2C_MspInit+0xb8>)
 80011d0:	f001 f932 	bl	8002438 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <HAL_I2C_MspInit+0xb4>)
 80011d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d8:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <HAL_I2C_MspInit+0xb4>)
 80011da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011de:	6593      	str	r3, [r2, #88]	@ 0x58
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <HAL_I2C_MspInit+0xb4>)
 80011e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011ec:	bf00      	nop
 80011ee:	37b0      	adds	r7, #176	@ 0xb0
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40005800 	.word	0x40005800
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000400 	.word	0x48000400

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001206:	f000 fd7f 	bl	8001d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120a:	f000 f865 	bl	80012d8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800120e:	f000 f8b4 	bl	800137a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001212:	f7ff fed5 	bl	8000fc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001216:	f7ff fe6f 	bl	8000ef8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800121a:	f000 fcb7 	bl	8001b8c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800121e:	f000 fa23 	bl	8001668 <MX_SPI3_Init>
  MX_I2C2_Init();
 8001222:	f7ff ff4f 	bl	80010c4 <MX_I2C2_Init>
  MX_SAI2_Init();
 8001226:	f000 f8eb 	bl	8001400 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */
	shell_init();
 800122a:	f009 fed1 	bl	800afd0 <shell_init>
	sgtl5000_init();
 800122e:	f7ff fd4f 	bl	8000cd0 <sgtl5000_init>
	xTaskCreate(shell_run,	"Shell", TASK_STACK_DEPTH_SHELL, NULL, TASK_PRIORITY_SHELL, &h_task_shell) != pdPASS ? Error_Handler():(void)0;
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <main+0xb4>)
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2303      	movs	r3, #3
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2300      	movs	r3, #0
 800123c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001240:	491d      	ldr	r1, [pc, #116]	@ (80012b8 <main+0xb8>)
 8001242:	481e      	ldr	r0, [pc, #120]	@ (80012bc <main+0xbc>)
 8001244:	f008 f89c 	bl	8009380 <xTaskCreate>
 8001248:	4603      	mov	r3, r0
 800124a:	2b01      	cmp	r3, #1
 800124c:	d001      	beq.n	8001252 <main+0x52>
 800124e:	f000 f8d1 	bl	80013f4 <Error_Handler>
	xTaskCreate(vu_run,	"VU", TASK_STACK_DEPTH_VU, NULL, TASK_PRIORITY_VU, &h_task_vu) != pdPASS ? Error_Handler():(void)0;
 8001252:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <main+0xc0>)
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	2304      	movs	r3, #4
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2300      	movs	r3, #0
 800125c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001260:	4918      	ldr	r1, [pc, #96]	@ (80012c4 <main+0xc4>)
 8001262:	4819      	ldr	r0, [pc, #100]	@ (80012c8 <main+0xc8>)
 8001264:	f008 f88c 	bl	8009380 <xTaskCreate>
 8001268:	4603      	mov	r3, r0
 800126a:	2b01      	cmp	r3, #1
 800126c:	d001      	beq.n	8001272 <main+0x72>
 800126e:	f000 f8c1 	bl	80013f4 <Error_Handler>
        data_SAI_rx[i] = (uint16_t)((float)(SIZE_SAI_BUFFER - i) / (SIZE_SAI_BUFFER / 2) * UINT16_MAX);
    }
	__HAL_SAI_ENABLE(&hsai_BlockA2);
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)data_SAI_rx, SIZE_SAI_BUFFER);
	#elif MODE == SWITCHER
		__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001272:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <main+0xcc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <main+0xcc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001280:	601a      	str	r2, [r3, #0]
		__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <main+0xd0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <main+0xd0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001290:	601a      	str	r2, [r3, #0]
		HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)data_SAI_rx, SIZE_SAI_BUFFER);
 8001292:	2214      	movs	r2, #20
 8001294:	490f      	ldr	r1, [pc, #60]	@ (80012d4 <main+0xd4>)
 8001296:	480d      	ldr	r0, [pc, #52]	@ (80012cc <main+0xcc>)
 8001298:	f004 fcb8 	bl	8005c0c <HAL_SAI_Receive_DMA>
		HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)data_SAI_rx, SIZE_SAI_BUFFER);
 800129c:	2214      	movs	r2, #20
 800129e:	490d      	ldr	r1, [pc, #52]	@ (80012d4 <main+0xd4>)
 80012a0:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <main+0xd0>)
 80012a2:	f004 fc03 	bl	8005aac <HAL_SAI_Transmit_DMA>
	#endif
#endif
	/* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80012a6:	f7ff fe67 	bl	8000f78 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012aa:	f007 fc09 	bl	8008ac0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80012ae:	bf00      	nop
 80012b0:	e7fd      	b.n	80012ae <main+0xae>
 80012b2:	bf00      	nop
 80012b4:	20000488 	.word	0x20000488
 80012b8:	0800c73c 	.word	0x0800c73c
 80012bc:	0800b065 	.word	0x0800b065
 80012c0:	2000048c 	.word	0x2000048c
 80012c4:	0800c744 	.word	0x0800c744
 80012c8:	0800ace9 	.word	0x0800ace9
 80012cc:	20000514 	.word	0x20000514
 80012d0:	20000490 	.word	0x20000490
 80012d4:	20000460 	.word	0x20000460

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b096      	sub	sp, #88	@ 0x58
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	2244      	movs	r2, #68	@ 0x44
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f00a fa9e 	bl	800b828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012fe:	f002 f88f 	bl	8003420 <HAL_PWREx_ControlVoltageScaling>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001308:	f000 f874 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130c:	2302      	movs	r3, #2
 800130e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001314:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001316:	2310      	movs	r3, #16
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131a:	2302      	movs	r3, #2
 800131c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800131e:	2302      	movs	r3, #2
 8001320:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001322:	2301      	movs	r3, #1
 8001324:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001326:	230a      	movs	r3, #10
 8001328:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800132a:	2307      	movs	r3, #7
 800132c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800132e:	2302      	movs	r3, #2
 8001330:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001332:	2302      	movs	r3, #2
 8001334:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4618      	mov	r0, r3
 800133c:	f002 f8c6 	bl	80034cc <HAL_RCC_OscConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001346:	f000 f855 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134a:	230f      	movs	r3, #15
 800134c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134e:	2303      	movs	r3, #3
 8001350:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800135e:	463b      	mov	r3, r7
 8001360:	2104      	movs	r1, #4
 8001362:	4618      	mov	r0, r3
 8001364:	f002 fc8e 	bl	8003c84 <HAL_RCC_ClockConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800136e:	f000 f841 	bl	80013f4 <Error_Handler>
  }
}
 8001372:	bf00      	nop
 8001374:	3758      	adds	r7, #88	@ 0x58
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b0a2      	sub	sp, #136	@ 0x88
 800137e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001380:	463b      	mov	r3, r7
 8001382:	2288      	movs	r2, #136	@ 0x88
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f00a fa4e 	bl	800b828 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800138c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001390:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8001392:	2300      	movs	r3, #0
 8001394:	66bb      	str	r3, [r7, #104]	@ 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001396:	2302      	movs	r3, #2
 8001398:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800139a:	2301      	movs	r3, #1
 800139c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 800139e:	230d      	movs	r3, #13
 80013a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80013a2:	2311      	movs	r3, #17
 80013a4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013a6:	2302      	movs	r3, #2
 80013a8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80013ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 feba 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 80013c2:	f000 f817 	bl	80013f4 <Error_Handler>
  }
}
 80013c6:	bf00      	nop
 80013c8:	3788      	adds	r7, #136	@ 0x88
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013e2:	f000 fcb1 	bl	8001d48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40014400 	.word	0x40014400

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <Error_Handler+0x8>

08001400 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001404:	4b2a      	ldr	r3, [pc, #168]	@ (80014b0 <MX_SAI2_Init+0xb0>)
 8001406:	4a2b      	ldr	r2, [pc, #172]	@ (80014b4 <MX_SAI2_Init+0xb4>)
 8001408:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800140a:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <MX_SAI2_Init+0xb0>)
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001410:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <MX_SAI2_Init+0xb0>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001416:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <MX_SAI2_Init+0xb0>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800141c:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <MX_SAI2_Init+0xb0>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001422:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <MX_SAI2_Init+0xb0>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001428:	4b21      	ldr	r3, [pc, #132]	@ (80014b0 <MX_SAI2_Init+0xb0>)
 800142a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800142e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001430:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <MX_SAI2_Init+0xb0>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001436:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <MX_SAI2_Init+0xb0>)
 8001438:	2200      	movs	r2, #0
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800143c:	4b1c      	ldr	r3, [pc, #112]	@ (80014b0 <MX_SAI2_Init+0xb0>)
 800143e:	2200      	movs	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001442:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <MX_SAI2_Init+0xb0>)
 8001444:	2200      	movs	r2, #0
 8001446:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001448:	2302      	movs	r3, #2
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	4818      	ldr	r0, [pc, #96]	@ (80014b0 <MX_SAI2_Init+0xb0>)
 8001450:	f004 f988 	bl	8005764 <HAL_SAI_InitProtocol>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 800145a:	f7ff ffcb 	bl	80013f4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <MX_SAI2_Init+0xb8>)
 8001460:	4a16      	ldr	r2, [pc, #88]	@ (80014bc <MX_SAI2_Init+0xbc>)
 8001462:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <MX_SAI2_Init+0xb8>)
 8001466:	2203      	movs	r2, #3
 8001468:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <MX_SAI2_Init+0xb8>)
 800146c:	2201      	movs	r2, #1
 800146e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_SAI2_Init+0xb8>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <MX_SAI2_Init+0xb8>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_SAI2_Init+0xb8>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001482:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <MX_SAI2_Init+0xb8>)
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MX_SAI2_Init+0xb8>)
 800148a:	2200      	movs	r2, #0
 800148c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <MX_SAI2_Init+0xb8>)
 8001490:	2200      	movs	r2, #0
 8001492:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001494:	2302      	movs	r3, #2
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	4807      	ldr	r0, [pc, #28]	@ (80014b8 <MX_SAI2_Init+0xb8>)
 800149c:	f004 f962 	bl	8005764 <HAL_SAI_InitProtocol>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 80014a6:	f7ff ffa5 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000490 	.word	0x20000490
 80014b4:	40015804 	.word	0x40015804
 80014b8:	20000514 	.word	0x20000514
 80014bc:	40015824 	.word	0x40015824

080014c0 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a5c      	ldr	r2, [pc, #368]	@ (8001640 <HAL_SAI_MspInit+0x180>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d156      	bne.n	8001580 <HAL_SAI_MspInit+0xc0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 80014d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001644 <HAL_SAI_MspInit+0x184>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10b      	bne.n	80014f2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80014da:	4b5b      	ldr	r3, [pc, #364]	@ (8001648 <HAL_SAI_MspInit+0x188>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014de:	4a5a      	ldr	r2, [pc, #360]	@ (8001648 <HAL_SAI_MspInit+0x188>)
 80014e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014e6:	4b58      	ldr	r3, [pc, #352]	@ (8001648 <HAL_SAI_MspInit+0x188>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80014f2:	4b54      	ldr	r3, [pc, #336]	@ (8001644 <HAL_SAI_MspInit+0x184>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4a52      	ldr	r2, [pc, #328]	@ (8001644 <HAL_SAI_MspInit+0x184>)
 80014fa:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014fc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800150e:	230d      	movs	r3, #13
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	484c      	ldr	r0, [pc, #304]	@ (800164c <HAL_SAI_MspInit+0x18c>)
 800151a:	f000 ff8d 	bl	8002438 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 800151e:	4b4c      	ldr	r3, [pc, #304]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 8001520:	4a4c      	ldr	r2, [pc, #304]	@ (8001654 <HAL_SAI_MspInit+0x194>)
 8001522:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8001524:	4b4a      	ldr	r3, [pc, #296]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 8001526:	2201      	movs	r2, #1
 8001528:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800152a:	4b49      	ldr	r3, [pc, #292]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 800152c:	2210      	movs	r2, #16
 800152e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001530:	4b47      	ldr	r3, [pc, #284]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8001536:	4b46      	ldr	r3, [pc, #280]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800153c:	4b44      	ldr	r3, [pc, #272]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 800153e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001542:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001544:	4b42      	ldr	r3, [pc, #264]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 8001546:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800154a:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800154c:	4b40      	ldr	r3, [pc, #256]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 800154e:	2220      	movs	r2, #32
 8001550:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8001552:	4b3f      	ldr	r3, [pc, #252]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8001558:	483d      	ldr	r0, [pc, #244]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 800155a:	f000 fcf7 	bl	8001f4c <HAL_DMA_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_SAI_MspInit+0xa8>
    {
      Error_Handler();
 8001564:	f7ff ff46 	bl	80013f4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a39      	ldr	r2, [pc, #228]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 800156c:	671a      	str	r2, [r3, #112]	@ 0x70
 800156e:	4a38      	ldr	r2, [pc, #224]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a36      	ldr	r2, [pc, #216]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 8001578:	66da      	str	r2, [r3, #108]	@ 0x6c
 800157a:	4a35      	ldr	r2, [pc, #212]	@ (8001650 <HAL_SAI_MspInit+0x190>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a34      	ldr	r2, [pc, #208]	@ (8001658 <HAL_SAI_MspInit+0x198>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d156      	bne.n	8001638 <HAL_SAI_MspInit+0x178>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 800158a:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <HAL_SAI_MspInit+0x184>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10b      	bne.n	80015aa <HAL_SAI_MspInit+0xea>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001592:	4b2d      	ldr	r3, [pc, #180]	@ (8001648 <HAL_SAI_MspInit+0x188>)
 8001594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001596:	4a2c      	ldr	r2, [pc, #176]	@ (8001648 <HAL_SAI_MspInit+0x188>)
 8001598:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800159c:	6613      	str	r3, [r2, #96]	@ 0x60
 800159e:	4b2a      	ldr	r3, [pc, #168]	@ (8001648 <HAL_SAI_MspInit+0x188>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80015aa:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <HAL_SAI_MspInit+0x184>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	4a24      	ldr	r2, [pc, #144]	@ (8001644 <HAL_SAI_MspInit+0x184>)
 80015b2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80015c6:	230d      	movs	r3, #13
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	4822      	ldr	r0, [pc, #136]	@ (800165c <HAL_SAI_MspInit+0x19c>)
 80015d2:	f000 ff31 	bl	8002438 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 80015d6:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 80015d8:	4a22      	ldr	r2, [pc, #136]	@ (8001664 <HAL_SAI_MspInit+0x1a4>)
 80015da:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 80015dc:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 80015de:	2201      	movs	r2, #1
 80015e0:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 80015f0:	2280      	movs	r2, #128	@ 0x80
 80015f2:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 80015f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015fa:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015fc:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 80015fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001602:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001604:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 8001606:	2220      	movs	r2, #32
 8001608:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001610:	4813      	ldr	r0, [pc, #76]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 8001612:	f000 fc9b 	bl	8001f4c <HAL_DMA_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_SAI_MspInit+0x160>
    {
      Error_Handler();
 800161c:	f7ff feea 	bl	80013f4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 8001624:	671a      	str	r2, [r3, #112]	@ 0x70
 8001626:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 8001630:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001632:	4a0b      	ldr	r2, [pc, #44]	@ (8001660 <HAL_SAI_MspInit+0x1a0>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	@ 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40015804 	.word	0x40015804
 8001644:	20000628 	.word	0x20000628
 8001648:	40021000 	.word	0x40021000
 800164c:	48000400 	.word	0x48000400
 8001650:	20000598 	.word	0x20000598
 8001654:	4002006c 	.word	0x4002006c
 8001658:	40015824 	.word	0x40015824
 800165c:	48000800 	.word	0x48000800
 8001660:	200005e0 	.word	0x200005e0
 8001664:	40020080 	.word	0x40020080

08001668 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800166c:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <MX_SPI3_Init+0x74>)
 800166e:	4a1c      	ldr	r2, [pc, #112]	@ (80016e0 <MX_SPI3_Init+0x78>)
 8001670:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001672:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <MX_SPI3_Init+0x74>)
 8001674:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001678:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800167a:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <MX_SPI3_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001680:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <MX_SPI3_Init+0x74>)
 8001682:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001686:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <MX_SPI3_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800168e:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <MX_SPI3_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_SPI3_Init+0x74>)
 8001696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800169a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <MX_SPI3_Init+0x74>)
 800169e:	2238      	movs	r2, #56	@ 0x38
 80016a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_SPI3_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_SPI3_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <MX_SPI3_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_SPI3_Init+0x74>)
 80016b6:	2207      	movs	r2, #7
 80016b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <MX_SPI3_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_SPI3_Init+0x74>)
 80016c2:	2208      	movs	r2, #8
 80016c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_SPI3_Init+0x74>)
 80016c8:	f004 fda9 	bl	800621e <HAL_SPI_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80016d2:	f7ff fe8f 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000062c 	.word	0x2000062c
 80016e0:	40003c00 	.word	0x40003c00

080016e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a25      	ldr	r2, [pc, #148]	@ (8001798 <HAL_SPI_MspInit+0xb4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d144      	bne.n	8001790 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001706:	4b25      	ldr	r3, [pc, #148]	@ (800179c <HAL_SPI_MspInit+0xb8>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170a:	4a24      	ldr	r2, [pc, #144]	@ (800179c <HAL_SPI_MspInit+0xb8>)
 800170c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001710:	6593      	str	r3, [r2, #88]	@ 0x58
 8001712:	4b22      	ldr	r3, [pc, #136]	@ (800179c <HAL_SPI_MspInit+0xb8>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <HAL_SPI_MspInit+0xb8>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	4a1e      	ldr	r2, [pc, #120]	@ (800179c <HAL_SPI_MspInit+0xb8>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <HAL_SPI_MspInit+0xb8>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <HAL_SPI_MspInit+0xb8>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	4a18      	ldr	r2, [pc, #96]	@ (800179c <HAL_SPI_MspInit+0xb8>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <HAL_SPI_MspInit+0xb8>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800174e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001760:	2306      	movs	r3, #6
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <HAL_SPI_MspInit+0xbc>)
 800176c:	f000 fe64 	bl	8002438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001770:	2320      	movs	r3, #32
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001780:	2306      	movs	r3, #6
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <HAL_SPI_MspInit+0xc0>)
 800178c:	f000 fe54 	bl	8002438 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	@ 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40003c00 	.word	0x40003c00
 800179c:	40021000 	.word	0x40021000
 80017a0:	48000800 	.word	0x48000800
 80017a4:	48000400 	.word	0x48000400

080017a8 <__io_putchar>:
/* USER CODE END Macro */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80017b0:	1d39      	adds	r1, r7, #4
 80017b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017b6:	2201      	movs	r2, #1
 80017b8:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <__io_putchar+0x20>)
 80017ba:	f005 fdcd 	bl	8007358 <HAL_UART_Transmit>
	return ch;
 80017be:	687b      	ldr	r3, [r7, #4]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000750 	.word	0x20000750

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <HAL_MspInit+0x4c>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d6:	4a10      	ldr	r2, [pc, #64]	@ (8001818 <HAL_MspInit+0x4c>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <HAL_MspInit+0x4c>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_MspInit+0x4c>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <HAL_MspInit+0x4c>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <HAL_MspInit+0x4c>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	210f      	movs	r1, #15
 8001806:	f06f 0001 	mvn.w	r0, #1
 800180a:	f000 fb75 	bl	8001ef8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000

0800181c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	@ 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800182a:	4b31      	ldr	r3, [pc, #196]	@ (80018f0 <HAL_InitTick+0xd4>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182e:	4a30      	ldr	r2, [pc, #192]	@ (80018f0 <HAL_InitTick+0xd4>)
 8001830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001834:	6613      	str	r3, [r2, #96]	@ 0x60
 8001836:	4b2e      	ldr	r3, [pc, #184]	@ (80018f0 <HAL_InitTick+0xd4>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001842:	f107 020c 	add.w	r2, r7, #12
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fbdd 	bl	800400c <HAL_RCC_GetClockConfig>
  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001852:	f002 fbc5 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8001856:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185a:	4a26      	ldr	r2, [pc, #152]	@ (80018f4 <HAL_InitTick+0xd8>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	0c9b      	lsrs	r3, r3, #18
 8001862:	3b01      	subs	r3, #1
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001866:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <HAL_InitTick+0xdc>)
 8001868:	4a24      	ldr	r2, [pc, #144]	@ (80018fc <HAL_InitTick+0xe0>)
 800186a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800186c:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <HAL_InitTick+0xdc>)
 800186e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001872:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001874:	4a20      	ldr	r2, [pc, #128]	@ (80018f8 <HAL_InitTick+0xdc>)
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800187a:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <HAL_InitTick+0xdc>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <HAL_InitTick+0xdc>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <HAL_InitTick+0xdc>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 800188c:	481a      	ldr	r0, [pc, #104]	@ (80018f8 <HAL_InitTick+0xdc>)
 800188e:	f005 f843 	bl	8006918 <HAL_TIM_Base_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001898:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800189c:	2b00      	cmp	r3, #0
 800189e:	d11b      	bne.n	80018d8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 80018a0:	4815      	ldr	r0, [pc, #84]	@ (80018f8 <HAL_InitTick+0xdc>)
 80018a2:	f005 f8a7 	bl	80069f4 <HAL_TIM_Base_Start_IT>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80018ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d111      	bne.n	80018d8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018b4:	2019      	movs	r0, #25
 80018b6:	f000 fb3b 	bl	8001f30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	d808      	bhi.n	80018d2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80018c0:	2200      	movs	r2, #0
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	2019      	movs	r0, #25
 80018c6:	f000 fb17 	bl	8001ef8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <HAL_InitTick+0xe4>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	e002      	b.n	80018d8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 80018d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <HAL_InitTick+0xe8>)
 80018da:	210e      	movs	r1, #14
 80018dc:	4806      	ldr	r0, [pc, #24]	@ (80018f8 <HAL_InitTick+0xdc>)
 80018de:	f005 fa7d 	bl	8006ddc <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 80018e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3730      	adds	r7, #48	@ 0x30
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	431bde83 	.word	0x431bde83
 80018f8:	20000690 	.word	0x20000690
 80018fc:	40014400 	.word	0x40014400
 8001900:	20000004 	.word	0x20000004
 8001904:	08001909 	.word	0x08001909

08001908 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8001910:	f000 fa1a 	bl	8001d48 <HAL_IncTick>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <NMI_Handler+0x4>

08001924 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <MemManage_Handler+0x4>

08001934 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <UsageFault_Handler+0x4>

08001944 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
	xTaskNotifyFromISR(h_task_vu,
 800195e:	4b0d      	ldr	r3, [pc, #52]	@ (8001994 <DMA1_Channel6_IRQHandler+0x40>)
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2300      	movs	r3, #0
 8001968:	2201      	movs	r2, #1
 800196a:	2101      	movs	r1, #1
 800196c:	f008 fc32 	bl	800a1d4 <xTaskGenericNotifyFromISR>
			1,
			eSetBits,
			&pxHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <DMA1_Channel6_IRQHandler+0x32>
 8001976:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <DMA1_Channel6_IRQHandler+0x44>)
 8001978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f3bf 8f4f 	dsb	sy
 8001982:	f3bf 8f6f 	isb	sy

	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001986:	4805      	ldr	r0, [pc, #20]	@ (800199c <DMA1_Channel6_IRQHandler+0x48>)
 8001988:	f000 fc77 	bl	800227a <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000048c 	.word	0x2000048c
 8001998:	e000ed04 	.word	0xe000ed04
 800199c:	20000598 	.word	0x20000598

080019a0 <DMA1_Channel7_IRQHandler>:

/**
 * @brief This function handles DMA1 channel7 global interrupt.
 */
void DMA1_Channel7_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

	/* USER CODE END DMA1_Channel7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_sai2_b);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <DMA1_Channel7_IRQHandler+0x10>)
 80019a6:	f000 fc68 	bl	800227a <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

	/* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200005e0 	.word	0x200005e0

080019b4 <TIM1_UP_TIM16_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
 */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

	/* USER CODE END TIM1_UP_TIM16_IRQn 0 */
	HAL_TIM_IRQHandler(&htim16);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80019ba:	f005 f88b 	bl	8006ad4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

	/* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000690 	.word	0x20000690

080019c8 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <USART2_IRQHandler+0x10>)
 80019ce:	f005 fd99 	bl	8007504 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000750 	.word	0x20000750

080019dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return 1;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_kill>:

int _kill(int pid, int sig)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019f6:	f009 ff75 	bl	800b8e4 <__errno>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2216      	movs	r2, #22
 80019fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_exit>:

void _exit (int status)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ffe7 	bl	80019ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a1e:	bf00      	nop
 8001a20:	e7fd      	b.n	8001a1e <_exit+0x12>

08001a22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e00a      	b.n	8001a4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a34:	f3af 8000 	nop.w
 8001a38:	4601      	mov	r1, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	60ba      	str	r2, [r7, #8]
 8001a40:	b2ca      	uxtb	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf0      	blt.n	8001a34 <_read+0x12>
  }

  return len;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e009      	b.n	8001a82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	60ba      	str	r2, [r7, #8]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fe96 	bl	80017a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dbf1      	blt.n	8001a6e <_write+0x12>
  }
  return len;
 8001a8a:	687b      	ldr	r3, [r7, #4]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_close>:

int _close(int file)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001abc:	605a      	str	r2, [r3, #4]
  return 0;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_isatty>:

int _isatty(int file)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b085      	sub	sp, #20
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	@ (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f009 feda 	bl	800b8e4 <__errno>
 8001b30:	4603      	mov	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <_sbrk+0x64>)
 8001b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20018000 	.word	0x20018000
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	2000074c 	.word	0x2000074c
 8001b64:	20005958 	.word	0x20005958

08001b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	@ (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001b92:	4a15      	ldr	r2, [pc, #84]	@ (8001be8 <MX_USART2_UART_Init+0x5c>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bd0:	f005 fb74 	bl	80072bc <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bda:	f7ff fc0b 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000750 	.word	0x20000750
 8001be8:	40004400 	.word	0x40004400

08001bec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0ac      	sub	sp, #176	@ 0xb0
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2288      	movs	r2, #136	@ 0x88
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f009 fe0b 	bl	800b828 <memset>
  if(uartHandle->Instance==USART2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a25      	ldr	r2, [pc, #148]	@ (8001cac <HAL_UART_MspInit+0xc0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d143      	bne.n	8001ca4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f002 fa81 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c34:	f7ff fbde 	bl	80013f4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c38:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c44:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c54:	4a16      	ldr	r2, [pc, #88]	@ (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c5c:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <HAL_UART_MspInit+0xc4>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c68:	230c      	movs	r3, #12
 8001c6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c80:	2307      	movs	r3, #7
 8001c82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c90:	f000 fbd2 	bl	8002438 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2105      	movs	r1, #5
 8001c98:	2026      	movs	r0, #38	@ 0x26
 8001c9a:	f000 f92d 	bl	8001ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c9e:	2026      	movs	r0, #38	@ 0x26
 8001ca0:	f000 f946 	bl	8001f30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	37b0      	adds	r7, #176	@ 0xb0
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40004400 	.word	0x40004400
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb8:	f7ff ff56 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cbc:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cbe:	490d      	ldr	r1, [pc, #52]	@ (8001cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf8 <LoopForever+0xe>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001d00 <LoopForever+0x16>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f009 fe05 	bl	800b8f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ce6:	f7ff fa8b 	bl	8001200 <main>

08001cea <LoopForever>:

LoopForever:
    b LoopForever
 8001cea:	e7fe      	b.n	8001cea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf4:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001cf8:	0800cb98 	.word	0x0800cb98
  ldr r2, =_sbss
 8001cfc:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001d00:	20005958 	.word	0x20005958

08001d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC1_2_IRQHandler>
	...

08001d08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d12:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <HAL_Init+0x3c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a0b      	ldr	r2, [pc, #44]	@ (8001d44 <HAL_Init+0x3c>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d1e:	2003      	movs	r0, #3
 8001d20:	f000 f8df 	bl	8001ee2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d24:	200f      	movs	r0, #15
 8001d26:	f7ff fd79 	bl	800181c <HAL_InitTick>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	e001      	b.n	8001d3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d36:	f7ff fd49 	bl	80017cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	200007d8 	.word	0x200007d8

08001d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b03      	ldr	r3, [pc, #12]	@ (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	200007d8 	.word	0x200007d8

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4907      	ldr	r1, [pc, #28]	@ (8001e24 <__NVIC_EnableIRQ+0x38>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100

08001e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0a      	blt.n	8001e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	490c      	ldr	r1, [pc, #48]	@ (8001e74 <__NVIC_SetPriority+0x4c>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e50:	e00a      	b.n	8001e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4908      	ldr	r1, [pc, #32]	@ (8001e78 <__NVIC_SetPriority+0x50>)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	3b04      	subs	r3, #4
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	761a      	strb	r2, [r3, #24]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000e100 	.word	0xe000e100
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	@ 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	bf28      	it	cs
 8001e9a:	2304      	movcs	r3, #4
 8001e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d902      	bls.n	8001eac <NVIC_EncodePriority+0x30>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b03      	subs	r3, #3
 8001eaa:	e000      	b.n	8001eae <NVIC_EncodePriority+0x32>
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43d9      	mvns	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	4313      	orrs	r3, r2
         );
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	@ 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ff4c 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0a:	f7ff ff61 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	68b9      	ldr	r1, [r7, #8]
 8001f14:	6978      	ldr	r0, [r7, #20]
 8001f16:	f7ff ffb1 	bl	8001e7c <NVIC_EncodePriority>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff80 	bl	8001e28 <__NVIC_SetPriority>
}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff54 	bl	8001dec <__NVIC_EnableIRQ>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e098      	b.n	8002090 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b4d      	ldr	r3, [pc, #308]	@ (800209c <HAL_DMA_Init+0x150>)
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d80f      	bhi.n	8001f8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b4b      	ldr	r3, [pc, #300]	@ (80020a0 <HAL_DMA_Init+0x154>)
 8001f72:	4413      	add	r3, r2
 8001f74:	4a4b      	ldr	r2, [pc, #300]	@ (80020a4 <HAL_DMA_Init+0x158>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	009a      	lsls	r2, r3, #2
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a48      	ldr	r2, [pc, #288]	@ (80020a8 <HAL_DMA_Init+0x15c>)
 8001f86:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f88:	e00e      	b.n	8001fa8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b46      	ldr	r3, [pc, #280]	@ (80020ac <HAL_DMA_Init+0x160>)
 8001f92:	4413      	add	r3, r2
 8001f94:	4a43      	ldr	r2, [pc, #268]	@ (80020a4 <HAL_DMA_Init+0x158>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	009a      	lsls	r2, r3, #2
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a42      	ldr	r2, [pc, #264]	@ (80020b0 <HAL_DMA_Init+0x164>)
 8001fa6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002002:	d039      	beq.n	8002078 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	4a27      	ldr	r2, [pc, #156]	@ (80020a8 <HAL_DMA_Init+0x15c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d11a      	bne.n	8002044 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800200e:	4b29      	ldr	r3, [pc, #164]	@ (80020b4 <HAL_DMA_Init+0x168>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002016:	f003 031c 	and.w	r3, r3, #28
 800201a:	210f      	movs	r1, #15
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	4924      	ldr	r1, [pc, #144]	@ (80020b4 <HAL_DMA_Init+0x168>)
 8002024:	4013      	ands	r3, r2
 8002026:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002028:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <HAL_DMA_Init+0x168>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002034:	f003 031c 	and.w	r3, r3, #28
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	491d      	ldr	r1, [pc, #116]	@ (80020b4 <HAL_DMA_Init+0x168>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
 8002042:	e019      	b.n	8002078 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002044:	4b1c      	ldr	r3, [pc, #112]	@ (80020b8 <HAL_DMA_Init+0x16c>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	f003 031c 	and.w	r3, r3, #28
 8002050:	210f      	movs	r1, #15
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	4917      	ldr	r1, [pc, #92]	@ (80020b8 <HAL_DMA_Init+0x16c>)
 800205a:	4013      	ands	r3, r2
 800205c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800205e:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <HAL_DMA_Init+0x16c>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6859      	ldr	r1, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	f003 031c 	and.w	r3, r3, #28
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	4911      	ldr	r1, [pc, #68]	@ (80020b8 <HAL_DMA_Init+0x16c>)
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40020407 	.word	0x40020407
 80020a0:	bffdfff8 	.word	0xbffdfff8
 80020a4:	cccccccd 	.word	0xcccccccd
 80020a8:	40020000 	.word	0x40020000
 80020ac:	bffdfbf8 	.word	0xbffdfbf8
 80020b0:	40020400 	.word	0x40020400
 80020b4:	400200a8 	.word	0x400200a8
 80020b8:	400204a8 	.word	0x400204a8

080020bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_DMA_Start_IT+0x20>
 80020d8:	2302      	movs	r3, #2
 80020da:	e04b      	b.n	8002174 <HAL_DMA_Start_IT+0xb8>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d13a      	bne.n	8002166 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f95f 	bl	80023d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 020e 	orr.w	r2, r2, #14
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e00f      	b.n	8002154 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0204 	bic.w	r2, r2, #4
 8002142:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 020a 	orr.w	r2, r2, #10
 8002152:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	e005      	b.n	8002172 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800216e:	2302      	movs	r3, #2
 8002170:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002172:	7dfb      	ldrb	r3, [r7, #23]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d008      	beq.n	80021a6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2204      	movs	r2, #4
 8002198:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e022      	b.n	80021ec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 020e 	bic.w	r2, r2, #14
 80021b4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	f003 021c 	and.w	r2, r3, #28
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	2101      	movs	r1, #1
 80021d4:	fa01 f202 	lsl.w	r2, r1, r2
 80021d8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d005      	beq.n	800221c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2204      	movs	r2, #4
 8002214:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	e029      	b.n	8002270 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 020e 	bic.w	r2, r2, #14
 800222a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002240:	f003 021c 	and.w	r2, r3, #28
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002248:	2101      	movs	r1, #1
 800224a:	fa01 f202 	lsl.w	r2, r1, r2
 800224e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
    }
  }
  return status;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002296:	f003 031c 	and.w	r3, r3, #28
 800229a:	2204      	movs	r2, #4
 800229c:	409a      	lsls	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d026      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x7a>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d021      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d107      	bne.n	80022ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0204 	bic.w	r2, r2, #4
 80022cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d2:	f003 021c 	and.w	r2, r3, #28
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	2104      	movs	r1, #4
 80022dc:	fa01 f202 	lsl.w	r2, r1, r2
 80022e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d071      	beq.n	80023ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80022f2:	e06c      	b.n	80023ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f8:	f003 031c 	and.w	r3, r3, #28
 80022fc:	2202      	movs	r2, #2
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d02e      	beq.n	8002366 <HAL_DMA_IRQHandler+0xec>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d029      	beq.n	8002366 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10b      	bne.n	8002338 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 020a 	bic.w	r2, r2, #10
 800232e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233c:	f003 021c 	and.w	r2, r3, #28
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	2102      	movs	r1, #2
 8002346:	fa01 f202 	lsl.w	r2, r1, r2
 800234a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	2b00      	cmp	r3, #0
 800235a:	d038      	beq.n	80023ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002364:	e033      	b.n	80023ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	f003 031c 	and.w	r3, r3, #28
 800236e:	2208      	movs	r2, #8
 8002370:	409a      	lsls	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d02a      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x156>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d025      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 020e 	bic.w	r2, r2, #14
 8002392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002398:	f003 021c 	and.w	r2, r3, #28
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f202 	lsl.w	r2, r1, r2
 80023a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023ce:	bf00      	nop
 80023d0:	bf00      	nop
}
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	f003 021c 	and.w	r2, r3, #28
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	2101      	movs	r1, #1
 80023f4:	fa01 f202 	lsl.w	r2, r1, r2
 80023f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b10      	cmp	r3, #16
 8002408:	d108      	bne.n	800241c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800241a:	e007      	b.n	800242c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	60da      	str	r2, [r3, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002446:	e17f      	b.n	8002748 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2101      	movs	r1, #1
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8171 	beq.w	8002742 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d005      	beq.n	8002478 <HAL_GPIO_Init+0x40>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d130      	bne.n	80024da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ae:	2201      	movs	r2, #1
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	f003 0201 	and.w	r2, r3, #1
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d118      	bne.n	8002518 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024ec:	2201      	movs	r2, #1
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	08db      	lsrs	r3, r3, #3
 8002502:	f003 0201 	and.w	r2, r3, #1
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b03      	cmp	r3, #3
 8002522:	d017      	beq.n	8002554 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d123      	bne.n	80025a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	08da      	lsrs	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3208      	adds	r2, #8
 8002568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	220f      	movs	r2, #15
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	08da      	lsrs	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3208      	adds	r2, #8
 80025a2:	6939      	ldr	r1, [r7, #16]
 80025a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0203 	and.w	r2, r3, #3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80ac 	beq.w	8002742 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002768 <HAL_GPIO_Init+0x330>)
 80025ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002768 <HAL_GPIO_Init+0x330>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80025f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002768 <HAL_GPIO_Init+0x330>)
 80025f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002602:	4a5a      	ldr	r2, [pc, #360]	@ (800276c <HAL_GPIO_Init+0x334>)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	220f      	movs	r2, #15
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800262c:	d025      	beq.n	800267a <HAL_GPIO_Init+0x242>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4f      	ldr	r2, [pc, #316]	@ (8002770 <HAL_GPIO_Init+0x338>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01f      	beq.n	8002676 <HAL_GPIO_Init+0x23e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4e      	ldr	r2, [pc, #312]	@ (8002774 <HAL_GPIO_Init+0x33c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d019      	beq.n	8002672 <HAL_GPIO_Init+0x23a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4d      	ldr	r2, [pc, #308]	@ (8002778 <HAL_GPIO_Init+0x340>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_GPIO_Init+0x236>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4c      	ldr	r2, [pc, #304]	@ (800277c <HAL_GPIO_Init+0x344>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00d      	beq.n	800266a <HAL_GPIO_Init+0x232>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4b      	ldr	r2, [pc, #300]	@ (8002780 <HAL_GPIO_Init+0x348>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d007      	beq.n	8002666 <HAL_GPIO_Init+0x22e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4a      	ldr	r2, [pc, #296]	@ (8002784 <HAL_GPIO_Init+0x34c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_GPIO_Init+0x22a>
 800265e:	2306      	movs	r3, #6
 8002660:	e00c      	b.n	800267c <HAL_GPIO_Init+0x244>
 8002662:	2307      	movs	r3, #7
 8002664:	e00a      	b.n	800267c <HAL_GPIO_Init+0x244>
 8002666:	2305      	movs	r3, #5
 8002668:	e008      	b.n	800267c <HAL_GPIO_Init+0x244>
 800266a:	2304      	movs	r3, #4
 800266c:	e006      	b.n	800267c <HAL_GPIO_Init+0x244>
 800266e:	2303      	movs	r3, #3
 8002670:	e004      	b.n	800267c <HAL_GPIO_Init+0x244>
 8002672:	2302      	movs	r3, #2
 8002674:	e002      	b.n	800267c <HAL_GPIO_Init+0x244>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_GPIO_Init+0x244>
 800267a:	2300      	movs	r3, #0
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	f002 0203 	and.w	r2, r2, #3
 8002682:	0092      	lsls	r2, r2, #2
 8002684:	4093      	lsls	r3, r2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800268c:	4937      	ldr	r1, [pc, #220]	@ (800276c <HAL_GPIO_Init+0x334>)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	089b      	lsrs	r3, r3, #2
 8002692:	3302      	adds	r3, #2
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800269a:	4b3b      	ldr	r3, [pc, #236]	@ (8002788 <HAL_GPIO_Init+0x350>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026be:	4a32      	ldr	r2, [pc, #200]	@ (8002788 <HAL_GPIO_Init+0x350>)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026c4:	4b30      	ldr	r3, [pc, #192]	@ (8002788 <HAL_GPIO_Init+0x350>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026e8:	4a27      	ldr	r2, [pc, #156]	@ (8002788 <HAL_GPIO_Init+0x350>)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026ee:	4b26      	ldr	r3, [pc, #152]	@ (8002788 <HAL_GPIO_Init+0x350>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002712:	4a1d      	ldr	r2, [pc, #116]	@ (8002788 <HAL_GPIO_Init+0x350>)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002718:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <HAL_GPIO_Init+0x350>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800273c:	4a12      	ldr	r2, [pc, #72]	@ (8002788 <HAL_GPIO_Init+0x350>)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	3301      	adds	r3, #1
 8002746:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	f47f ae78 	bne.w	8002448 <HAL_GPIO_Init+0x10>
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000
 800276c:	40010000 	.word	0x40010000
 8002770:	48000400 	.word	0x48000400
 8002774:	48000800 	.word	0x48000800
 8002778:	48000c00 	.word	0x48000c00
 800277c:	48001000 	.word	0x48001000
 8002780:	48001400 	.word	0x48001400
 8002784:	48001800 	.word	0x48001800
 8002788:	40010400 	.word	0x40010400

0800278c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	807b      	strh	r3, [r7, #2]
 8002798:	4613      	mov	r3, r2
 800279a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800279c:	787b      	ldrb	r3, [r7, #1]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027a8:	e002      	b.n	80027b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027aa:	887a      	ldrh	r2, [r7, #2]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e08d      	b.n	80028ea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe fcae 	bl	8001144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2224      	movs	r2, #36	@ 0x24
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800280c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800281c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	e006      	b.n	8002844 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002842:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d108      	bne.n	800285e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	e007      	b.n	800286e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800286c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800287c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002880:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002890:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69d9      	ldr	r1, [r3, #28]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1a      	ldr	r2, [r3, #32]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	461a      	mov	r2, r3
 8002902:	4603      	mov	r3, r0
 8002904:	817b      	strh	r3, [r7, #10]
 8002906:	460b      	mov	r3, r1
 8002908:	813b      	strh	r3, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b20      	cmp	r3, #32
 8002918:	f040 80f9 	bne.w	8002b0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_I2C_Mem_Write+0x34>
 8002922:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800292e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0ed      	b.n	8002b10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_I2C_Mem_Write+0x4e>
 800293e:	2302      	movs	r3, #2
 8002940:	e0e6      	b.n	8002b10 <HAL_I2C_Mem_Write+0x21c>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800294a:	f7ff fa11 	bl	8001d70 <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	2319      	movs	r3, #25
 8002956:	2201      	movs	r2, #1
 8002958:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fac3 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0d1      	b.n	8002b10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2221      	movs	r2, #33	@ 0x21
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2240      	movs	r2, #64	@ 0x40
 8002978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a3a      	ldr	r2, [r7, #32]
 8002986:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800298c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002994:	88f8      	ldrh	r0, [r7, #6]
 8002996:	893a      	ldrh	r2, [r7, #8]
 8002998:	8979      	ldrh	r1, [r7, #10]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	4603      	mov	r3, r0
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f9d3 	bl	8002d50 <I2C_RequestMemoryWrite>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0a9      	b.n	8002b10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2bff      	cmp	r3, #255	@ 0xff
 80029c4:	d90e      	bls.n	80029e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	22ff      	movs	r2, #255	@ 0xff
 80029ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	8979      	ldrh	r1, [r7, #10]
 80029d4:	2300      	movs	r3, #0
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fc47 	bl	8003270 <I2C_TransferConfig>
 80029e2:	e00f      	b.n	8002a04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	8979      	ldrh	r1, [r7, #10]
 80029f6:	2300      	movs	r3, #0
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fc36 	bl	8003270 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 fac6 	bl	8002f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e07b      	b.n	8002b10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d034      	beq.n	8002abc <HAL_I2C_Mem_Write+0x1c8>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d130      	bne.n	8002abc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a60:	2200      	movs	r2, #0
 8002a62:	2180      	movs	r1, #128	@ 0x80
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fa3f 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e04d      	b.n	8002b10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2bff      	cmp	r3, #255	@ 0xff
 8002a7c:	d90e      	bls.n	8002a9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	22ff      	movs	r2, #255	@ 0xff
 8002a82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	8979      	ldrh	r1, [r7, #10]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fbeb 	bl	8003270 <I2C_TransferConfig>
 8002a9a:	e00f      	b.n	8002abc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	8979      	ldrh	r1, [r7, #10]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fbda 	bl	8003270 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d19e      	bne.n	8002a04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 faac 	bl	8003028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e01a      	b.n	8002b10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <HAL_I2C_Mem_Write+0x224>)
 8002aee:	400b      	ands	r3, r1
 8002af0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e000      	b.n	8002b10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b0e:	2302      	movs	r3, #2
  }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	fe00e800 	.word	0xfe00e800

08002b1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	4608      	mov	r0, r1
 8002b26:	4611      	mov	r1, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	817b      	strh	r3, [r7, #10]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	813b      	strh	r3, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	f040 80fd 	bne.w	8002d3e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_I2C_Mem_Read+0x34>
 8002b4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d105      	bne.n	8002b5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0f1      	b.n	8002d40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_I2C_Mem_Read+0x4e>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0ea      	b.n	8002d40 <HAL_I2C_Mem_Read+0x224>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b72:	f7ff f8fd 	bl	8001d70 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2319      	movs	r3, #25
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f9af 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0d5      	b.n	8002d40 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2222      	movs	r2, #34	@ 0x22
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2240      	movs	r2, #64	@ 0x40
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a3a      	ldr	r2, [r7, #32]
 8002bae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bbc:	88f8      	ldrh	r0, [r7, #6]
 8002bbe:	893a      	ldrh	r2, [r7, #8]
 8002bc0:	8979      	ldrh	r1, [r7, #10]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	4603      	mov	r3, r0
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f913 	bl	8002df8 <I2C_RequestMemoryRead>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0ad      	b.n	8002d40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2bff      	cmp	r3, #255	@ 0xff
 8002bec:	d90e      	bls.n	8002c0c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	8979      	ldrh	r1, [r7, #10]
 8002bfc:	4b52      	ldr	r3, [pc, #328]	@ (8002d48 <HAL_I2C_Mem_Read+0x22c>)
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fb33 	bl	8003270 <I2C_TransferConfig>
 8002c0a:	e00f      	b.n	8002c2c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	8979      	ldrh	r1, [r7, #10]
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d48 <HAL_I2C_Mem_Read+0x22c>)
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fb22 	bl	8003270 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c32:	2200      	movs	r2, #0
 8002c34:	2104      	movs	r1, #4
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f956 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e07c      	b.n	8002d40 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d034      	beq.n	8002cec <HAL_I2C_Mem_Read+0x1d0>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d130      	bne.n	8002cec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c90:	2200      	movs	r2, #0
 8002c92:	2180      	movs	r1, #128	@ 0x80
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f927 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e04d      	b.n	8002d40 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2bff      	cmp	r3, #255	@ 0xff
 8002cac:	d90e      	bls.n	8002ccc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	8979      	ldrh	r1, [r7, #10]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fad3 	bl	8003270 <I2C_TransferConfig>
 8002cca:	e00f      	b.n	8002cec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	8979      	ldrh	r1, [r7, #10]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fac2 	bl	8003270 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d19a      	bne.n	8002c2c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f994 	bl	8003028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e01a      	b.n	8002d40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <HAL_I2C_Mem_Read+0x230>)
 8002d1e:	400b      	ands	r3, r1
 8002d20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e000      	b.n	8002d40 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d3e:	2302      	movs	r3, #2
  }
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	80002400 	.word	0x80002400
 8002d4c:	fe00e800 	.word	0xfe00e800

08002d50 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	4608      	mov	r0, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	817b      	strh	r3, [r7, #10]
 8002d62:	460b      	mov	r3, r1
 8002d64:	813b      	strh	r3, [r7, #8]
 8002d66:	4613      	mov	r3, r2
 8002d68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	8979      	ldrh	r1, [r7, #10]
 8002d70:	4b20      	ldr	r3, [pc, #128]	@ (8002df4 <I2C_RequestMemoryWrite+0xa4>)
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 fa79 	bl	8003270 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	69b9      	ldr	r1, [r7, #24]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f909 	bl	8002f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e02c      	b.n	8002dec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d105      	bne.n	8002da4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d98:	893b      	ldrh	r3, [r7, #8]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002da2:	e015      	b.n	8002dd0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002da4:	893b      	ldrh	r3, [r7, #8]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	69b9      	ldr	r1, [r7, #24]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f8ef 	bl	8002f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e012      	b.n	8002dec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc6:	893b      	ldrh	r3, [r7, #8]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2180      	movs	r1, #128	@ 0x80
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f884 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	80002000 	.word	0x80002000

08002df8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	4608      	mov	r0, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	461a      	mov	r2, r3
 8002e06:	4603      	mov	r3, r0
 8002e08:	817b      	strh	r3, [r7, #10]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	813b      	strh	r3, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	8979      	ldrh	r1, [r7, #10]
 8002e18:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <I2C_RequestMemoryRead+0xa4>)
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fa26 	bl	8003270 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	69b9      	ldr	r1, [r7, #24]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f8b6 	bl	8002f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e02c      	b.n	8002e92 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d105      	bne.n	8002e4a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e3e:	893b      	ldrh	r3, [r7, #8]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e48:	e015      	b.n	8002e76 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e4a:	893b      	ldrh	r3, [r7, #8]
 8002e4c:	0a1b      	lsrs	r3, r3, #8
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	69b9      	ldr	r1, [r7, #24]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f89c 	bl	8002f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e012      	b.n	8002e92 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e6c:	893b      	ldrh	r3, [r7, #8]
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2140      	movs	r1, #64	@ 0x40
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f831 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	80002000 	.word	0x80002000

08002ea0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d103      	bne.n	8002ebe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d007      	beq.n	8002edc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	619a      	str	r2, [r3, #24]
  }
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef8:	e03b      	b.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	6839      	ldr	r1, [r7, #0]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f8d6 	bl	80030b0 <I2C_IsErrorOccurred>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e041      	b.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f14:	d02d      	beq.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f16:	f7fe ff2b 	bl	8001d70 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d302      	bcc.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d122      	bne.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4013      	ands	r3, r2
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d113      	bne.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00f      	b.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d0b4      	beq.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa6:	e033      	b.n	8003010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f87f 	bl	80030b0 <I2C_IsErrorOccurred>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e031      	b.n	8003020 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fc2:	d025      	beq.n	8003010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc4:	f7fe fed4 	bl	8001d70 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d302      	bcc.n	8002fda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d11a      	bne.n	8003010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d013      	beq.n	8003010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e007      	b.n	8003020 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d1c4      	bne.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003034:	e02f      	b.n	8003096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f838 	bl	80030b0 <I2C_IsErrorOccurred>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e02d      	b.n	80030a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7fe fe91 	bl	8001d70 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d11a      	bne.n	8003096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b20      	cmp	r3, #32
 800306c:	d013      	beq.n	8003096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003072:	f043 0220 	orr.w	r2, r3, #32
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e007      	b.n	80030a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d1c8      	bne.n	8003036 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	@ 0x28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d068      	beq.n	80031ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2210      	movs	r2, #16
 80030e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030e4:	e049      	b.n	800317a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030ec:	d045      	beq.n	800317a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7fe fe3f 	bl	8001d70 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <I2C_IsErrorOccurred+0x54>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d13a      	bne.n	800317a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800310e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003116:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003122:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003126:	d121      	bne.n	800316c <I2C_IsErrorOccurred+0xbc>
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800312e:	d01d      	beq.n	800316c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003130:	7cfb      	ldrb	r3, [r7, #19]
 8003132:	2b20      	cmp	r3, #32
 8003134:	d01a      	beq.n	800316c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003144:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003146:	f7fe fe13 	bl	8001d70 <HAL_GetTick>
 800314a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800314c:	e00e      	b.n	800316c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800314e:	f7fe fe0f 	bl	8001d70 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b19      	cmp	r3, #25
 800315a:	d907      	bls.n	800316c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	f043 0320 	orr.w	r3, r3, #32
 8003162:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800316a:	e006      	b.n	800317a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b20      	cmp	r3, #32
 8003178:	d1e9      	bne.n	800314e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b20      	cmp	r3, #32
 8003186:	d003      	beq.n	8003190 <I2C_IsErrorOccurred+0xe0>
 8003188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0aa      	beq.n	80030e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003194:	2b00      	cmp	r3, #0
 8003196:	d103      	bne.n	80031a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2220      	movs	r2, #32
 800319e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00b      	beq.n	80031d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	f043 0308 	orr.w	r3, r3, #8
 80031e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00b      	beq.n	800321c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	f043 0302 	orr.w	r3, r3, #2
 800320a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003214:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800321c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01c      	beq.n	800325e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7ff fe3b 	bl	8002ea0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <I2C_IsErrorOccurred+0x1bc>)
 8003236:	400b      	ands	r3, r1
 8003238:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800325e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003262:	4618      	mov	r0, r3
 8003264:	3728      	adds	r7, #40	@ 0x28
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	fe00e800 	.word	0xfe00e800

08003270 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	607b      	str	r3, [r7, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	817b      	strh	r3, [r7, #10]
 800327e:	4613      	mov	r3, r2
 8003280:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003282:	897b      	ldrh	r3, [r7, #10]
 8003284:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003288:	7a7b      	ldrb	r3, [r7, #9]
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003290:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	4313      	orrs	r3, r2
 800329a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800329e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	0d5b      	lsrs	r3, r3, #21
 80032aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80032ae:	4b08      	ldr	r3, [pc, #32]	@ (80032d0 <I2C_TransferConfig+0x60>)
 80032b0:	430b      	orrs	r3, r1
 80032b2:	43db      	mvns	r3, r3
 80032b4:	ea02 0103 	and.w	r1, r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032c2:	bf00      	nop
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	03ff63ff 	.word	0x03ff63ff

080032d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d138      	bne.n	800335c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e032      	b.n	800335e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2224      	movs	r2, #36	@ 0x24
 8003304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0201 	bic.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003326:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6819      	ldr	r1, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	e000      	b.n	800335e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800335c:	2302      	movs	r3, #2
  }
}
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800336a:	b480      	push	{r7}
 800336c:	b085      	sub	sp, #20
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b20      	cmp	r3, #32
 800337e:	d139      	bne.n	80033f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800338a:	2302      	movs	r3, #2
 800338c:	e033      	b.n	80033f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2224      	movs	r2, #36	@ 0x24
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <HAL_PWREx_GetVoltageRange+0x18>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40007000 	.word	0x40007000

08003420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800342e:	d130      	bne.n	8003492 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003430:	4b23      	ldr	r3, [pc, #140]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800343c:	d038      	beq.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800343e:	4b20      	ldr	r3, [pc, #128]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003446:	4a1e      	ldr	r2, [pc, #120]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003448:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800344c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800344e:	4b1d      	ldr	r3, [pc, #116]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2232      	movs	r2, #50	@ 0x32
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	4a1b      	ldr	r2, [pc, #108]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	0c9b      	lsrs	r3, r3, #18
 8003460:	3301      	adds	r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003464:	e002      	b.n	800346c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3b01      	subs	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800346c:	4b14      	ldr	r3, [pc, #80]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003478:	d102      	bne.n	8003480 <HAL_PWREx_ControlVoltageScaling+0x60>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f2      	bne.n	8003466 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003480:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800348c:	d110      	bne.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e00f      	b.n	80034b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003492:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800349e:	d007      	beq.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034a0:	4b07      	ldr	r3, [pc, #28]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034a8:	4a05      	ldr	r2, [pc, #20]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40007000 	.word	0x40007000
 80034c4:	20000000 	.word	0x20000000
 80034c8:	431bde83 	.word	0x431bde83

080034cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e3ca      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034de:	4b97      	ldr	r3, [pc, #604]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e8:	4b94      	ldr	r3, [pc, #592]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80e4 	beq.w	80036c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_RCC_OscConfig+0x4a>
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b0c      	cmp	r3, #12
 800350a:	f040 808b 	bne.w	8003624 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b01      	cmp	r3, #1
 8003512:	f040 8087 	bne.w	8003624 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003516:	4b89      	ldr	r3, [pc, #548]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_RCC_OscConfig+0x62>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e3a2      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1a      	ldr	r2, [r3, #32]
 8003532:	4b82      	ldr	r3, [pc, #520]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d004      	beq.n	8003548 <HAL_RCC_OscConfig+0x7c>
 800353e:	4b7f      	ldr	r3, [pc, #508]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003546:	e005      	b.n	8003554 <HAL_RCC_OscConfig+0x88>
 8003548:	4b7c      	ldr	r3, [pc, #496]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 800354a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003554:	4293      	cmp	r3, r2
 8003556:	d223      	bcs.n	80035a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fd87 	bl	8004070 <RCC_SetFlashLatencyFromMSIRange>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e383      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800356c:	4b73      	ldr	r3, [pc, #460]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a72      	ldr	r2, [pc, #456]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003572:	f043 0308 	orr.w	r3, r3, #8
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b70      	ldr	r3, [pc, #448]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	496d      	ldr	r1, [pc, #436]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800358a:	4b6c      	ldr	r3, [pc, #432]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	4968      	ldr	r1, [pc, #416]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
 800359e:	e025      	b.n	80035ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035a0:	4b66      	ldr	r3, [pc, #408]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a65      	ldr	r2, [pc, #404]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 80035a6:	f043 0308 	orr.w	r3, r3, #8
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b63      	ldr	r3, [pc, #396]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4960      	ldr	r1, [pc, #384]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035be:	4b5f      	ldr	r3, [pc, #380]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	495b      	ldr	r1, [pc, #364]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d109      	bne.n	80035ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fd47 	bl	8004070 <RCC_SetFlashLatencyFromMSIRange>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e343      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035ec:	f000 fc4a 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b52      	ldr	r3, [pc, #328]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	4950      	ldr	r1, [pc, #320]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	4a4e      	ldr	r2, [pc, #312]	@ (8003744 <HAL_RCC_OscConfig+0x278>)
 800360a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800360c:	4b4e      	ldr	r3, [pc, #312]	@ (8003748 <HAL_RCC_OscConfig+0x27c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe f903 	bl	800181c <HAL_InitTick>
 8003616:	4603      	mov	r3, r0
 8003618:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d052      	beq.n	80036c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	e327      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d032      	beq.n	8003692 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800362c:	4b43      	ldr	r3, [pc, #268]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a42      	ldr	r2, [pc, #264]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003638:	f7fe fb9a 	bl	8001d70 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003640:	f7fe fb96 	bl	8001d70 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e310      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003652:	4b3a      	ldr	r3, [pc, #232]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800365e:	4b37      	ldr	r3, [pc, #220]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a36      	ldr	r2, [pc, #216]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003664:	f043 0308 	orr.w	r3, r3, #8
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b34      	ldr	r3, [pc, #208]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4931      	ldr	r1, [pc, #196]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800367c:	4b2f      	ldr	r3, [pc, #188]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	492c      	ldr	r1, [pc, #176]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
 8003690:	e01a      	b.n	80036c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003692:	4b2a      	ldr	r3, [pc, #168]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a29      	ldr	r2, [pc, #164]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800369e:	f7fe fb67 	bl	8001d70 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036a6:	f7fe fb63 	bl	8001d70 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e2dd      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036b8:	4b20      	ldr	r3, [pc, #128]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x1da>
 80036c4:	e000      	b.n	80036c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d074      	beq.n	80037be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d005      	beq.n	80036e6 <HAL_RCC_OscConfig+0x21a>
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b0c      	cmp	r3, #12
 80036de:	d10e      	bne.n	80036fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d10b      	bne.n	80036fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e6:	4b15      	ldr	r3, [pc, #84]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d064      	beq.n	80037bc <HAL_RCC_OscConfig+0x2f0>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d160      	bne.n	80037bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e2ba      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x24a>
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0b      	ldr	r2, [pc, #44]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 800370e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	e026      	b.n	8003764 <HAL_RCC_OscConfig+0x298>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800371e:	d115      	bne.n	800374c <HAL_RCC_OscConfig+0x280>
 8003720:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a05      	ldr	r2, [pc, #20]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003726:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b03      	ldr	r3, [pc, #12]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a02      	ldr	r2, [pc, #8]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	e014      	b.n	8003764 <HAL_RCC_OscConfig+0x298>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	0800c95c 	.word	0x0800c95c
 8003744:	20000000 	.word	0x20000000
 8003748:	20000004 	.word	0x20000004
 800374c:	4ba0      	ldr	r3, [pc, #640]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a9f      	ldr	r2, [pc, #636]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	4b9d      	ldr	r3, [pc, #628]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a9c      	ldr	r2, [pc, #624]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 800375e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d013      	beq.n	8003794 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fe fb00 	bl	8001d70 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003774:	f7fe fafc 	bl	8001d70 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	@ 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e276      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003786:	4b92      	ldr	r3, [pc, #584]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x2a8>
 8003792:	e014      	b.n	80037be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fe faec 	bl	8001d70 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800379c:	f7fe fae8 	bl	8001d70 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	@ 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e262      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ae:	4b88      	ldr	r3, [pc, #544]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x2d0>
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d060      	beq.n	800388c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_OscConfig+0x310>
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d119      	bne.n	800380a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d116      	bne.n	800380a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037dc:	4b7c      	ldr	r3, [pc, #496]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_OscConfig+0x328>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e23f      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f4:	4b76      	ldr	r3, [pc, #472]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	4973      	ldr	r1, [pc, #460]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003808:	e040      	b.n	800388c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d023      	beq.n	800385a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003812:	4b6f      	ldr	r3, [pc, #444]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6e      	ldr	r2, [pc, #440]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fe faa7 	bl	8001d70 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003826:	f7fe faa3 	bl	8001d70 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e21d      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003838:	4b65      	ldr	r3, [pc, #404]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003844:	4b62      	ldr	r3, [pc, #392]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	495f      	ldr	r1, [pc, #380]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003854:	4313      	orrs	r3, r2
 8003856:	604b      	str	r3, [r1, #4]
 8003858:	e018      	b.n	800388c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800385a:	4b5d      	ldr	r3, [pc, #372]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a5c      	ldr	r2, [pc, #368]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003866:	f7fe fa83 	bl	8001d70 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800386e:	f7fe fa7f 	bl	8001d70 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e1f9      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003880:	4b53      	ldr	r3, [pc, #332]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d03c      	beq.n	8003912 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01c      	beq.n	80038da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a0:	4b4b      	ldr	r3, [pc, #300]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 80038a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a6:	4a4a      	ldr	r2, [pc, #296]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fe fa5e 	bl	8001d70 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b8:	f7fe fa5a 	bl	8001d70 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e1d4      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038ca:	4b41      	ldr	r3, [pc, #260]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 80038cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ef      	beq.n	80038b8 <HAL_RCC_OscConfig+0x3ec>
 80038d8:	e01b      	b.n	8003912 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038da:	4b3d      	ldr	r3, [pc, #244]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 80038dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e0:	4a3b      	ldr	r2, [pc, #236]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ea:	f7fe fa41 	bl	8001d70 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f2:	f7fe fa3d 	bl	8001d70 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e1b7      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003904:	4b32      	ldr	r3, [pc, #200]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1ef      	bne.n	80038f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80a6 	beq.w	8003a6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003920:	2300      	movs	r3, #0
 8003922:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003924:	4b2a      	ldr	r3, [pc, #168]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10d      	bne.n	800394c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003930:	4b27      	ldr	r3, [pc, #156]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003934:	4a26      	ldr	r2, [pc, #152]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800393a:	6593      	str	r3, [r2, #88]	@ 0x58
 800393c:	4b24      	ldr	r3, [pc, #144]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003948:	2301      	movs	r3, #1
 800394a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800394c:	4b21      	ldr	r3, [pc, #132]	@ (80039d4 <HAL_RCC_OscConfig+0x508>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d118      	bne.n	800398a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003958:	4b1e      	ldr	r3, [pc, #120]	@ (80039d4 <HAL_RCC_OscConfig+0x508>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1d      	ldr	r2, [pc, #116]	@ (80039d4 <HAL_RCC_OscConfig+0x508>)
 800395e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003962:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003964:	f7fe fa04 	bl	8001d70 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396c:	f7fe fa00 	bl	8001d70 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e17a      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800397e:	4b15      	ldr	r3, [pc, #84]	@ (80039d4 <HAL_RCC_OscConfig+0x508>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d108      	bne.n	80039a4 <HAL_RCC_OscConfig+0x4d8>
 8003992:	4b0f      	ldr	r3, [pc, #60]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003998:	4a0d      	ldr	r2, [pc, #52]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039a2:	e029      	b.n	80039f8 <HAL_RCC_OscConfig+0x52c>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b05      	cmp	r3, #5
 80039aa:	d115      	bne.n	80039d8 <HAL_RCC_OscConfig+0x50c>
 80039ac:	4b08      	ldr	r3, [pc, #32]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b2:	4a07      	ldr	r2, [pc, #28]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 80039b4:	f043 0304 	orr.w	r3, r3, #4
 80039b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039bc:	4b04      	ldr	r3, [pc, #16]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c2:	4a03      	ldr	r2, [pc, #12]	@ (80039d0 <HAL_RCC_OscConfig+0x504>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039cc:	e014      	b.n	80039f8 <HAL_RCC_OscConfig+0x52c>
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40007000 	.word	0x40007000
 80039d8:	4b9c      	ldr	r3, [pc, #624]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039de:	4a9b      	ldr	r2, [pc, #620]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039e8:	4b98      	ldr	r3, [pc, #608]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ee:	4a97      	ldr	r2, [pc, #604]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 80039f0:	f023 0304 	bic.w	r3, r3, #4
 80039f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d016      	beq.n	8003a2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fe f9b6 	bl	8001d70 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a08:	f7fe f9b2 	bl	8001d70 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e12a      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a1e:	4b8b      	ldr	r3, [pc, #556]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ed      	beq.n	8003a08 <HAL_RCC_OscConfig+0x53c>
 8003a2c:	e015      	b.n	8003a5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2e:	f7fe f99f 	bl	8001d70 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fe f99b 	bl	8001d70 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e113      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a4c:	4b7f      	ldr	r3, [pc, #508]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1ed      	bne.n	8003a36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a5a:	7ffb      	ldrb	r3, [r7, #31]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a60:	4b7a      	ldr	r3, [pc, #488]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a64:	4a79      	ldr	r2, [pc, #484]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003a66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a6a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80fe 	beq.w	8003c72 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	f040 80d0 	bne.w	8003c20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a80:	4b72      	ldr	r3, [pc, #456]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0203 	and.w	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d130      	bne.n	8003af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d127      	bne.n	8003af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d11f      	bne.n	8003af6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ac0:	2a07      	cmp	r2, #7
 8003ac2:	bf14      	ite	ne
 8003ac4:	2201      	movne	r2, #1
 8003ac6:	2200      	moveq	r2, #0
 8003ac8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d113      	bne.n	8003af6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	3b01      	subs	r3, #1
 8003adc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	085b      	lsrs	r3, r3, #1
 8003aee:	3b01      	subs	r3, #1
 8003af0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d06e      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	d069      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003afc:	4b53      	ldr	r3, [pc, #332]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b08:	4b50      	ldr	r3, [pc, #320]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0ad      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b18:	4b4c      	ldr	r3, [pc, #304]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003b1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b24:	f7fe f924 	bl	8001d70 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fe f920 	bl	8001d70 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e09a      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b3e:	4b43      	ldr	r3, [pc, #268]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b4a:	4b40      	ldr	r3, [pc, #256]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	4b40      	ldr	r3, [pc, #256]	@ (8003c50 <HAL_RCC_OscConfig+0x784>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b5a:	3a01      	subs	r2, #1
 8003b5c:	0112      	lsls	r2, r2, #4
 8003b5e:	4311      	orrs	r1, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b64:	0212      	lsls	r2, r2, #8
 8003b66:	4311      	orrs	r1, r2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b6c:	0852      	lsrs	r2, r2, #1
 8003b6e:	3a01      	subs	r2, #1
 8003b70:	0552      	lsls	r2, r2, #21
 8003b72:	4311      	orrs	r1, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b78:	0852      	lsrs	r2, r2, #1
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	0652      	lsls	r2, r2, #25
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b84:	0912      	lsrs	r2, r2, #4
 8003b86:	0452      	lsls	r2, r2, #17
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	4930      	ldr	r1, [pc, #192]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b90:	4b2e      	ldr	r3, [pc, #184]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2d      	ldr	r2, [pc, #180]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ba6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ba8:	f7fe f8e2 	bl	8001d70 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fe f8de 	bl	8001d70 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e058      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc2:	4b22      	ldr	r3, [pc, #136]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bce:	e050      	b.n	8003c72 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e04f      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d148      	bne.n	8003c72 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003be0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a19      	ldr	r2, [pc, #100]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bec:	4b17      	ldr	r3, [pc, #92]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4a16      	ldr	r2, [pc, #88]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bf6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bf8:	f7fe f8ba 	bl	8001d70 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fe f8b6 	bl	8001d70 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e030      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c12:	4b0e      	ldr	r3, [pc, #56]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x734>
 8003c1e:	e028      	b.n	8003c72 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b0c      	cmp	r3, #12
 8003c24:	d023      	beq.n	8003c6e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b09      	ldr	r3, [pc, #36]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a08      	ldr	r2, [pc, #32]	@ (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003c2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fe f89d 	bl	8001d70 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c38:	e00c      	b.n	8003c54 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fe f899 	bl	8001d70 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d905      	bls.n	8003c54 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e013      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c54:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <HAL_RCC_OscConfig+0x7b0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1ec      	bne.n	8003c3a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c60:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_RCC_OscConfig+0x7b0>)
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	4905      	ldr	r1, [pc, #20]	@ (8003c7c <HAL_RCC_OscConfig+0x7b0>)
 8003c66:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <HAL_RCC_OscConfig+0x7b4>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	60cb      	str	r3, [r1, #12]
 8003c6c:	e001      	b.n	8003c72 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	feeefffc 	.word	0xfeeefffc

08003c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0e7      	b.n	8003e68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c98:	4b75      	ldr	r3, [pc, #468]	@ (8003e70 <HAL_RCC_ClockConfig+0x1ec>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d910      	bls.n	8003cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b72      	ldr	r3, [pc, #456]	@ (8003e70 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 0207 	bic.w	r2, r3, #7
 8003cae:	4970      	ldr	r1, [pc, #448]	@ (8003e70 <HAL_RCC_ClockConfig+0x1ec>)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8003e70 <HAL_RCC_ClockConfig+0x1ec>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0cf      	b.n	8003e68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d010      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	4b66      	ldr	r3, [pc, #408]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d908      	bls.n	8003cf6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce4:	4b63      	ldr	r3, [pc, #396]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4960      	ldr	r1, [pc, #384]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d04c      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d107      	bne.n	8003d1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d121      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e0a6      	b.n	8003e68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d22:	4b54      	ldr	r3, [pc, #336]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d115      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e09a      	b.n	8003e68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e08e      	b.n	8003e68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e086      	b.n	8003e68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d5a:	4b46      	ldr	r3, [pc, #280]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f023 0203 	bic.w	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4943      	ldr	r1, [pc, #268]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6c:	f7fe f800 	bl	8001d70 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	e00a      	b.n	8003d8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d74:	f7fd fffc 	bl	8001d70 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e06e      	b.n	8003e68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 020c 	and.w	r2, r3, #12
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d1eb      	bne.n	8003d74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d010      	beq.n	8003dca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	4b31      	ldr	r3, [pc, #196]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d208      	bcs.n	8003dca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	492b      	ldr	r1, [pc, #172]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dca:	4b29      	ldr	r3, [pc, #164]	@ (8003e70 <HAL_RCC_ClockConfig+0x1ec>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d210      	bcs.n	8003dfa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd8:	4b25      	ldr	r3, [pc, #148]	@ (8003e70 <HAL_RCC_ClockConfig+0x1ec>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f023 0207 	bic.w	r2, r3, #7
 8003de0:	4923      	ldr	r1, [pc, #140]	@ (8003e70 <HAL_RCC_ClockConfig+0x1ec>)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de8:	4b21      	ldr	r3, [pc, #132]	@ (8003e70 <HAL_RCC_ClockConfig+0x1ec>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e036      	b.n	8003e68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e06:	4b1b      	ldr	r3, [pc, #108]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4918      	ldr	r1, [pc, #96]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d009      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e24:	4b13      	ldr	r3, [pc, #76]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4910      	ldr	r1, [pc, #64]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e38:	f000 f824 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f0>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	490b      	ldr	r1, [pc, #44]	@ (8003e78 <HAL_RCC_ClockConfig+0x1f4>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
 8003e54:	4a09      	ldr	r2, [pc, #36]	@ (8003e7c <HAL_RCC_ClockConfig+0x1f8>)
 8003e56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e58:	4b09      	ldr	r3, [pc, #36]	@ (8003e80 <HAL_RCC_ClockConfig+0x1fc>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fd fcdd 	bl	800181c <HAL_InitTick>
 8003e62:	4603      	mov	r3, r0
 8003e64:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e66:	7afb      	ldrb	r3, [r7, #11]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40022000 	.word	0x40022000
 8003e74:	40021000 	.word	0x40021000
 8003e78:	0800c95c 	.word	0x0800c95c
 8003e7c:	20000000 	.word	0x20000000
 8003e80:	20000004 	.word	0x20000004

08003e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	@ 0x24
 8003e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e92:	4b3e      	ldr	r3, [pc, #248]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	2b0c      	cmp	r3, #12
 8003eb0:	d121      	bne.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d11e      	bne.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003eb8:	4b34      	ldr	r3, [pc, #208]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d107      	bne.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ec4:	4b31      	ldr	r3, [pc, #196]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	e005      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10d      	bne.n	8003f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d102      	bne.n	8003f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003efc:	4b25      	ldr	r3, [pc, #148]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	e004      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f08:	4b23      	ldr	r3, [pc, #140]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	d134      	bne.n	8003f7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f12:	4b1e      	ldr	r3, [pc, #120]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d003      	beq.n	8003f2a <HAL_RCC_GetSysClockFreq+0xa6>
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d003      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0xac>
 8003f28:	e005      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f2c:	617b      	str	r3, [r7, #20]
      break;
 8003f2e:	e005      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f30:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f32:	617b      	str	r3, [r7, #20]
      break;
 8003f34:	e002      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	617b      	str	r3, [r7, #20]
      break;
 8003f3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f3c:	4b13      	ldr	r3, [pc, #76]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	091b      	lsrs	r3, r3, #4
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	3301      	adds	r3, #1
 8003f48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f4a:	4b10      	ldr	r3, [pc, #64]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	0a1b      	lsrs	r3, r3, #8
 8003f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	fb03 f202 	mul.w	r2, r3, r2
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f62:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	0e5b      	lsrs	r3, r3, #25
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f7c:	69bb      	ldr	r3, [r7, #24]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3724      	adds	r7, #36	@ 0x24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	0800c974 	.word	0x0800c974
 8003f94:	00f42400 	.word	0x00f42400
 8003f98:	007a1200 	.word	0x007a1200

08003f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa0:	4b03      	ldr	r3, [pc, #12]	@ (8003fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000000 	.word	0x20000000

08003fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fb8:	f7ff fff0 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	0a1b      	lsrs	r3, r3, #8
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	4904      	ldr	r1, [pc, #16]	@ (8003fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fca:	5ccb      	ldrb	r3, [r1, r3]
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	0800c96c 	.word	0x0800c96c

08003fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fe4:	f7ff ffda 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	0adb      	lsrs	r3, r3, #11
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	4904      	ldr	r1, [pc, #16]	@ (8004008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ff6:	5ccb      	ldrb	r3, [r1, r3]
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004000:	4618      	mov	r0, r3
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40021000 	.word	0x40021000
 8004008:	0800c96c 	.word	0x0800c96c

0800400c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	220f      	movs	r2, #15
 800401a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800401c:	4b12      	ldr	r3, [pc, #72]	@ (8004068 <HAL_RCC_GetClockConfig+0x5c>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0203 	and.w	r2, r3, #3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004028:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <HAL_RCC_GetClockConfig+0x5c>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004034:	4b0c      	ldr	r3, [pc, #48]	@ (8004068 <HAL_RCC_GetClockConfig+0x5c>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004040:	4b09      	ldr	r3, [pc, #36]	@ (8004068 <HAL_RCC_GetClockConfig+0x5c>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	08db      	lsrs	r3, r3, #3
 8004046:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800404e:	4b07      	ldr	r3, [pc, #28]	@ (800406c <HAL_RCC_GetClockConfig+0x60>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0207 	and.w	r2, r3, #7
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	601a      	str	r2, [r3, #0]
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	40022000 	.word	0x40022000

08004070 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004078:	2300      	movs	r3, #0
 800407a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800407c:	4b2a      	ldr	r3, [pc, #168]	@ (8004128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004088:	f7ff f9bc 	bl	8003404 <HAL_PWREx_GetVoltageRange>
 800408c:	6178      	str	r0, [r7, #20]
 800408e:	e014      	b.n	80040ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004090:	4b25      	ldr	r3, [pc, #148]	@ (8004128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004094:	4a24      	ldr	r2, [pc, #144]	@ (8004128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800409a:	6593      	str	r3, [r2, #88]	@ 0x58
 800409c:	4b22      	ldr	r3, [pc, #136]	@ (8004128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800409e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040a8:	f7ff f9ac 	bl	8003404 <HAL_PWREx_GetVoltageRange>
 80040ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040c0:	d10b      	bne.n	80040da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b80      	cmp	r3, #128	@ 0x80
 80040c6:	d919      	bls.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80040cc:	d902      	bls.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040ce:	2302      	movs	r3, #2
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	e013      	b.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040d4:	2301      	movs	r3, #1
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	e010      	b.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b80      	cmp	r3, #128	@ 0x80
 80040de:	d902      	bls.n	80040e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040e0:	2303      	movs	r3, #3
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	e00a      	b.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b80      	cmp	r3, #128	@ 0x80
 80040ea:	d102      	bne.n	80040f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040ec:	2302      	movs	r3, #2
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e004      	b.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b70      	cmp	r3, #112	@ 0x70
 80040f6:	d101      	bne.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040f8:	2301      	movs	r3, #1
 80040fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 0207 	bic.w	r2, r3, #7
 8004104:	4909      	ldr	r1, [pc, #36]	@ (800412c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800410c:	4b07      	ldr	r3, [pc, #28]	@ (800412c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	429a      	cmp	r2, r3
 8004118:	d001      	beq.n	800411e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021000 	.word	0x40021000
 800412c:	40022000 	.word	0x40022000

08004130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004138:	2300      	movs	r3, #0
 800413a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800413c:	2300      	movs	r3, #0
 800413e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004148:	2b00      	cmp	r3, #0
 800414a:	d041      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004150:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004154:	d02a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004156:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800415a:	d824      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800415c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004160:	d008      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004162:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004166:	d81e      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800416c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004170:	d010      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004172:	e018      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004174:	4b86      	ldr	r3, [pc, #536]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a85      	ldr	r2, [pc, #532]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800417e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004180:	e015      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f001 f829 	bl	80051e0 <RCCEx_PLLSAI1_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004192:	e00c      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3320      	adds	r3, #32
 8004198:	2100      	movs	r1, #0
 800419a:	4618      	mov	r0, r3
 800419c:	f001 f914 	bl	80053c8 <RCCEx_PLLSAI2_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041a4:	e003      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	74fb      	strb	r3, [r7, #19]
      break;
 80041aa:	e000      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10b      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041b4:	4b76      	ldr	r3, [pc, #472]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041c2:	4973      	ldr	r1, [pc, #460]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041ca:	e001      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d041      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041e4:	d02a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80041e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041ea:	d824      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041f0:	d008      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041f6:	d81e      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004200:	d010      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004202:	e018      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004204:	4b62      	ldr	r3, [pc, #392]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4a61      	ldr	r2, [pc, #388]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800420e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004210:	e015      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f000 ffe1 	bl	80051e0 <RCCEx_PLLSAI1_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004222:	e00c      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3320      	adds	r3, #32
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f001 f8cc 	bl	80053c8 <RCCEx_PLLSAI2_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	74fb      	strb	r3, [r7, #19]
      break;
 800423a:	e000      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800423c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800423e:	7cfb      	ldrb	r3, [r7, #19]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004244:	4b52      	ldr	r3, [pc, #328]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004252:	494f      	ldr	r1, [pc, #316]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800425a:	e001      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80a0 	beq.w	80043ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426e:	2300      	movs	r3, #0
 8004270:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004272:	4b47      	ldr	r3, [pc, #284]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004282:	2300      	movs	r3, #0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00d      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004288:	4b41      	ldr	r3, [pc, #260]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428c:	4a40      	ldr	r2, [pc, #256]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004292:	6593      	str	r3, [r2, #88]	@ 0x58
 8004294:	4b3e      	ldr	r3, [pc, #248]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a0:	2301      	movs	r3, #1
 80042a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a3a      	ldr	r2, [pc, #232]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042b0:	f7fd fd5e 	bl	8001d70 <HAL_GetTick>
 80042b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042b6:	e009      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b8:	f7fd fd5a 	bl	8001d70 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d902      	bls.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	74fb      	strb	r3, [r7, #19]
        break;
 80042ca:	e005      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042cc:	4b31      	ldr	r3, [pc, #196]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0ef      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d15c      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042de:	4b2c      	ldr	r3, [pc, #176]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01f      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d019      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042fc:	4b24      	ldr	r3, [pc, #144]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004306:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004308:	4b21      	ldr	r3, [pc, #132]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430e:	4a20      	ldr	r2, [pc, #128]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004318:	4b1d      	ldr	r3, [pc, #116]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431e:	4a1c      	ldr	r2, [pc, #112]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004328:	4a19      	ldr	r2, [pc, #100]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d016      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f7fd fd19 	bl	8001d70 <HAL_GetTick>
 800433e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004340:	e00b      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004342:	f7fd fd15 	bl	8001d70 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004350:	4293      	cmp	r3, r2
 8004352:	d902      	bls.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	74fb      	strb	r3, [r7, #19]
            break;
 8004358:	e006      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800435a:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ec      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10c      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800436e:	4b08      	ldr	r3, [pc, #32]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004374:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800437e:	4904      	ldr	r1, [pc, #16]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004386:	e009      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	74bb      	strb	r3, [r7, #18]
 800438c:	e006      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000
 8004394:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800439c:	7c7b      	ldrb	r3, [r7, #17]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d105      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a2:	4b9e      	ldr	r3, [pc, #632]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a6:	4a9d      	ldr	r2, [pc, #628]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ba:	4b98      	ldr	r3, [pc, #608]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c0:	f023 0203 	bic.w	r2, r3, #3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c8:	4994      	ldr	r1, [pc, #592]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043dc:	4b8f      	ldr	r3, [pc, #572]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e2:	f023 020c 	bic.w	r2, r3, #12
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ea:	498c      	ldr	r1, [pc, #560]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043fe:	4b87      	ldr	r3, [pc, #540]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004404:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	4983      	ldr	r1, [pc, #524]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004420:	4b7e      	ldr	r3, [pc, #504]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004426:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442e:	497b      	ldr	r1, [pc, #492]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004442:	4b76      	ldr	r3, [pc, #472]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004448:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004450:	4972      	ldr	r1, [pc, #456]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004464:	4b6d      	ldr	r3, [pc, #436]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004472:	496a      	ldr	r1, [pc, #424]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004486:	4b65      	ldr	r3, [pc, #404]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004494:	4961      	ldr	r1, [pc, #388]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044a8:	4b5c      	ldr	r3, [pc, #368]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b6:	4959      	ldr	r1, [pc, #356]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ca:	4b54      	ldr	r3, [pc, #336]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d8:	4950      	ldr	r1, [pc, #320]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044ec:	4b4b      	ldr	r3, [pc, #300]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fa:	4948      	ldr	r1, [pc, #288]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800450e:	4b43      	ldr	r3, [pc, #268]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451c:	493f      	ldr	r1, [pc, #252]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d028      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004530:	4b3a      	ldr	r3, [pc, #232]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004536:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800453e:	4937      	ldr	r1, [pc, #220]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800454a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800454e:	d106      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004550:	4b32      	ldr	r3, [pc, #200]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a31      	ldr	r2, [pc, #196]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800455a:	60d3      	str	r3, [r2, #12]
 800455c:	e011      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004562:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004566:	d10c      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	2101      	movs	r1, #1
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fe36 	bl	80051e0 <RCCEx_PLLSAI1_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800457e:	7cfb      	ldrb	r3, [r7, #19]
 8004580:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d028      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800458e:	4b23      	ldr	r3, [pc, #140]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004594:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459c:	491f      	ldr	r1, [pc, #124]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045ac:	d106      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ae:	4b1b      	ldr	r3, [pc, #108]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	4a1a      	ldr	r2, [pc, #104]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045b8:	60d3      	str	r3, [r2, #12]
 80045ba:	e011      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045c4:	d10c      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3304      	adds	r3, #4
 80045ca:	2101      	movs	r1, #1
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fe07 	bl	80051e0 <RCCEx_PLLSAI1_Config>
 80045d2:	4603      	mov	r3, r0
 80045d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045d6:	7cfb      	ldrb	r3, [r7, #19]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d02b      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045ec:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fa:	4908      	ldr	r1, [pc, #32]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800460a:	d109      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800460c:	4b03      	ldr	r3, [pc, #12]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a02      	ldr	r2, [pc, #8]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004616:	60d3      	str	r3, [r2, #12]
 8004618:	e014      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800461a:	bf00      	nop
 800461c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004624:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004628:	d10c      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	2101      	movs	r1, #1
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fdd5 	bl	80051e0 <RCCEx_PLLSAI1_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02f      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004650:	4b2b      	ldr	r3, [pc, #172]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004656:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800465e:	4928      	ldr	r1, [pc, #160]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800466a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800466e:	d10d      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	2102      	movs	r1, #2
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fdb2 	bl	80051e0 <RCCEx_PLLSAI1_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d014      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004686:	7cfb      	ldrb	r3, [r7, #19]
 8004688:	74bb      	strb	r3, [r7, #18]
 800468a:	e011      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004694:	d10c      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3320      	adds	r3, #32
 800469a:	2102      	movs	r1, #2
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fe93 	bl	80053c8 <RCCEx_PLLSAI2_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046a6:	7cfb      	ldrb	r3, [r7, #19]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046ac:	7cfb      	ldrb	r3, [r7, #19]
 80046ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046bc:	4b10      	ldr	r3, [pc, #64]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046ca:	490d      	ldr	r1, [pc, #52]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00b      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046de:	4b08      	ldr	r3, [pc, #32]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ee:	4904      	ldr	r1, [pc, #16]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40021000 	.word	0x40021000

08004704 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004716:	d13e      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004718:	4bb2      	ldr	r3, [pc, #712]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004722:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800472a:	d028      	beq.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004732:	f200 8542 	bhi.w	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800473c:	d005      	beq.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004744:	d00e      	beq.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004746:	f000 bd38 	b.w	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800474a:	4ba6      	ldr	r3, [pc, #664]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b02      	cmp	r3, #2
 8004756:	f040 8532 	bne.w	80051be <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800475a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800475e:	61fb      	str	r3, [r7, #28]
      break;
 8004760:	f000 bd2d 	b.w	80051be <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004764:	4b9f      	ldr	r3, [pc, #636]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b02      	cmp	r3, #2
 8004770:	f040 8527 	bne.w	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004774:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004778:	61fb      	str	r3, [r7, #28]
      break;
 800477a:	f000 bd22 	b.w	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800477e:	4b99      	ldr	r3, [pc, #612]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800478a:	f040 851c 	bne.w	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800478e:	4b96      	ldr	r3, [pc, #600]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004790:	61fb      	str	r3, [r7, #28]
      break;
 8004792:	f000 bd18 	b.w	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004796:	4b93      	ldr	r3, [pc, #588]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d036      	beq.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d840      	bhi.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d003      	beq.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d020      	beq.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80047b8:	e039      	b.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80047ba:	4b8a      	ldr	r3, [pc, #552]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d116      	bne.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80047c6:	4b87      	ldr	r3, [pc, #540]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80047d2:	4b84      	ldr	r3, [pc, #528]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	091b      	lsrs	r3, r3, #4
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	e005      	b.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80047de:	4b81      	ldr	r3, [pc, #516]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80047e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047e4:	0a1b      	lsrs	r3, r3, #8
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	4a80      	ldr	r2, [pc, #512]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80047ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80047f2:	e01f      	b.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]
      break;
 80047f8:	e01c      	b.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047fa:	4b7a      	ldr	r3, [pc, #488]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004806:	d102      	bne.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004808:	4b79      	ldr	r3, [pc, #484]	@ (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800480a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800480c:	e012      	b.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
      break;
 8004812:	e00f      	b.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004814:	4b73      	ldr	r3, [pc, #460]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004820:	d102      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004822:	4b74      	ldr	r3, [pc, #464]	@ (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004824:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004826:	e005      	b.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	61bb      	str	r3, [r7, #24]
      break;
 800482c:	e002      	b.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	61bb      	str	r3, [r7, #24]
      break;
 8004832:	bf00      	nop
    }

    switch(PeriphClk)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800483a:	f000 80dd 	beq.w	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004844:	f200 84c1 	bhi.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800484e:	f000 80d3 	beq.w	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004858:	f200 84b7 	bhi.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004862:	f000 835f 	beq.w	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800486c:	f200 84ad 	bhi.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004876:	f000 847e 	beq.w	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004880:	f200 84a3 	bhi.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800488a:	f000 82cd 	beq.w	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004894:	f200 8499 	bhi.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800489e:	f000 80ab 	beq.w	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048a8:	f200 848f 	bhi.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b2:	f000 8090 	beq.w	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048bc:	f200 8485 	bhi.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048c6:	d07f      	beq.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ce:	f200 847c 	bhi.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d8:	f000 8403 	beq.w	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e2:	f200 8472 	bhi.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ec:	f000 83af 	beq.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048f6:	f200 8468 	bhi.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004900:	f000 8379 	beq.w	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800490a:	f200 845e 	bhi.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b80      	cmp	r3, #128	@ 0x80
 8004912:	f000 8344 	beq.w	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b80      	cmp	r3, #128	@ 0x80
 800491a:	f200 8456 	bhi.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b20      	cmp	r3, #32
 8004922:	d84b      	bhi.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 844f 	beq.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3b01      	subs	r3, #1
 8004930:	2b1f      	cmp	r3, #31
 8004932:	f200 844a 	bhi.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004936:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004b25 	.word	0x08004b25
 8004940:	08004b93 	.word	0x08004b93
 8004944:	080051cb 	.word	0x080051cb
 8004948:	08004c27 	.word	0x08004c27
 800494c:	080051cb 	.word	0x080051cb
 8004950:	080051cb 	.word	0x080051cb
 8004954:	080051cb 	.word	0x080051cb
 8004958:	08004cad 	.word	0x08004cad
 800495c:	080051cb 	.word	0x080051cb
 8004960:	080051cb 	.word	0x080051cb
 8004964:	080051cb 	.word	0x080051cb
 8004968:	080051cb 	.word	0x080051cb
 800496c:	080051cb 	.word	0x080051cb
 8004970:	080051cb 	.word	0x080051cb
 8004974:	080051cb 	.word	0x080051cb
 8004978:	08004d25 	.word	0x08004d25
 800497c:	080051cb 	.word	0x080051cb
 8004980:	080051cb 	.word	0x080051cb
 8004984:	080051cb 	.word	0x080051cb
 8004988:	080051cb 	.word	0x080051cb
 800498c:	080051cb 	.word	0x080051cb
 8004990:	080051cb 	.word	0x080051cb
 8004994:	080051cb 	.word	0x080051cb
 8004998:	080051cb 	.word	0x080051cb
 800499c:	080051cb 	.word	0x080051cb
 80049a0:	080051cb 	.word	0x080051cb
 80049a4:	080051cb 	.word	0x080051cb
 80049a8:	080051cb 	.word	0x080051cb
 80049ac:	080051cb 	.word	0x080051cb
 80049b0:	080051cb 	.word	0x080051cb
 80049b4:	080051cb 	.word	0x080051cb
 80049b8:	08004da7 	.word	0x08004da7
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b40      	cmp	r3, #64	@ 0x40
 80049c0:	f000 82c1 	beq.w	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80049c4:	f000 bc01 	b.w	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80049c8:	69b9      	ldr	r1, [r7, #24]
 80049ca:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80049ce:	f000 fdd9 	bl	8005584 <RCCEx_GetSAIxPeriphCLKFreq>
 80049d2:	61f8      	str	r0, [r7, #28]
      break;
 80049d4:	e3fa      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80049d6:	69b9      	ldr	r1, [r7, #24]
 80049d8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80049dc:	f000 fdd2 	bl	8005584 <RCCEx_GetSAIxPeriphCLKFreq>
 80049e0:	61f8      	str	r0, [r7, #28]
      break;
 80049e2:	e3f3      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80049e4:	40021000 	.word	0x40021000
 80049e8:	0003d090 	.word	0x0003d090
 80049ec:	0800c974 	.word	0x0800c974
 80049f0:	00f42400 	.word	0x00f42400
 80049f4:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80049f8:	4ba9      	ldr	r3, [pc, #676]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fe:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004a0a:	d00c      	beq.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004a12:	d87f      	bhi.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a1a:	d04e      	beq.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a22:	d01d      	beq.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004a24:	e076      	b.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004a26:	4b9e      	ldr	r3, [pc, #632]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d172      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004a32:	4b9b      	ldr	r3, [pc, #620]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8004a3e:	4b98      	ldr	r3, [pc, #608]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	091b      	lsrs	r3, r3, #4
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	e005      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8004a4a:	4b95      	ldr	r3, [pc, #596]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	4a93      	ldr	r2, [pc, #588]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5c:	61fb      	str	r3, [r7, #28]
          break;
 8004a5e:	e05b      	b.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004a60:	4b8f      	ldr	r3, [pc, #572]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a6c:	d156      	bne.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004a6e:	4b8c      	ldr	r3, [pc, #560]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a7a:	d14f      	bne.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a7c:	4b88      	ldr	r3, [pc, #544]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	0a1b      	lsrs	r3, r3, #8
 8004a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a86:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	fb03 f202 	mul.w	r2, r3, r2
 8004a90:	4b83      	ldr	r3, [pc, #524]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004aa2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	0d5b      	lsrs	r3, r3, #21
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	3301      	adds	r3, #1
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	61fb      	str	r3, [r7, #28]
          break;
 8004ab8:	e030      	b.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004aba:	4b79      	ldr	r3, [pc, #484]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ac6:	d12b      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004ac8:	4b75      	ldr	r3, [pc, #468]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ad0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ad4:	d124      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004ad6:	4b72      	ldr	r3, [pc, #456]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ae0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	fb03 f202 	mul.w	r2, r3, r2
 8004aea:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	3301      	adds	r3, #1
 8004af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004afc:	4b68      	ldr	r3, [pc, #416]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	0d5b      	lsrs	r3, r3, #21
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	3301      	adds	r3, #1
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b10:	61fb      	str	r3, [r7, #28]
          break;
 8004b12:	e005      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8004b14:	bf00      	nop
 8004b16:	e359      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b18:	bf00      	nop
 8004b1a:	e357      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b1c:	bf00      	nop
 8004b1e:	e355      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b20:	bf00      	nop
        break;
 8004b22:	e353      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004b24:	4b5e      	ldr	r3, [pc, #376]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d827      	bhi.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8004b36:	a201      	add	r2, pc, #4	@ (adr r2, 8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b4d 	.word	0x08004b4d
 8004b40:	08004b55 	.word	0x08004b55
 8004b44:	08004b5d 	.word	0x08004b5d
 8004b48:	08004b71 	.word	0x08004b71
          frequency = HAL_RCC_GetPCLK2Freq();
 8004b4c:	f7ff fa48 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8004b50:	61f8      	str	r0, [r7, #28]
          break;
 8004b52:	e01d      	b.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b54:	f7ff f996 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8004b58:	61f8      	str	r0, [r7, #28]
          break;
 8004b5a:	e019      	b.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b5c:	4b50      	ldr	r3, [pc, #320]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b68:	d10f      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8004b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004b6c:	61fb      	str	r3, [r7, #28]
          break;
 8004b6e:	e00c      	b.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b70:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8004b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b82:	61fb      	str	r3, [r7, #28]
          break;
 8004b84:	e003      	b.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8004b86:	bf00      	nop
 8004b88:	e320      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b8a:	bf00      	nop
 8004b8c:	e31e      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b8e:	bf00      	nop
        break;
 8004b90:	e31c      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004b92:	4b43      	ldr	r3, [pc, #268]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b0c      	cmp	r3, #12
 8004ba2:	d83a      	bhi.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004be1 	.word	0x08004be1
 8004bb0:	08004c1b 	.word	0x08004c1b
 8004bb4:	08004c1b 	.word	0x08004c1b
 8004bb8:	08004c1b 	.word	0x08004c1b
 8004bbc:	08004be9 	.word	0x08004be9
 8004bc0:	08004c1b 	.word	0x08004c1b
 8004bc4:	08004c1b 	.word	0x08004c1b
 8004bc8:	08004c1b 	.word	0x08004c1b
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004c1b 	.word	0x08004c1b
 8004bd4:	08004c1b 	.word	0x08004c1b
 8004bd8:	08004c1b 	.word	0x08004c1b
 8004bdc:	08004c05 	.word	0x08004c05
          frequency = HAL_RCC_GetPCLK1Freq();
 8004be0:	f7ff f9e8 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8004be4:	61f8      	str	r0, [r7, #28]
          break;
 8004be6:	e01d      	b.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8004be8:	f7ff f94c 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8004bec:	61f8      	str	r0, [r7, #28]
          break;
 8004bee:	e019      	b.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bfc:	d10f      	bne.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8004bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004c00:	61fb      	str	r3, [r7, #28]
          break;
 8004c02:	e00c      	b.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c04:	4b26      	ldr	r3, [pc, #152]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d107      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8004c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c16:	61fb      	str	r3, [r7, #28]
          break;
 8004c18:	e003      	b.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8004c1a:	bf00      	nop
 8004c1c:	e2d6      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c1e:	bf00      	nop
 8004c20:	e2d4      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c22:	bf00      	nop
        break;
 8004c24:	e2d2      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004c26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b30      	cmp	r3, #48	@ 0x30
 8004c36:	d021      	beq.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2b30      	cmp	r3, #48	@ 0x30
 8004c3c:	d829      	bhi.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d011      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d823      	bhi.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d004      	beq.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8004c56:	e01c      	b.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7ff f9ac 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	61f8      	str	r0, [r7, #28]
          break;
 8004c5e:	e01d      	b.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c60:	f7ff f910 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8004c64:	61f8      	str	r0, [r7, #28]
          break;
 8004c66:	e019      	b.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c68:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c74:	d10f      	bne.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8004c76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004c78:	61fb      	str	r3, [r7, #28]
          break;
 8004c7a:	e00c      	b.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c7c:	4b08      	ldr	r3, [pc, #32]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d107      	bne.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c8e:	61fb      	str	r3, [r7, #28]
          break;
 8004c90:	e003      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8004c92:	bf00      	nop
 8004c94:	e29a      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c96:	bf00      	nop
 8004c98:	e298      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c9a:	bf00      	nop
        break;
 8004c9c:	e296      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	0800c974 	.word	0x0800c974
 8004ca8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004cac:	4b9b      	ldr	r3, [pc, #620]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cbc:	d021      	beq.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cc2:	d829      	bhi.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	2b80      	cmp	r3, #128	@ 0x80
 8004cc8:	d011      	beq.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b80      	cmp	r3, #128	@ 0x80
 8004cce:	d823      	bhi.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b40      	cmp	r3, #64	@ 0x40
 8004cda:	d004      	beq.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004cdc:	e01c      	b.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cde:	f7ff f969 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8004ce2:	61f8      	str	r0, [r7, #28]
          break;
 8004ce4:	e01d      	b.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ce6:	f7ff f8cd 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8004cea:	61f8      	str	r0, [r7, #28]
          break;
 8004cec:	e019      	b.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cee:	4b8b      	ldr	r3, [pc, #556]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cfa:	d10f      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8004cfc:	4b88      	ldr	r3, [pc, #544]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004cfe:	61fb      	str	r3, [r7, #28]
          break;
 8004d00:	e00c      	b.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d02:	4b86      	ldr	r3, [pc, #536]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d107      	bne.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8004d10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d14:	61fb      	str	r3, [r7, #28]
          break;
 8004d16:	e003      	b.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8004d18:	bf00      	nop
 8004d1a:	e257      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d1c:	bf00      	nop
 8004d1e:	e255      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d20:	bf00      	nop
        break;
 8004d22:	e253      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004d24:	4b7d      	ldr	r3, [pc, #500]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d2e:	613b      	str	r3, [r7, #16]
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d36:	d025      	beq.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d3e:	d82c      	bhi.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d46:	d013      	beq.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d4e:	d824      	bhi.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d004      	beq.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d5c:	d004      	beq.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8004d5e:	e01c      	b.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d60:	f7ff f928 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8004d64:	61f8      	str	r0, [r7, #28]
          break;
 8004d66:	e01d      	b.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d68:	f7ff f88c 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8004d6c:	61f8      	str	r0, [r7, #28]
          break;
 8004d6e:	e019      	b.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d70:	4b6a      	ldr	r3, [pc, #424]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d7c:	d10f      	bne.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8004d7e:	4b68      	ldr	r3, [pc, #416]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004d80:	61fb      	str	r3, [r7, #28]
          break;
 8004d82:	e00c      	b.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d84:	4b65      	ldr	r3, [pc, #404]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d107      	bne.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8004d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d96:	61fb      	str	r3, [r7, #28]
          break;
 8004d98:	e003      	b.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004d9a:	bf00      	nop
 8004d9c:	e216      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d9e:	bf00      	nop
 8004da0:	e214      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004da2:	bf00      	nop
        break;
 8004da4:	e212      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004da6:	4b5d      	ldr	r3, [pc, #372]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004db8:	d025      	beq.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004dc0:	d82c      	bhi.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dc8:	d013      	beq.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dd0:	d824      	bhi.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dde:	d004      	beq.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8004de0:	e01c      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004de2:	f7ff f8e7 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8004de6:	61f8      	str	r0, [r7, #28]
          break;
 8004de8:	e01d      	b.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8004dea:	f7ff f84b 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8004dee:	61f8      	str	r0, [r7, #28]
          break;
 8004df0:	e019      	b.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004df2:	4b4a      	ldr	r3, [pc, #296]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dfe:	d10f      	bne.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8004e00:	4b47      	ldr	r3, [pc, #284]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004e02:	61fb      	str	r3, [r7, #28]
          break;
 8004e04:	e00c      	b.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e06:	4b45      	ldr	r3, [pc, #276]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d107      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004e14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e18:	61fb      	str	r3, [r7, #28]
          break;
 8004e1a:	e003      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8004e1c:	bf00      	nop
 8004e1e:	e1d5      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e20:	bf00      	nop
 8004e22:	e1d3      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e24:	bf00      	nop
        break;
 8004e26:	e1d1      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004e28:	4b3c      	ldr	r3, [pc, #240]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e3a:	d00c      	beq.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e42:	d864      	bhi.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e4a:	d008      	beq.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e52:	d030      	beq.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004e54:	e05b      	b.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e56:	f7ff f815 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8004e5a:	61f8      	str	r0, [r7, #28]
          break;
 8004e5c:	e05c      	b.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e6a:	d152      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d04c      	beq.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004e78:	4b28      	ldr	r3, [pc, #160]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e82:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	fb03 f202 	mul.w	r2, r3, r2
 8004e8c:	4b23      	ldr	r3, [pc, #140]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	091b      	lsrs	r3, r3, #4
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	3301      	adds	r3, #1
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	0e5b      	lsrs	r3, r3, #25
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb2:	61fb      	str	r3, [r7, #28]
          break;
 8004eb4:	e02d      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004eb6:	4b19      	ldr	r3, [pc, #100]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ec2:	d128      	bne.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004ec4:	4b15      	ldr	r3, [pc, #84]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d022      	beq.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004ed0:	4b12      	ldr	r3, [pc, #72]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	0a1b      	lsrs	r3, r3, #8
 8004ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eda:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	fb03 f202 	mul.w	r2, r3, r2
 8004ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	3301      	adds	r3, #1
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004ef6:	4b09      	ldr	r3, [pc, #36]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	0e5b      	lsrs	r3, r3, #25
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	3301      	adds	r3, #1
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0a:	61fb      	str	r3, [r7, #28]
          break;
 8004f0c:	e003      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8004f0e:	bf00      	nop
 8004f10:	e15c      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f12:	bf00      	nop
 8004f14:	e15a      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f16:	bf00      	nop
        break;
 8004f18:	e158      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004f24:	4b9d      	ldr	r3, [pc, #628]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f2e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d103      	bne.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004f36:	f7ff f853 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8004f3a:	61f8      	str	r0, [r7, #28]
        break;
 8004f3c:	e146      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f3e:	f7fe ffa1 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8004f42:	61f8      	str	r0, [r7, #28]
        break;
 8004f44:	e142      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004f46:	4b95      	ldr	r3, [pc, #596]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f58:	d013      	beq.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f60:	d819      	bhi.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f6e:	d004      	beq.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004f70:	e011      	b.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f72:	f7ff f81f 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8004f76:	61f8      	str	r0, [r7, #28]
          break;
 8004f78:	e010      	b.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f7a:	f7fe ff83 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8004f7e:	61f8      	str	r0, [r7, #28]
          break;
 8004f80:	e00c      	b.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f82:	4b86      	ldr	r3, [pc, #536]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f8e:	d104      	bne.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004f90:	4b83      	ldr	r3, [pc, #524]	@ (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004f92:	61fb      	str	r3, [r7, #28]
          break;
 8004f94:	e001      	b.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004f96:	bf00      	nop
 8004f98:	e118      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f9a:	bf00      	nop
        break;
 8004f9c:	e116      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004f9e:	4b7f      	ldr	r3, [pc, #508]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fb0:	d013      	beq.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fb8:	d819      	bhi.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d004      	beq.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fc6:	d004      	beq.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004fc8:	e011      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fca:	f7fe fff3 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8004fce:	61f8      	str	r0, [r7, #28]
          break;
 8004fd0:	e010      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004fd2:	f7fe ff57 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8004fd6:	61f8      	str	r0, [r7, #28]
          break;
 8004fd8:	e00c      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fda:	4b70      	ldr	r3, [pc, #448]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fe6:	d104      	bne.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8004fe8:	4b6d      	ldr	r3, [pc, #436]	@ (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004fea:	61fb      	str	r3, [r7, #28]
          break;
 8004fec:	e001      	b.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8004fee:	bf00      	nop
 8004ff0:	e0ec      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004ff2:	bf00      	nop
        break;
 8004ff4:	e0ea      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ff6:	4b69      	ldr	r3, [pc, #420]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005008:	d013      	beq.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005010:	d819      	bhi.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d004      	beq.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800501e:	d004      	beq.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8005020:	e011      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005022:	f7fe ffc7 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8005026:	61f8      	str	r0, [r7, #28]
          break;
 8005028:	e010      	b.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800502a:	f7fe ff2b 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 800502e:	61f8      	str	r0, [r7, #28]
          break;
 8005030:	e00c      	b.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005032:	4b5a      	ldr	r3, [pc, #360]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800503a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800503e:	d104      	bne.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8005040:	4b57      	ldr	r3, [pc, #348]	@ (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005042:	61fb      	str	r3, [r7, #28]
          break;
 8005044:	e001      	b.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8005046:	bf00      	nop
 8005048:	e0c0      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800504a:	bf00      	nop
        break;
 800504c:	e0be      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800504e:	4b53      	ldr	r3, [pc, #332]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005054:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005060:	d02c      	beq.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005068:	d833      	bhi.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005070:	d01a      	beq.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005078:	d82b      	bhi.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d004      	beq.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005086:	d004      	beq.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8005088:	e023      	b.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800508a:	f7fe ff93 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 800508e:	61f8      	str	r0, [r7, #28]
          break;
 8005090:	e026      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005092:	4b42      	ldr	r3, [pc, #264]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b02      	cmp	r3, #2
 800509e:	d11a      	bne.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80050a0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80050a4:	61fb      	str	r3, [r7, #28]
          break;
 80050a6:	e016      	b.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050a8:	4b3c      	ldr	r3, [pc, #240]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050b4:	d111      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80050b6:	4b3a      	ldr	r3, [pc, #232]	@ (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80050b8:	61fb      	str	r3, [r7, #28]
          break;
 80050ba:	e00e      	b.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050bc:	4b37      	ldr	r3, [pc, #220]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d109      	bne.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80050ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ce:	61fb      	str	r3, [r7, #28]
          break;
 80050d0:	e005      	b.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80050d2:	bf00      	nop
 80050d4:	e07a      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050d6:	bf00      	nop
 80050d8:	e078      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050da:	bf00      	nop
 80050dc:	e076      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050de:	bf00      	nop
        break;
 80050e0:	e074      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80050e2:	4b2e      	ldr	r3, [pc, #184]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050f4:	d02c      	beq.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050fc:	d833      	bhi.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005104:	d01a      	beq.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800510c:	d82b      	bhi.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800511a:	d004      	beq.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 800511c:	e023      	b.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 800511e:	f7fe ff49 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8005122:	61f8      	str	r0, [r7, #28]
          break;
 8005124:	e026      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005126:	4b1d      	ldr	r3, [pc, #116]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b02      	cmp	r3, #2
 8005132:	d11a      	bne.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8005134:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005138:	61fb      	str	r3, [r7, #28]
          break;
 800513a:	e016      	b.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800513c:	4b17      	ldr	r3, [pc, #92]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005148:	d111      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800514a:	4b15      	ldr	r3, [pc, #84]	@ (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800514c:	61fb      	str	r3, [r7, #28]
          break;
 800514e:	e00e      	b.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005150:	4b12      	ldr	r3, [pc, #72]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b02      	cmp	r3, #2
 800515c:	d109      	bne.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800515e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005162:	61fb      	str	r3, [r7, #28]
          break;
 8005164:	e005      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8005166:	bf00      	nop
 8005168:	e030      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800516a:	bf00      	nop
 800516c:	e02e      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800516e:	bf00      	nop
 8005170:	e02c      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005172:	bf00      	nop
        break;
 8005174:	e02a      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005176:	4b09      	ldr	r3, [pc, #36]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d004      	beq.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518e:	d009      	beq.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8005190:	e012      	b.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005192:	f7fe ff0f 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8005196:	61f8      	str	r0, [r7, #28]
          break;
 8005198:	e00e      	b.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800519a:	bf00      	nop
 800519c:	40021000 	.word	0x40021000
 80051a0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051a4:	4b0c      	ldr	r3, [pc, #48]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051b0:	d101      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80051b2:	4b0a      	ldr	r3, [pc, #40]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80051b4:	61fb      	str	r3, [r7, #28]
          break;
 80051b6:	bf00      	nop
        break;
 80051b8:	e008      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80051ba:	bf00      	nop
 80051bc:	e006      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80051be:	bf00      	nop
 80051c0:	e004      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80051c2:	bf00      	nop
 80051c4:	e002      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80051c6:	bf00      	nop
 80051c8:	e000      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80051ca:	bf00      	nop
    }
  }

  return(frequency);
 80051cc:	69fb      	ldr	r3, [r7, #28]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40021000 	.word	0x40021000
 80051dc:	00f42400 	.word	0x00f42400

080051e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051ee:	4b75      	ldr	r3, [pc, #468]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d018      	beq.n	800522c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80051fa:	4b72      	ldr	r3, [pc, #456]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f003 0203 	and.w	r2, r3, #3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d10d      	bne.n	8005226 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
       ||
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005212:	4b6c      	ldr	r3, [pc, #432]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	091b      	lsrs	r3, r3, #4
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
       ||
 8005222:	429a      	cmp	r2, r3
 8005224:	d047      	beq.n	80052b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
 800522a:	e044      	b.n	80052b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b03      	cmp	r3, #3
 8005232:	d018      	beq.n	8005266 <RCCEx_PLLSAI1_Config+0x86>
 8005234:	2b03      	cmp	r3, #3
 8005236:	d825      	bhi.n	8005284 <RCCEx_PLLSAI1_Config+0xa4>
 8005238:	2b01      	cmp	r3, #1
 800523a:	d002      	beq.n	8005242 <RCCEx_PLLSAI1_Config+0x62>
 800523c:	2b02      	cmp	r3, #2
 800523e:	d009      	beq.n	8005254 <RCCEx_PLLSAI1_Config+0x74>
 8005240:	e020      	b.n	8005284 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005242:	4b60      	ldr	r3, [pc, #384]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d11d      	bne.n	800528a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005252:	e01a      	b.n	800528a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005254:	4b5b      	ldr	r3, [pc, #364]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800525c:	2b00      	cmp	r3, #0
 800525e:	d116      	bne.n	800528e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005264:	e013      	b.n	800528e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005266:	4b57      	ldr	r3, [pc, #348]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005272:	4b54      	ldr	r3, [pc, #336]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005282:	e006      	b.n	8005292 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
      break;
 8005288:	e004      	b.n	8005294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800528a:	bf00      	nop
 800528c:	e002      	b.n	8005294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800528e:	bf00      	nop
 8005290:	e000      	b.n	8005294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005292:	bf00      	nop
    }

    if(status == HAL_OK)
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10d      	bne.n	80052b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800529a:	4b4a      	ldr	r3, [pc, #296]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6819      	ldr	r1, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	430b      	orrs	r3, r1
 80052b0:	4944      	ldr	r1, [pc, #272]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d17d      	bne.n	80053b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052bc:	4b41      	ldr	r3, [pc, #260]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a40      	ldr	r2, [pc, #256]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c8:	f7fc fd52 	bl	8001d70 <HAL_GetTick>
 80052cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052ce:	e009      	b.n	80052e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052d0:	f7fc fd4e 	bl	8001d70 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d902      	bls.n	80052e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	73fb      	strb	r3, [r7, #15]
        break;
 80052e2:	e005      	b.n	80052f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052e4:	4b37      	ldr	r3, [pc, #220]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1ef      	bne.n	80052d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d160      	bne.n	80053b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d111      	bne.n	8005320 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052fc:	4b31      	ldr	r3, [pc, #196]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6892      	ldr	r2, [r2, #8]
 800530c:	0211      	lsls	r1, r2, #8
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	68d2      	ldr	r2, [r2, #12]
 8005312:	0912      	lsrs	r2, r2, #4
 8005314:	0452      	lsls	r2, r2, #17
 8005316:	430a      	orrs	r2, r1
 8005318:	492a      	ldr	r1, [pc, #168]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800531a:	4313      	orrs	r3, r2
 800531c:	610b      	str	r3, [r1, #16]
 800531e:	e027      	b.n	8005370 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d112      	bne.n	800534c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005326:	4b27      	ldr	r3, [pc, #156]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800532e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6892      	ldr	r2, [r2, #8]
 8005336:	0211      	lsls	r1, r2, #8
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6912      	ldr	r2, [r2, #16]
 800533c:	0852      	lsrs	r2, r2, #1
 800533e:	3a01      	subs	r2, #1
 8005340:	0552      	lsls	r2, r2, #21
 8005342:	430a      	orrs	r2, r1
 8005344:	491f      	ldr	r1, [pc, #124]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005346:	4313      	orrs	r3, r2
 8005348:	610b      	str	r3, [r1, #16]
 800534a:	e011      	b.n	8005370 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800534c:	4b1d      	ldr	r3, [pc, #116]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005354:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6892      	ldr	r2, [r2, #8]
 800535c:	0211      	lsls	r1, r2, #8
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6952      	ldr	r2, [r2, #20]
 8005362:	0852      	lsrs	r2, r2, #1
 8005364:	3a01      	subs	r2, #1
 8005366:	0652      	lsls	r2, r2, #25
 8005368:	430a      	orrs	r2, r1
 800536a:	4916      	ldr	r1, [pc, #88]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800536c:	4313      	orrs	r3, r2
 800536e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005370:	4b14      	ldr	r3, [pc, #80]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a13      	ldr	r2, [pc, #76]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005376:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800537a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537c:	f7fc fcf8 	bl	8001d70 <HAL_GetTick>
 8005380:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005382:	e009      	b.n	8005398 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005384:	f7fc fcf4 	bl	8001d70 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d902      	bls.n	8005398 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	73fb      	strb	r3, [r7, #15]
          break;
 8005396:	e005      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005398:	4b0a      	ldr	r3, [pc, #40]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0ef      	beq.n	8005384 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053aa:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	4904      	ldr	r1, [pc, #16]	@ (80053c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40021000 	.word	0x40021000

080053c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d018      	beq.n	8005414 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80053e2:	4b67      	ldr	r3, [pc, #412]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0203 	and.w	r2, r3, #3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d10d      	bne.n	800540e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
       ||
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80053fa:	4b61      	ldr	r3, [pc, #388]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	091b      	lsrs	r3, r3, #4
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
       ||
 800540a:	429a      	cmp	r2, r3
 800540c:	d047      	beq.n	800549e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	73fb      	strb	r3, [r7, #15]
 8005412:	e044      	b.n	800549e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b03      	cmp	r3, #3
 800541a:	d018      	beq.n	800544e <RCCEx_PLLSAI2_Config+0x86>
 800541c:	2b03      	cmp	r3, #3
 800541e:	d825      	bhi.n	800546c <RCCEx_PLLSAI2_Config+0xa4>
 8005420:	2b01      	cmp	r3, #1
 8005422:	d002      	beq.n	800542a <RCCEx_PLLSAI2_Config+0x62>
 8005424:	2b02      	cmp	r3, #2
 8005426:	d009      	beq.n	800543c <RCCEx_PLLSAI2_Config+0x74>
 8005428:	e020      	b.n	800546c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800542a:	4b55      	ldr	r3, [pc, #340]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d11d      	bne.n	8005472 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800543a:	e01a      	b.n	8005472 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800543c:	4b50      	ldr	r3, [pc, #320]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005444:	2b00      	cmp	r3, #0
 8005446:	d116      	bne.n	8005476 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800544c:	e013      	b.n	8005476 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800544e:	4b4c      	ldr	r3, [pc, #304]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10f      	bne.n	800547a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800545a:	4b49      	ldr	r3, [pc, #292]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800546a:	e006      	b.n	800547a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	73fb      	strb	r3, [r7, #15]
      break;
 8005470:	e004      	b.n	800547c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005472:	bf00      	nop
 8005474:	e002      	b.n	800547c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005476:	bf00      	nop
 8005478:	e000      	b.n	800547c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800547a:	bf00      	nop
    }

    if(status == HAL_OK)
 800547c:	7bfb      	ldrb	r3, [r7, #15]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10d      	bne.n	800549e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005482:	4b3f      	ldr	r3, [pc, #252]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6819      	ldr	r1, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	3b01      	subs	r3, #1
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	430b      	orrs	r3, r1
 8005498:	4939      	ldr	r1, [pc, #228]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800549a:	4313      	orrs	r3, r2
 800549c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d167      	bne.n	8005574 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054a4:	4b36      	ldr	r3, [pc, #216]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a35      	ldr	r2, [pc, #212]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b0:	f7fc fc5e 	bl	8001d70 <HAL_GetTick>
 80054b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054b6:	e009      	b.n	80054cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054b8:	f7fc fc5a 	bl	8001d70 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d902      	bls.n	80054cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	73fb      	strb	r3, [r7, #15]
        break;
 80054ca:	e005      	b.n	80054d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1ef      	bne.n	80054b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d14a      	bne.n	8005574 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d111      	bne.n	8005508 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054e4:	4b26      	ldr	r3, [pc, #152]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80054ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6892      	ldr	r2, [r2, #8]
 80054f4:	0211      	lsls	r1, r2, #8
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	68d2      	ldr	r2, [r2, #12]
 80054fa:	0912      	lsrs	r2, r2, #4
 80054fc:	0452      	lsls	r2, r2, #17
 80054fe:	430a      	orrs	r2, r1
 8005500:	491f      	ldr	r1, [pc, #124]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005502:	4313      	orrs	r3, r2
 8005504:	614b      	str	r3, [r1, #20]
 8005506:	e011      	b.n	800552c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005508:	4b1d      	ldr	r3, [pc, #116]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005510:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6892      	ldr	r2, [r2, #8]
 8005518:	0211      	lsls	r1, r2, #8
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6912      	ldr	r2, [r2, #16]
 800551e:	0852      	lsrs	r2, r2, #1
 8005520:	3a01      	subs	r2, #1
 8005522:	0652      	lsls	r2, r2, #25
 8005524:	430a      	orrs	r2, r1
 8005526:	4916      	ldr	r1, [pc, #88]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005528:	4313      	orrs	r3, r2
 800552a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800552c:	4b14      	ldr	r3, [pc, #80]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a13      	ldr	r2, [pc, #76]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005536:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005538:	f7fc fc1a 	bl	8001d70 <HAL_GetTick>
 800553c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800553e:	e009      	b.n	8005554 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005540:	f7fc fc16 	bl	8001d70 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d902      	bls.n	8005554 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	73fb      	strb	r3, [r7, #15]
          break;
 8005552:	e005      	b.n	8005560 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005554:	4b0a      	ldr	r3, [pc, #40]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0ef      	beq.n	8005540 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005566:	4b06      	ldr	r3, [pc, #24]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005568:	695a      	ldr	r2, [r3, #20]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	4904      	ldr	r1, [pc, #16]	@ (8005580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005570:	4313      	orrs	r3, r2
 8005572:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40021000 	.word	0x40021000

08005584 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005584:	b480      	push	{r7}
 8005586:	b089      	sub	sp, #36	@ 0x24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a0:	d10c      	bne.n	80055bc <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80055a2:	4b6e      	ldr	r3, [pc, #440]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80055ac:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055b4:	d112      	bne.n	80055dc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80055b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	e00f      	b.n	80055dc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055c2:	d10b      	bne.n	80055dc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80055c4:	4b65      	ldr	r3, [pc, #404]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ca:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80055ce:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055d6:	d101      	bne.n	80055dc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80055d8:	4b61      	ldr	r3, [pc, #388]	@ (8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80055da:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f040 80b4 	bne.w	800574c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055ee:	d003      	beq.n	80055f8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055f6:	d135      	bne.n	8005664 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80055f8:	4b58      	ldr	r3, [pc, #352]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005600:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005604:	f040 80a1 	bne.w	800574a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005608:	4b54      	ldr	r3, [pc, #336]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 809a 	beq.w	800574a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005616:	4b51      	ldr	r3, [pc, #324]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	091b      	lsrs	r3, r3, #4
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	3301      	adds	r3, #1
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	fbb2 f3f3 	udiv	r3, r2, r3
 8005628:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800562a:	4b4c      	ldr	r3, [pc, #304]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	0a1b      	lsrs	r3, r3, #8
 8005630:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005634:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800563c:	4b47      	ldr	r3, [pc, #284]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005648:	2311      	movs	r3, #17
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	e001      	b.n	8005652 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800564e:	2307      	movs	r3, #7
 8005650:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	fb03 f202 	mul.w	r2, r3, r2
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005660:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005662:	e072      	b.n	800574a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d133      	bne.n	80056d2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800566a:	4b3c      	ldr	r3, [pc, #240]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005672:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005676:	d169      	bne.n	800574c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005678:	4b38      	ldr	r3, [pc, #224]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d063      	beq.n	800574c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005684:	4b35      	ldr	r3, [pc, #212]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	091b      	lsrs	r3, r3, #4
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	3301      	adds	r3, #1
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	fbb2 f3f3 	udiv	r3, r2, r3
 8005696:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005698:	4b30      	ldr	r3, [pc, #192]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	0a1b      	lsrs	r3, r3, #8
 800569e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056a2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80056aa:	4b2c      	ldr	r3, [pc, #176]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80056b6:	2311      	movs	r3, #17
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	e001      	b.n	80056c0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80056bc:	2307      	movs	r3, #7
 80056be:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	fb03 f202 	mul.w	r2, r3, r2
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	e03c      	b.n	800574c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056d8:	d003      	beq.n	80056e2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056e0:	d134      	bne.n	800574c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80056e2:	4b1e      	ldr	r3, [pc, #120]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056ee:	d12d      	bne.n	800574c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80056f0:	4b1a      	ldr	r3, [pc, #104]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d027      	beq.n	800574c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80056fc:	4b17      	ldr	r3, [pc, #92]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	3301      	adds	r3, #1
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	fbb2 f3f3 	udiv	r3, r2, r3
 800570e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005710:	4b12      	ldr	r3, [pc, #72]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	0a1b      	lsrs	r3, r3, #8
 8005716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800571a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005722:	4b0e      	ldr	r3, [pc, #56]	@ (800575c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800572e:	2311      	movs	r3, #17
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	e001      	b.n	8005738 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005734:	2307      	movs	r3, #7
 8005736:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	fb03 f202 	mul.w	r2, r3, r2
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	fbb2 f3f3 	udiv	r3, r2, r3
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	e000      	b.n	800574c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800574a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800574c:	69fb      	ldr	r3, [r7, #28]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3724      	adds	r7, #36	@ 0x24
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40021000 	.word	0x40021000
 8005760:	001fff68 	.word	0x001fff68

08005764 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d904      	bls.n	8005782 <HAL_SAI_InitProtocol+0x1e>
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	3b03      	subs	r3, #3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d812      	bhi.n	80057a6 <HAL_SAI_InitProtocol+0x42>
 8005780:	e008      	b.n	8005794 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 faff 	bl	8005d8c <SAI_InitI2S>
 800578e:	4603      	mov	r3, r0
 8005790:	75fb      	strb	r3, [r7, #23]
      break;
 8005792:	e00b      	b.n	80057ac <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fba8 	bl	8005ef0 <SAI_InitPCM>
 80057a0:	4603      	mov	r3, r0
 80057a2:	75fb      	strb	r3, [r7, #23]
      break;
 80057a4:	e002      	b.n	80057ac <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	75fb      	strb	r3, [r7, #23]
      break;
 80057aa:	bf00      	nop
  }

  if (status == HAL_OK)
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d104      	bne.n	80057bc <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 f808 	bl	80057c8 <HAL_SAI_Init>
 80057b8:	4603      	mov	r3, r0
 80057ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e155      	b.n	8005a86 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fb fe66 	bl	80014c0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fc35 	bl	8006064 <SAI_Disable>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e140      	b.n	8005a86 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d00c      	beq.n	800582e <HAL_SAI_Init+0x66>
 8005814:	2b02      	cmp	r3, #2
 8005816:	d80d      	bhi.n	8005834 <HAL_SAI_Init+0x6c>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <HAL_SAI_Init+0x5a>
 800581c:	2b01      	cmp	r3, #1
 800581e:	d003      	beq.n	8005828 <HAL_SAI_Init+0x60>
 8005820:	e008      	b.n	8005834 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	61fb      	str	r3, [r7, #28]
      break;
 8005826:	e008      	b.n	800583a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005828:	2310      	movs	r3, #16
 800582a:	61fb      	str	r3, [r7, #28]
      break;
 800582c:	e005      	b.n	800583a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800582e:	2320      	movs	r3, #32
 8005830:	61fb      	str	r3, [r7, #28]
      break;
 8005832:	e002      	b.n	800583a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	61fb      	str	r3, [r7, #28]
      break;
 8005838:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	2b03      	cmp	r3, #3
 8005840:	d81d      	bhi.n	800587e <HAL_SAI_Init+0xb6>
 8005842:	a201      	add	r2, pc, #4	@ (adr r2, 8005848 <HAL_SAI_Init+0x80>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	08005859 	.word	0x08005859
 800584c:	0800585f 	.word	0x0800585f
 8005850:	08005867 	.word	0x08005867
 8005854:	0800586f 	.word	0x0800586f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
      break;
 800585c:	e012      	b.n	8005884 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800585e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005862:	617b      	str	r3, [r7, #20]
      break;
 8005864:	e00e      	b.n	8005884 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005866:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800586a:	617b      	str	r3, [r7, #20]
      break;
 800586c:	e00a      	b.n	8005884 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800586e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005872:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f043 0301 	orr.w	r3, r3, #1
 800587a:	61fb      	str	r3, [r7, #28]
      break;
 800587c:	e002      	b.n	8005884 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
      break;
 8005882:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a81      	ldr	r2, [pc, #516]	@ (8005a90 <HAL_SAI_Init+0x2c8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <HAL_SAI_Init+0xd0>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a80      	ldr	r2, [pc, #512]	@ (8005a94 <HAL_SAI_Init+0x2cc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d103      	bne.n	80058a0 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005898:	4a7f      	ldr	r2, [pc, #508]	@ (8005a98 <HAL_SAI_Init+0x2d0>)
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	e002      	b.n	80058a6 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80058a0:	4a7e      	ldr	r2, [pc, #504]	@ (8005a9c <HAL_SAI_Init+0x2d4>)
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d041      	beq.n	8005932 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a77      	ldr	r2, [pc, #476]	@ (8005a90 <HAL_SAI_Init+0x2c8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d004      	beq.n	80058c2 <HAL_SAI_Init+0xfa>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a75      	ldr	r2, [pc, #468]	@ (8005a94 <HAL_SAI_Init+0x2cc>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d105      	bne.n	80058ce <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80058c2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80058c6:	f7fe ff1d 	bl	8004704 <HAL_RCCEx_GetPeriphCLKFreq>
 80058ca:	6138      	str	r0, [r7, #16]
 80058cc:	e004      	b.n	80058d8 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80058ce:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80058d2:	f7fe ff17 	bl	8004704 <HAL_RCCEx_GetPeriphCLKFreq>
 80058d6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	461a      	mov	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	025b      	lsls	r3, r3, #9
 80058ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ee:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a6b      	ldr	r2, [pc, #428]	@ (8005aa0 <HAL_SAI_Init+0x2d8>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	08da      	lsrs	r2, r3, #3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80058fe:	68f9      	ldr	r1, [r7, #12]
 8005900:	4b67      	ldr	r3, [pc, #412]	@ (8005aa0 <HAL_SAI_Init+0x2d8>)
 8005902:	fba3 2301 	umull	r2, r3, r3, r1
 8005906:	08da      	lsrs	r2, r3, #3
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	1aca      	subs	r2, r1, r3
 8005912:	2a08      	cmp	r2, #8
 8005914:	d904      	bls.n	8005920 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005924:	2b04      	cmp	r3, #4
 8005926:	d104      	bne.n	8005932 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	085a      	lsrs	r2, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_SAI_Init+0x17a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d109      	bne.n	8005956 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_SAI_Init+0x186>
 800594a:	2300      	movs	r3, #0
 800594c:	e001      	b.n	8005952 <HAL_SAI_Init+0x18a>
 800594e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	e008      	b.n	8005968 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d102      	bne.n	8005964 <HAL_SAI_Init+0x19c>
 800595e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005962:	e000      	b.n	8005966 <HAL_SAI_Init+0x19e>
 8005964:	2300      	movs	r3, #0
 8005966:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6819      	ldr	r1, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	4b4c      	ldr	r3, [pc, #304]	@ (8005aa4 <HAL_SAI_Init+0x2dc>)
 8005974:	400b      	ands	r3, r1
 8005976:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6819      	ldr	r1, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005986:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800598c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005992:	431a      	orrs	r2, r3
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 80059a0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80059ac:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	051b      	lsls	r3, r3, #20
 80059b4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80059cc:	f023 030f 	bic.w	r3, r3, #15
 80059d0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6859      	ldr	r1, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6899      	ldr	r1, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4b2b      	ldr	r3, [pc, #172]	@ (8005aa8 <HAL_SAI_Init+0x2e0>)
 80059fc:	400b      	ands	r3, r1
 80059fe:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6899      	ldr	r1, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005a10:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8005a16:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8005a1c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a22:	3b01      	subs	r3, #1
 8005a24:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005a26:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68d9      	ldr	r1, [r3, #12]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005a3e:	400b      	ands	r3, r1
 8005a40:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68d9      	ldr	r1, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a50:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a56:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005a58:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40015404 	.word	0x40015404
 8005a94:	40015424 	.word	0x40015424
 8005a98:	40015400 	.word	0x40015400
 8005a9c:	40015800 	.word	0x40015800
 8005aa0:	cccccccd 	.word	0xcccccccd
 8005aa4:	ff05c010 	.word	0xff05c010
 8005aa8:	fff88000 	.word	0xfff88000

08005aac <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8005aba:	f7fc f959 	bl	8001d70 <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_SAI_Transmit_DMA+0x20>
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e093      	b.n	8005bf8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	f040 808c 	bne.w	8005bf6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_SAI_Transmit_DMA+0x40>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e085      	b.n	8005bf8 <HAL_SAI_Transmit_DMA+0x14c>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	88fa      	ldrh	r2, [r7, #6]
 8005afe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	88fa      	ldrh	r2, [r7, #6]
 8005b06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2212      	movs	r2, #18
 8005b16:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b1e:	4a38      	ldr	r2, [pc, #224]	@ (8005c00 <HAL_SAI_Transmit_DMA+0x154>)
 8005b20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b26:	4a37      	ldr	r2, [pc, #220]	@ (8005c04 <HAL_SAI_Transmit_DMA+0x158>)
 8005b28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b2e:	4a36      	ldr	r2, [pc, #216]	@ (8005c08 <HAL_SAI_Transmit_DMA+0x15c>)
 8005b30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b36:	2200      	movs	r2, #0
 8005b38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b42:	4619      	mov	r1, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	331c      	adds	r3, #28
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005b52:	f7fc fab3 	bl	80020bc <HAL_DMA_Start_IT>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e047      	b.n	8005bf8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005b68:	2100      	movs	r1, #0
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fa42 	bl	8005ff4 <SAI_InterruptFlag>
 8005b70:	4601      	mov	r1, r0
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005b8e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005b90:	e015      	b.n	8005bbe <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005b92:	f7fc f8ed 	bl	8001d70 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ba0:	d90d      	bls.n	8005bbe <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e01c      	b.n	8005bf8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0e2      	beq.n	8005b92 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d107      	bne.n	8005bea <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005be8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e000      	b.n	8005bf8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8005bf6:	2302      	movs	r3, #2
  }
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	08006137 	.word	0x08006137
 8005c04:	080060d9 	.word	0x080060d9
 8005c08:	080061cd 	.word	0x080061cd

08005c0c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	4613      	mov	r3, r2
 8005c18:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_SAI_Receive_DMA+0x1a>
 8005c20:	88fb      	ldrh	r3, [r7, #6]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e074      	b.n	8005d14 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d16d      	bne.n	8005d12 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_SAI_Receive_DMA+0x38>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e067      	b.n	8005d14 <HAL_SAI_Receive_DMA+0x108>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	88fa      	ldrh	r2, [r7, #6]
 8005c56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	88fa      	ldrh	r2, [r7, #6]
 8005c5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2222      	movs	r2, #34	@ 0x22
 8005c6e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c76:	4a29      	ldr	r2, [pc, #164]	@ (8005d1c <HAL_SAI_Receive_DMA+0x110>)
 8005c78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c7e:	4a28      	ldr	r2, [pc, #160]	@ (8005d20 <HAL_SAI_Receive_DMA+0x114>)
 8005c80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c86:	4a27      	ldr	r2, [pc, #156]	@ (8005d24 <HAL_SAI_Receive_DMA+0x118>)
 8005c88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8e:	2200      	movs	r2, #0
 8005c90:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	331c      	adds	r3, #28
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005caa:	f7fc fa07 	bl	80020bc <HAL_DMA_Start_IT>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e029      	b.n	8005d14 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f996 	bl	8005ff4 <SAI_InterruptFlag>
 8005cc8:	4601      	mov	r1, r0
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005ce6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d107      	bne.n	8005d06 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005d04:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e000      	b.n	8005d14 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005d12:	2302      	movs	r3, #2
  }
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	080061b1 	.word	0x080061b1
 8005d20:	08006153 	.word	0x08006153
 8005d24:	080061cd 	.word	0x080061cd

08005d28 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <SAI_InitI2S+0x2e>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d103      	bne.n	8005dc2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005dc0:	e002      	b.n	8005dc8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005dce:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dd6:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e077      	b.n	8005ee2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d107      	bne.n	8005e08 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005e04:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e06:	e006      	b.n	8005e16 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005e0e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d84f      	bhi.n	8005ebc <SAI_InitI2S+0x130>
 8005e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e24 <SAI_InitI2S+0x98>)
 8005e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e22:	bf00      	nop
 8005e24:	08005e35 	.word	0x08005e35
 8005e28:	08005e57 	.word	0x08005e57
 8005e2c:	08005e79 	.word	0x08005e79
 8005e30:	08005e9b 	.word	0x08005e9b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2280      	movs	r2, #128	@ 0x80
 8005e38:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	085b      	lsrs	r3, r3, #1
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	085b      	lsrs	r3, r3, #1
 8005e48:	011a      	lsls	r2, r3, #4
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2240      	movs	r2, #64	@ 0x40
 8005e52:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005e54:	e035      	b.n	8005ec2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2280      	movs	r2, #128	@ 0x80
 8005e5a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	019a      	lsls	r2, r3, #6
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	085b      	lsrs	r3, r3, #1
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2280      	movs	r2, #128	@ 0x80
 8005e74:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005e76:	e024      	b.n	8005ec2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	22c0      	movs	r2, #192	@ 0xc0
 8005e7c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	085b      	lsrs	r3, r3, #1
 8005e82:	019a      	lsls	r2, r3, #6
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	085b      	lsrs	r3, r3, #1
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2280      	movs	r2, #128	@ 0x80
 8005e96:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005e98:	e013      	b.n	8005ec2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	22e0      	movs	r2, #224	@ 0xe0
 8005e9e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	085b      	lsrs	r3, r3, #1
 8005ea4:	019a      	lsls	r2, r3, #6
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	085b      	lsrs	r3, r3, #1
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2280      	movs	r2, #128	@ 0x80
 8005eb8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005eba:	e002      	b.n	8005ec2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8005ec0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d10b      	bne.n	8005ee0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d102      	bne.n	8005ed4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d102      	bne.n	8005ee0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2208      	movs	r2, #8
 8005ede:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop

08005ef0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <SAI_InitPCM+0x2e>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d103      	bne.n	8005f26 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005f24:	e002      	b.n	8005f2c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005f38:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005f40:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f54:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d103      	bne.n	8005f64 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f62:	e002      	b.n	8005f6a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	220d      	movs	r2, #13
 8005f68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d837      	bhi.n	8005fe0 <SAI_InitPCM+0xf0>
 8005f70:	a201      	add	r2, pc, #4	@ (adr r2, 8005f78 <SAI_InitPCM+0x88>)
 8005f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f76:	bf00      	nop
 8005f78:	08005f89 	.word	0x08005f89
 8005f7c:	08005f9f 	.word	0x08005f9f
 8005f80:	08005fb5 	.word	0x08005fb5
 8005f84:	08005fcb 	.word	0x08005fcb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2280      	movs	r2, #128	@ 0x80
 8005f8c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	011a      	lsls	r2, r3, #4
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2240      	movs	r2, #64	@ 0x40
 8005f9a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005f9c:	e023      	b.n	8005fe6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2280      	movs	r2, #128	@ 0x80
 8005fa2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2280      	movs	r2, #128	@ 0x80
 8005fb0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005fb2:	e018      	b.n	8005fe6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	22c0      	movs	r2, #192	@ 0xc0
 8005fb8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2280      	movs	r2, #128	@ 0x80
 8005fc6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005fc8:	e00d      	b.n	8005fe6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	22e0      	movs	r2, #224	@ 0xe0
 8005fce:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2280      	movs	r2, #128	@ 0x80
 8005fdc:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005fde:	e002      	b.n	8005fe6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe4:	bf00      	nop
  }

  return status;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006000:	2301      	movs	r3, #1
 8006002:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d103      	bne.n	8006012 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f043 0308 	orr.w	r3, r3, #8
 8006010:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006016:	2b08      	cmp	r3, #8
 8006018:	d10b      	bne.n	8006032 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800601e:	2b03      	cmp	r3, #3
 8006020:	d003      	beq.n	800602a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d103      	bne.n	8006032 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f043 0310 	orr.w	r3, r3, #16
 8006030:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b03      	cmp	r3, #3
 8006038:	d003      	beq.n	8006042 <SAI_InterruptFlag+0x4e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b02      	cmp	r3, #2
 8006040:	d104      	bne.n	800604c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e003      	b.n	8006054 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f043 0304 	orr.w	r3, r3, #4
 8006052:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006054:	68fb      	ldr	r3, [r7, #12]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800606c:	4b18      	ldr	r3, [pc, #96]	@ (80060d0 <SAI_Disable+0x6c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a18      	ldr	r2, [pc, #96]	@ (80060d4 <SAI_Disable+0x70>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	0b1b      	lsrs	r3, r3, #12
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800608e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800609c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	72fb      	strb	r3, [r7, #11]
      break;
 80060aa:	e009      	b.n	80060c0 <SAI_Disable+0x5c>
    }
    count--;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e7      	bne.n	8006090 <SAI_Disable+0x2c>

  return status;
 80060c0:	7afb      	ldrb	r3, [r7, #11]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	20000000 	.word	0x20000000
 80060d4:	95cbec1b 	.word	0x95cbec1b

080060d8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d01c      	beq.n	8006128 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006104:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006106:	2100      	movs	r1, #0
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7ff ff73 	bl	8005ff4 <SAI_InterruptFlag>
 800610e:	4603      	mov	r3, r0
 8006110:	43d9      	mvns	r1, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	400a      	ands	r2, r1
 800611e:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff fdfd 	bl	8005d28 <HAL_SAI_TxCpltCallback>
#endif
}
 800612e:	bf00      	nop
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006142:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff fdf9 	bl	8005d3c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615e:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	2b20      	cmp	r3, #32
 8006166:	d01c      	beq.n	80061a2 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006176:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006180:	2100      	movs	r1, #0
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff ff36 	bl	8005ff4 <SAI_InterruptFlag>
 8006188:	4603      	mov	r3, r0
 800618a:	43d9      	mvns	r1, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691a      	ldr	r2, [r3, #16]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	400a      	ands	r2, r1
 8006198:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff fdd4 	bl	8005d50 <HAL_SAI_RxCpltCallback>
#endif
}
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061bc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff fdd0 	bl	8005d64 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80061f8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff ff32 	bl	8006064 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7ff fdb1 	bl	8005d78 <HAL_SAI_ErrorCallback>
#endif
}
 8006216:	bf00      	nop
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e095      	b.n	800635c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	d108      	bne.n	800624a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006240:	d009      	beq.n	8006256 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	61da      	str	r2, [r3, #28]
 8006248:	e005      	b.n	8006256 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7fb fa37 	bl	80016e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800628c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006296:	d902      	bls.n	800629e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	e002      	b.n	80062a4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800629e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80062ac:	d007      	beq.n	80062be <HAL_SPI_Init+0xa0>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062b6:	d002      	beq.n	80062be <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	431a      	orrs	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006300:	ea42 0103 	orr.w	r1, r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	0c1b      	lsrs	r3, r3, #16
 800631a:	f003 0204 	and.w	r2, r3, #4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	f003 0310 	and.w	r3, r3, #16
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800633a:	ea42 0103 	orr.w	r1, r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	603b      	str	r3, [r7, #0]
 8006370:	4613      	mov	r3, r2
 8006372:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006374:	f7fb fcfc 	bl	8001d70 <HAL_GetTick>
 8006378:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800637a:	88fb      	ldrh	r3, [r7, #6]
 800637c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b01      	cmp	r3, #1
 8006388:	d001      	beq.n	800638e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800638a:	2302      	movs	r3, #2
 800638c:	e15c      	b.n	8006648 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <HAL_SPI_Transmit+0x36>
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e154      	b.n	8006648 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_SPI_Transmit+0x48>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e14d      	b.n	8006648 <HAL_SPI_Transmit+0x2e4>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2203      	movs	r2, #3
 80063b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	88fa      	ldrh	r2, [r7, #6]
 80063cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	88fa      	ldrh	r2, [r7, #6]
 80063d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063fe:	d10f      	bne.n	8006420 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800640e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800641e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642a:	2b40      	cmp	r3, #64	@ 0x40
 800642c:	d007      	beq.n	800643e <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800643c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006446:	d952      	bls.n	80064ee <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <HAL_SPI_Transmit+0xf2>
 8006450:	8b7b      	ldrh	r3, [r7, #26]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d145      	bne.n	80064e2 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645a:	881a      	ldrh	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006466:	1c9a      	adds	r2, r3, #2
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800647a:	e032      	b.n	80064e2 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b02      	cmp	r3, #2
 8006488:	d112      	bne.n	80064b0 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648e:	881a      	ldrh	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649a:	1c9a      	adds	r2, r3, #2
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064ae:	e018      	b.n	80064e2 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b0:	f7fb fc5e 	bl	8001d70 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d803      	bhi.n	80064c8 <HAL_SPI_Transmit+0x164>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064c6:	d102      	bne.n	80064ce <HAL_SPI_Transmit+0x16a>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e0b2      	b.n	8006648 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1c7      	bne.n	800647c <HAL_SPI_Transmit+0x118>
 80064ec:	e083      	b.n	80065f6 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <HAL_SPI_Transmit+0x198>
 80064f6:	8b7b      	ldrh	r3, [r7, #26]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d177      	bne.n	80065ec <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b01      	cmp	r3, #1
 8006504:	d912      	bls.n	800652c <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650a:	881a      	ldrh	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006516:	1c9a      	adds	r2, r3, #2
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006520:	b29b      	uxth	r3, r3
 8006522:	3b02      	subs	r3, #2
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800652a:	e05f      	b.n	80065ec <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	330c      	adds	r3, #12
 8006536:	7812      	ldrb	r2, [r2, #0]
 8006538:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006552:	e04b      	b.n	80065ec <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b02      	cmp	r3, #2
 8006560:	d12b      	bne.n	80065ba <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	d912      	bls.n	8006592 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006570:	881a      	ldrh	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657c:	1c9a      	adds	r2, r3, #2
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b02      	subs	r3, #2
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006590:	e02c      	b.n	80065ec <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	7812      	ldrb	r2, [r2, #0]
 800659e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80065b8:	e018      	b.n	80065ec <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ba:	f7fb fbd9 	bl	8001d70 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d803      	bhi.n	80065d2 <HAL_SPI_Transmit+0x26e>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065d0:	d102      	bne.n	80065d8 <HAL_SPI_Transmit+0x274>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d109      	bne.n	80065ec <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e02d      	b.n	8006648 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1ae      	bne.n	8006554 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065f6:	69fa      	ldr	r2, [r7, #28]
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 f946 	bl	800688c <SPI_EndRxTxTransaction>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006614:	2300      	movs	r3, #0
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e000      	b.n	8006648 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006646:	2300      	movs	r3, #0
  }
}
 8006648:	4618      	mov	r0, r3
 800664a:	3720      	adds	r7, #32
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006660:	f7fb fb86 	bl	8001d70 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006668:	1a9b      	subs	r3, r3, r2
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	4413      	add	r3, r2
 800666e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006670:	f7fb fb7e 	bl	8001d70 <HAL_GetTick>
 8006674:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006676:	4b39      	ldr	r3, [pc, #228]	@ (800675c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	015b      	lsls	r3, r3, #5
 800667c:	0d1b      	lsrs	r3, r3, #20
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	fb02 f303 	mul.w	r3, r2, r3
 8006684:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006686:	e054      	b.n	8006732 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800668e:	d050      	beq.n	8006732 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006690:	f7fb fb6e 	bl	8001d70 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	429a      	cmp	r2, r3
 800669e:	d902      	bls.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d13d      	bne.n	8006722 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066be:	d111      	bne.n	80066e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066c8:	d004      	beq.n	80066d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066d2:	d107      	bne.n	80066e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066ec:	d10f      	bne.n	800670e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800670c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e017      	b.n	8006752 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	3b01      	subs	r3, #1
 8006730:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4013      	ands	r3, r2
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	429a      	cmp	r2, r3
 8006740:	bf0c      	ite	eq
 8006742:	2301      	moveq	r3, #1
 8006744:	2300      	movne	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	429a      	cmp	r2, r3
 800674e:	d19b      	bne.n	8006688 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20000000 	.word	0x20000000

08006760 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08a      	sub	sp, #40	@ 0x28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006772:	f7fb fafd 	bl	8001d70 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677a:	1a9b      	subs	r3, r3, r2
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	4413      	add	r3, r2
 8006780:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006782:	f7fb faf5 	bl	8001d70 <HAL_GetTick>
 8006786:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	330c      	adds	r3, #12
 800678e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006790:	4b3d      	ldr	r3, [pc, #244]	@ (8006888 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	4613      	mov	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	00da      	lsls	r2, r3, #3
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	0d1b      	lsrs	r3, r3, #20
 80067a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a2:	fb02 f303 	mul.w	r3, r2, r3
 80067a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80067a8:	e060      	b.n	800686c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80067b0:	d107      	bne.n	80067c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067c8:	d050      	beq.n	800686c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067ca:	f7fb fad1 	bl	8001d70 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d902      	bls.n	80067e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d13d      	bne.n	800685c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067f8:	d111      	bne.n	800681e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006802:	d004      	beq.n	800680e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800680c:	d107      	bne.n	800681e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800681c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006826:	d10f      	bne.n	8006848 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006846:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e010      	b.n	800687e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	3b01      	subs	r3, #1
 800686a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	4013      	ands	r3, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	429a      	cmp	r2, r3
 800687a:	d196      	bne.n	80067aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3728      	adds	r7, #40	@ 0x28
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000000 	.word	0x20000000

0800688c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af02      	add	r7, sp, #8
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2200      	movs	r2, #0
 80068a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f7ff ff5b 	bl	8006760 <SPI_WaitFifoStateUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d007      	beq.n	80068c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068b4:	f043 0220 	orr.w	r2, r3, #32
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e027      	b.n	8006910 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2200      	movs	r2, #0
 80068c8:	2180      	movs	r1, #128	@ 0x80
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff fec0 	bl	8006650 <SPI_WaitFlagStateUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d007      	beq.n	80068e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068da:	f043 0220 	orr.w	r2, r3, #32
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e014      	b.n	8006910 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff ff34 	bl	8006760 <SPI_WaitFifoStateUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006902:	f043 0220 	orr.w	r2, r3, #32
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e000      	b.n	8006910 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e054      	b.n	80069d4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d111      	bne.n	800695a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fc36 	bl	80071b0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a23      	ldr	r2, [pc, #140]	@ (80069dc <HAL_TIM_Base_Init+0xc4>)
 8006950:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	3304      	adds	r3, #4
 800696a:	4619      	mov	r1, r3
 800696c:	4610      	mov	r0, r2
 800696e:	f000 fb79 	bl	8007064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	080069e1 	.word	0x080069e1

080069e0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d001      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e04f      	b.n	8006aac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a23      	ldr	r2, [pc, #140]	@ (8006ab8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01d      	beq.n	8006a6a <HAL_TIM_Base_Start_IT+0x76>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a36:	d018      	beq.n	8006a6a <HAL_TIM_Base_Start_IT+0x76>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8006abc <HAL_TIM_Base_Start_IT+0xc8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d013      	beq.n	8006a6a <HAL_TIM_Base_Start_IT+0x76>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00e      	beq.n	8006a6a <HAL_TIM_Base_Start_IT+0x76>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1c      	ldr	r2, [pc, #112]	@ (8006ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d009      	beq.n	8006a6a <HAL_TIM_Base_Start_IT+0x76>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d004      	beq.n	8006a6a <HAL_TIM_Base_Start_IT+0x76>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a19      	ldr	r2, [pc, #100]	@ (8006acc <HAL_TIM_Base_Start_IT+0xd8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d115      	bne.n	8006a96 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	4b17      	ldr	r3, [pc, #92]	@ (8006ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b06      	cmp	r3, #6
 8006a7a:	d015      	beq.n	8006aa8 <HAL_TIM_Base_Start_IT+0xb4>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a82:	d011      	beq.n	8006aa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a94:	e008      	b.n	8006aa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f042 0201 	orr.w	r2, r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	e000      	b.n	8006aaa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	40012c00 	.word	0x40012c00
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	40013400 	.word	0x40013400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	00010007 	.word	0x00010007

08006ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d026      	beq.n	8006b44 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d021      	beq.n	8006b44 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0202 	mvn.w	r2, #2
 8006b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	4798      	blx	r3
 8006b28:	e009      	b.n	8006b3e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d026      	beq.n	8006b9c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d021      	beq.n	8006b9c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0204 	mvn.w	r2, #4
 8006b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2202      	movs	r2, #2
 8006b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
 8006b80:	e009      	b.n	8006b96 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d026      	beq.n	8006bf4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d021      	beq.n	8006bf4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0208 	mvn.w	r2, #8
 8006bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d005      	beq.n	8006bda <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4798      	blx	r3
 8006bd8:	e009      	b.n	8006bee <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f003 0310 	and.w	r3, r3, #16
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d026      	beq.n	8006c4c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f003 0310 	and.w	r3, r3, #16
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d021      	beq.n	8006c4c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f06f 0210 	mvn.w	r2, #16
 8006c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2208      	movs	r2, #8
 8006c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	4798      	blx	r3
 8006c30:	e009      	b.n	8006c46 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00e      	beq.n	8006c74 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d009      	beq.n	8006c74 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0201 	mvn.w	r2, #1
 8006c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d104      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00e      	beq.n	8006ca6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d009      	beq.n	8006ca6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00e      	beq.n	8006cce <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d009      	beq.n	8006cce <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00e      	beq.n	8006cf6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00e      	beq.n	8006d1e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f003 0320 	and.w	r3, r3, #32
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d009      	beq.n	8006d1e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f06f 0220 	mvn.w	r2, #32
 8006d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d1e:	bf00      	nop
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b083      	sub	sp, #12
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
	...

08006ddc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	460b      	mov	r3, r1
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e12e      	b.n	8007056 <HAL_TIM_RegisterCallback+0x27a>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	f040 80c1 	bne.w	8006f88 <HAL_TIM_RegisterCallback+0x1ac>
  {
    switch (CallbackID)
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	2b1b      	cmp	r3, #27
 8006e0a:	f200 80ba 	bhi.w	8006f82 <HAL_TIM_RegisterCallback+0x1a6>
 8006e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e14 <HAL_TIM_RegisterCallback+0x38>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006e85 	.word	0x08006e85
 8006e18:	08006e8d 	.word	0x08006e8d
 8006e1c:	08006e95 	.word	0x08006e95
 8006e20:	08006e9d 	.word	0x08006e9d
 8006e24:	08006ea5 	.word	0x08006ea5
 8006e28:	08006ead 	.word	0x08006ead
 8006e2c:	08006eb5 	.word	0x08006eb5
 8006e30:	08006ebd 	.word	0x08006ebd
 8006e34:	08006ec5 	.word	0x08006ec5
 8006e38:	08006ecd 	.word	0x08006ecd
 8006e3c:	08006ed5 	.word	0x08006ed5
 8006e40:	08006edd 	.word	0x08006edd
 8006e44:	08006ee5 	.word	0x08006ee5
 8006e48:	08006eed 	.word	0x08006eed
 8006e4c:	08006ef7 	.word	0x08006ef7
 8006e50:	08006f01 	.word	0x08006f01
 8006e54:	08006f0b 	.word	0x08006f0b
 8006e58:	08006f15 	.word	0x08006f15
 8006e5c:	08006f1f 	.word	0x08006f1f
 8006e60:	08006f29 	.word	0x08006f29
 8006e64:	08006f33 	.word	0x08006f33
 8006e68:	08006f3d 	.word	0x08006f3d
 8006e6c:	08006f47 	.word	0x08006f47
 8006e70:	08006f51 	.word	0x08006f51
 8006e74:	08006f5b 	.word	0x08006f5b
 8006e78:	08006f65 	.word	0x08006f65
 8006e7c:	08006f6f 	.word	0x08006f6f
 8006e80:	08006f79 	.word	0x08006f79
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006e8a:	e0e3      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8006e92:	e0df      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006e9a:	e0db      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006ea2:	e0d7      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006eaa:	e0d3      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8006eb2:	e0cf      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006eba:	e0cb      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006ec2:	e0c7      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006eca:	e0c3      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006ed2:	e0bf      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006eda:	e0bb      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006ee2:	e0b7      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006eea:	e0b3      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006ef4:	e0ae      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8006efe:	e0a9      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8006f08:	e0a4      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8006f12:	e09f      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8006f1c:	e09a      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8006f26:	e095      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8006f30:	e090      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8006f3a:	e08b      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8006f44:	e086      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8006f4e:	e081      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8006f58:	e07c      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8006f62:	e077      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8006f6c:	e072      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8006f76:	e06d      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8006f80:	e068      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	75fb      	strb	r3, [r7, #23]
        break;
 8006f86:	e065      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d15d      	bne.n	8007050 <HAL_TIM_RegisterCallback+0x274>
  {
    switch (CallbackID)
 8006f94:	7afb      	ldrb	r3, [r7, #11]
 8006f96:	2b0d      	cmp	r3, #13
 8006f98:	d857      	bhi.n	800704a <HAL_TIM_RegisterCallback+0x26e>
 8006f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa0 <HAL_TIM_RegisterCallback+0x1c4>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08006fd9 	.word	0x08006fd9
 8006fa4:	08006fe1 	.word	0x08006fe1
 8006fa8:	08006fe9 	.word	0x08006fe9
 8006fac:	08006ff1 	.word	0x08006ff1
 8006fb0:	08006ff9 	.word	0x08006ff9
 8006fb4:	08007001 	.word	0x08007001
 8006fb8:	08007009 	.word	0x08007009
 8006fbc:	08007011 	.word	0x08007011
 8006fc0:	08007019 	.word	0x08007019
 8006fc4:	08007021 	.word	0x08007021
 8006fc8:	08007029 	.word	0x08007029
 8006fcc:	08007031 	.word	0x08007031
 8006fd0:	08007039 	.word	0x08007039
 8006fd4:	08007041 	.word	0x08007041
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006fde:	e039      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8006fe6:	e035      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006fee:	e031      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006ff6:	e02d      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006ffe:	e029      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007006:	e025      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800700e:	e021      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007016:	e01d      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800701e:	e019      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007026:	e015      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800702e:	e011      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007036:	e00d      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800703e:	e009      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007048:	e004      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	75fb      	strb	r3, [r7, #23]
        break;
 800704e:	e001      	b.n	8007054 <HAL_TIM_RegisterCallback+0x278>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007054:	7dfb      	ldrb	r3, [r7, #23]
}
 8007056:	4618      	mov	r0, r3
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop

08007064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a46      	ldr	r2, [pc, #280]	@ (8007190 <TIM_Base_SetConfig+0x12c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d013      	beq.n	80070a4 <TIM_Base_SetConfig+0x40>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007082:	d00f      	beq.n	80070a4 <TIM_Base_SetConfig+0x40>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a43      	ldr	r2, [pc, #268]	@ (8007194 <TIM_Base_SetConfig+0x130>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d00b      	beq.n	80070a4 <TIM_Base_SetConfig+0x40>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a42      	ldr	r2, [pc, #264]	@ (8007198 <TIM_Base_SetConfig+0x134>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d007      	beq.n	80070a4 <TIM_Base_SetConfig+0x40>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a41      	ldr	r2, [pc, #260]	@ (800719c <TIM_Base_SetConfig+0x138>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d003      	beq.n	80070a4 <TIM_Base_SetConfig+0x40>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a40      	ldr	r2, [pc, #256]	@ (80071a0 <TIM_Base_SetConfig+0x13c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d108      	bne.n	80070b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a35      	ldr	r2, [pc, #212]	@ (8007190 <TIM_Base_SetConfig+0x12c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d01f      	beq.n	80070fe <TIM_Base_SetConfig+0x9a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070c4:	d01b      	beq.n	80070fe <TIM_Base_SetConfig+0x9a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a32      	ldr	r2, [pc, #200]	@ (8007194 <TIM_Base_SetConfig+0x130>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d017      	beq.n	80070fe <TIM_Base_SetConfig+0x9a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a31      	ldr	r2, [pc, #196]	@ (8007198 <TIM_Base_SetConfig+0x134>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d013      	beq.n	80070fe <TIM_Base_SetConfig+0x9a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a30      	ldr	r2, [pc, #192]	@ (800719c <TIM_Base_SetConfig+0x138>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00f      	beq.n	80070fe <TIM_Base_SetConfig+0x9a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a2f      	ldr	r2, [pc, #188]	@ (80071a0 <TIM_Base_SetConfig+0x13c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00b      	beq.n	80070fe <TIM_Base_SetConfig+0x9a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a2e      	ldr	r2, [pc, #184]	@ (80071a4 <TIM_Base_SetConfig+0x140>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d007      	beq.n	80070fe <TIM_Base_SetConfig+0x9a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a2d      	ldr	r2, [pc, #180]	@ (80071a8 <TIM_Base_SetConfig+0x144>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d003      	beq.n	80070fe <TIM_Base_SetConfig+0x9a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a2c      	ldr	r2, [pc, #176]	@ (80071ac <TIM_Base_SetConfig+0x148>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d108      	bne.n	8007110 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a16      	ldr	r2, [pc, #88]	@ (8007190 <TIM_Base_SetConfig+0x12c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00f      	beq.n	800715c <TIM_Base_SetConfig+0xf8>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a18      	ldr	r2, [pc, #96]	@ (80071a0 <TIM_Base_SetConfig+0x13c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d00b      	beq.n	800715c <TIM_Base_SetConfig+0xf8>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a17      	ldr	r2, [pc, #92]	@ (80071a4 <TIM_Base_SetConfig+0x140>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d007      	beq.n	800715c <TIM_Base_SetConfig+0xf8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a16      	ldr	r2, [pc, #88]	@ (80071a8 <TIM_Base_SetConfig+0x144>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_Base_SetConfig+0xf8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a15      	ldr	r2, [pc, #84]	@ (80071ac <TIM_Base_SetConfig+0x148>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d103      	bne.n	8007164 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b01      	cmp	r3, #1
 8007174:	d105      	bne.n	8007182 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f023 0201 	bic.w	r2, r3, #1
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	611a      	str	r2, [r3, #16]
  }
}
 8007182:	bf00      	nop
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40012c00 	.word	0x40012c00
 8007194:	40000400 	.word	0x40000400
 8007198:	40000800 	.word	0x40000800
 800719c:	40000c00 	.word	0x40000c00
 80071a0:	40013400 	.word	0x40013400
 80071a4:	40014000 	.word	0x40014000
 80071a8:	40014400 	.word	0x40014400
 80071ac:	40014800 	.word	0x40014800

080071b0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007234 <TIM_ResetCallback+0x84>)
 80071bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a1d      	ldr	r2, [pc, #116]	@ (8007238 <TIM_ResetCallback+0x88>)
 80071c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a1c      	ldr	r2, [pc, #112]	@ (800723c <TIM_ResetCallback+0x8c>)
 80071cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007240 <TIM_ResetCallback+0x90>)
 80071d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a1a      	ldr	r2, [pc, #104]	@ (8007244 <TIM_ResetCallback+0x94>)
 80071dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a19      	ldr	r2, [pc, #100]	@ (8007248 <TIM_ResetCallback+0x98>)
 80071e4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a18      	ldr	r2, [pc, #96]	@ (800724c <TIM_ResetCallback+0x9c>)
 80071ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a17      	ldr	r2, [pc, #92]	@ (8007250 <TIM_ResetCallback+0xa0>)
 80071f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a16      	ldr	r2, [pc, #88]	@ (8007254 <TIM_ResetCallback+0xa4>)
 80071fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a15      	ldr	r2, [pc, #84]	@ (8007258 <TIM_ResetCallback+0xa8>)
 8007204:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a14      	ldr	r2, [pc, #80]	@ (800725c <TIM_ResetCallback+0xac>)
 800720c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a13      	ldr	r2, [pc, #76]	@ (8007260 <TIM_ResetCallback+0xb0>)
 8007214:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a12      	ldr	r2, [pc, #72]	@ (8007264 <TIM_ResetCallback+0xb4>)
 800721c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a11      	ldr	r2, [pc, #68]	@ (8007268 <TIM_ResetCallback+0xb8>)
 8007224:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	080013d1 	.word	0x080013d1
 8007238:	08006d27 	.word	0x08006d27
 800723c:	08006d9f 	.word	0x08006d9f
 8007240:	08006db3 	.word	0x08006db3
 8007244:	08006d4f 	.word	0x08006d4f
 8007248:	08006d63 	.word	0x08006d63
 800724c:	08006d3b 	.word	0x08006d3b
 8007250:	08006d77 	.word	0x08006d77
 8007254:	08006d8b 	.word	0x08006d8b
 8007258:	08006dc7 	.word	0x08006dc7
 800725c:	0800726d 	.word	0x0800726d
 8007260:	08007281 	.word	0x08007281
 8007264:	08007295 	.word	0x08007295
 8007268:	080072a9 	.word	0x080072a9

0800726c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e040      	b.n	8007350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fa fc84 	bl	8001bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2224      	movs	r2, #36	@ 0x24
 80072e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0201 	bic.w	r2, r2, #1
 80072f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fedc 	bl	80080c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fc21 	bl	8007b50 <UART_SetConfig>
 800730e:	4603      	mov	r3, r0
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e01b      	b.n	8007350 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0201 	orr.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 ff5b 	bl	8008204 <UART_CheckIdleState>
 800734e:	4603      	mov	r3, r0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	@ 0x28
 800735c:	af02      	add	r7, sp, #8
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	603b      	str	r3, [r7, #0]
 8007364:	4613      	mov	r3, r2
 8007366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800736c:	2b20      	cmp	r3, #32
 800736e:	d177      	bne.n	8007460 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <HAL_UART_Transmit+0x24>
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e070      	b.n	8007462 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2221      	movs	r2, #33	@ 0x21
 800738c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800738e:	f7fa fcef 	bl	8001d70 <HAL_GetTick>
 8007392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	88fa      	ldrh	r2, [r7, #6]
 8007398:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	88fa      	ldrh	r2, [r7, #6]
 80073a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ac:	d108      	bne.n	80073c0 <HAL_UART_Transmit+0x68>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d104      	bne.n	80073c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	61bb      	str	r3, [r7, #24]
 80073be:	e003      	b.n	80073c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073c4:	2300      	movs	r3, #0
 80073c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073c8:	e02f      	b.n	800742a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2200      	movs	r2, #0
 80073d2:	2180      	movs	r1, #128	@ 0x80
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 ffbd 	bl	8008354 <UART_WaitOnFlagUntilTimeout>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d004      	beq.n	80073ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2220      	movs	r2, #32
 80073e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e03b      	b.n	8007462 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10b      	bne.n	8007408 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	881a      	ldrh	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073fc:	b292      	uxth	r2, r2
 80073fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	3302      	adds	r3, #2
 8007404:	61bb      	str	r3, [r7, #24]
 8007406:	e007      	b.n	8007418 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	781a      	ldrb	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	3301      	adds	r3, #1
 8007416:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800741e:	b29b      	uxth	r3, r3
 8007420:	3b01      	subs	r3, #1
 8007422:	b29a      	uxth	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1c9      	bne.n	80073ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2200      	movs	r2, #0
 800743e:	2140      	movs	r1, #64	@ 0x40
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 ff87 	bl	8008354 <UART_WaitOnFlagUntilTimeout>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2220      	movs	r2, #32
 8007450:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e005      	b.n	8007462 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2220      	movs	r2, #32
 800745a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	e000      	b.n	8007462 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007460:	2302      	movs	r3, #2
  }
}
 8007462:	4618      	mov	r0, r3
 8007464:	3720      	adds	r7, #32
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08a      	sub	sp, #40	@ 0x28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007480:	2b20      	cmp	r3, #32
 8007482:	d137      	bne.n	80074f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <HAL_UART_Receive_IT+0x24>
 800748a:	88fb      	ldrh	r3, [r7, #6]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e030      	b.n	80074f6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a18      	ldr	r2, [pc, #96]	@ (8007500 <HAL_UART_Receive_IT+0x94>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d01f      	beq.n	80074e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d018      	beq.n	80074e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	e853 3f00 	ldrex	r3, [r3]
 80074be:	613b      	str	r3, [r7, #16]
   return(result);
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d0:	623b      	str	r3, [r7, #32]
 80074d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	69f9      	ldr	r1, [r7, #28]
 80074d6:	6a3a      	ldr	r2, [r7, #32]
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e6      	bne.n	80074b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074e4:	88fb      	ldrh	r3, [r7, #6]
 80074e6:	461a      	mov	r2, r3
 80074e8:	68b9      	ldr	r1, [r7, #8]
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 ffa0 	bl	8008430 <UART_Start_Receive_IT>
 80074f0:	4603      	mov	r3, r0
 80074f2:	e000      	b.n	80074f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074f4:	2302      	movs	r3, #2
  }
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3728      	adds	r7, #40	@ 0x28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	40008000 	.word	0x40008000

08007504 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b0ba      	sub	sp, #232	@ 0xe8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800752a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800752e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007532:	4013      	ands	r3, r2
 8007534:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800753c:	2b00      	cmp	r3, #0
 800753e:	d115      	bne.n	800756c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007544:	f003 0320 	and.w	r3, r3, #32
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00f      	beq.n	800756c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800754c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d009      	beq.n	800756c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 82ca 	beq.w	8007af6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
      }
      return;
 800756a:	e2c4      	b.n	8007af6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800756c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8117 	beq.w	80077a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d106      	bne.n	8007590 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007582:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007586:	4b85      	ldr	r3, [pc, #532]	@ (800779c <HAL_UART_IRQHandler+0x298>)
 8007588:	4013      	ands	r3, r2
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 810a 	beq.w	80077a4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d011      	beq.n	80075c0 <HAL_UART_IRQHandler+0xbc>
 800759c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2201      	movs	r2, #1
 80075ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075b6:	f043 0201 	orr.w	r2, r3, #1
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d011      	beq.n	80075f0 <HAL_UART_IRQHandler+0xec>
 80075cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00b      	beq.n	80075f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2202      	movs	r2, #2
 80075de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075e6:	f043 0204 	orr.w	r2, r3, #4
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d011      	beq.n	8007620 <HAL_UART_IRQHandler+0x11c>
 80075fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2204      	movs	r2, #4
 800760e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007616:	f043 0202 	orr.w	r2, r3, #2
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b00      	cmp	r3, #0
 800762a:	d017      	beq.n	800765c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800762c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007630:	f003 0320 	and.w	r3, r3, #32
 8007634:	2b00      	cmp	r3, #0
 8007636:	d105      	bne.n	8007644 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800763c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2208      	movs	r2, #8
 800764a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007652:	f043 0208 	orr.w	r2, r3, #8
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800765c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007664:	2b00      	cmp	r3, #0
 8007666:	d012      	beq.n	800768e <HAL_UART_IRQHandler+0x18a>
 8007668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800766c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00c      	beq.n	800768e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800767c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007684:	f043 0220 	orr.w	r2, r3, #32
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 8230 	beq.w	8007afa <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800769a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800769e:	f003 0320 	and.w	r3, r3, #32
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00d      	beq.n	80076c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076aa:	f003 0320 	and.w	r3, r3, #32
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d007      	beq.n	80076c2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076d6:	2b40      	cmp	r3, #64	@ 0x40
 80076d8:	d005      	beq.n	80076e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d04f      	beq.n	8007786 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 ff68 	bl	80085bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f6:	2b40      	cmp	r3, #64	@ 0x40
 80076f8:	d141      	bne.n	800777e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007704:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007710:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007714:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007718:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3308      	adds	r3, #8
 8007722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007726:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800772a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800773e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1d9      	bne.n	80076fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800774a:	2b00      	cmp	r3, #0
 800774c:	d013      	beq.n	8007776 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007752:	4a13      	ldr	r2, [pc, #76]	@ (80077a0 <HAL_UART_IRQHandler+0x29c>)
 8007754:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800775a:	4618      	mov	r0, r3
 800775c:	f7fa fd4c 	bl	80021f8 <HAL_DMA_Abort_IT>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d017      	beq.n	8007796 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800776a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007770:	4610      	mov	r0, r2
 8007772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	e00f      	b.n	8007796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9d4 	bl	8007b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777c:	e00b      	b.n	8007796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f9d0 	bl	8007b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007784:	e007      	b.n	8007796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f9cc 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007794:	e1b1      	b.n	8007afa <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007796:	bf00      	nop
    return;
 8007798:	e1af      	b.n	8007afa <HAL_UART_IRQHandler+0x5f6>
 800779a:	bf00      	nop
 800779c:	04000120 	.word	0x04000120
 80077a0:	08008685 	.word	0x08008685

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	f040 816a 	bne.w	8007a82 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077b2:	f003 0310 	and.w	r3, r3, #16
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 8163 	beq.w	8007a82 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 815c 	beq.w	8007a82 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2210      	movs	r2, #16
 80077d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077dc:	2b40      	cmp	r3, #64	@ 0x40
 80077de:	f040 80d4 	bne.w	800798a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 80ad 	beq.w	8007952 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80077fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007802:	429a      	cmp	r2, r3
 8007804:	f080 80a5 	bcs.w	8007952 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800780e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b00      	cmp	r3, #0
 8007820:	f040 8086 	bne.w	8007930 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007838:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800783c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007840:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800784e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007852:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800785a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007866:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1da      	bne.n	8007824 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007876:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800787e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007880:	f023 0301 	bic.w	r3, r3, #1
 8007884:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007892:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007896:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800789a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80078a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e1      	bne.n	800786e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3308      	adds	r3, #8
 80078b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80078ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3308      	adds	r3, #8
 80078ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80078ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80078d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80078d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80078dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e3      	bne.n	80078aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007900:	f023 0310 	bic.w	r3, r3, #16
 8007904:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	461a      	mov	r2, r3
 800790e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007912:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007914:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007918:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e4      	bne.n	80078f0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800792a:	4618      	mov	r0, r3
 800792c:	f7fa fc26 	bl	800217c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007942:	b29b      	uxth	r3, r3
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	b29b      	uxth	r3, r3
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f8f4 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007950:	e0d5      	b.n	8007afe <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007958:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800795c:	429a      	cmp	r2, r3
 800795e:	f040 80ce 	bne.w	8007afe <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b20      	cmp	r3, #32
 8007970:	f040 80c5 	bne.w	8007afe <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f8d8 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
      return;
 8007988:	e0b9      	b.n	8007afe <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007996:	b29b      	uxth	r3, r3
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 80ab 	beq.w	8007b02 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80079ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 80a6 	beq.w	8007b02 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80079da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e4      	bne.n	80079b6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3308      	adds	r3, #8
 80079f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	623b      	str	r3, [r7, #32]
   return(result);
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	f023 0301 	bic.w	r3, r3, #1
 8007a02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a10:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e3      	bne.n	80079ec <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f023 0310 	bic.w	r3, r3, #16
 8007a4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a5a:	61fb      	str	r3, [r7, #28]
 8007a5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5e:	69b9      	ldr	r1, [r7, #24]
 8007a60:	69fa      	ldr	r2, [r7, #28]
 8007a62:	e841 2300 	strex	r3, r2, [r1]
 8007a66:	617b      	str	r3, [r7, #20]
   return(result);
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1e4      	bne.n	8007a38 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f85c 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a80:	e03f      	b.n	8007b02 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00e      	beq.n	8007aac <HAL_UART_IRQHandler+0x5a8>
 8007a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d008      	beq.n	8007aac <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007aa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 ffe9 	bl	8008a7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aaa:	e02d      	b.n	8007b08 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00e      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d008      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01c      	beq.n	8007b06 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	4798      	blx	r3
    }
    return;
 8007ad4:	e017      	b.n	8007b06 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d012      	beq.n	8007b08 <HAL_UART_IRQHandler+0x604>
 8007ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00c      	beq.n	8007b08 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fdde 	bl	80086b0 <UART_EndTransmit_IT>
    return;
 8007af4:	e008      	b.n	8007b08 <HAL_UART_IRQHandler+0x604>
      return;
 8007af6:	bf00      	nop
 8007af8:	e006      	b.n	8007b08 <HAL_UART_IRQHandler+0x604>
    return;
 8007afa:	bf00      	nop
 8007afc:	e004      	b.n	8007b08 <HAL_UART_IRQHandler+0x604>
      return;
 8007afe:	bf00      	nop
 8007b00:	e002      	b.n	8007b08 <HAL_UART_IRQHandler+0x604>
      return;
 8007b02:	bf00      	nop
 8007b04:	e000      	b.n	8007b08 <HAL_UART_IRQHandler+0x604>
    return;
 8007b06:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007b08:	37e8      	adds	r7, #232	@ 0xe8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop

08007b10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b54:	b08a      	sub	sp, #40	@ 0x28
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	4ba4      	ldr	r3, [pc, #656]	@ (8007e10 <UART_SetConfig+0x2c0>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a99      	ldr	r2, [pc, #612]	@ (8007e14 <UART_SetConfig+0x2c4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d004      	beq.n	8007bbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a90      	ldr	r2, [pc, #576]	@ (8007e18 <UART_SetConfig+0x2c8>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d126      	bne.n	8007c28 <UART_SetConfig+0xd8>
 8007bda:	4b90      	ldr	r3, [pc, #576]	@ (8007e1c <UART_SetConfig+0x2cc>)
 8007bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be0:	f003 0303 	and.w	r3, r3, #3
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d81b      	bhi.n	8007c20 <UART_SetConfig+0xd0>
 8007be8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <UART_SetConfig+0xa0>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c01 	.word	0x08007c01
 8007bf4:	08007c11 	.word	0x08007c11
 8007bf8:	08007c09 	.word	0x08007c09
 8007bfc:	08007c19 	.word	0x08007c19
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c06:	e116      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c0e:	e112      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007c10:	2304      	movs	r3, #4
 8007c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c16:	e10e      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007c18:	2308      	movs	r3, #8
 8007c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c1e:	e10a      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007c20:	2310      	movs	r3, #16
 8007c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c26:	e106      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a7c      	ldr	r2, [pc, #496]	@ (8007e20 <UART_SetConfig+0x2d0>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d138      	bne.n	8007ca4 <UART_SetConfig+0x154>
 8007c32:	4b7a      	ldr	r3, [pc, #488]	@ (8007e1c <UART_SetConfig+0x2cc>)
 8007c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c38:	f003 030c 	and.w	r3, r3, #12
 8007c3c:	2b0c      	cmp	r3, #12
 8007c3e:	d82d      	bhi.n	8007c9c <UART_SetConfig+0x14c>
 8007c40:	a201      	add	r2, pc, #4	@ (adr r2, 8007c48 <UART_SetConfig+0xf8>)
 8007c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c46:	bf00      	nop
 8007c48:	08007c7d 	.word	0x08007c7d
 8007c4c:	08007c9d 	.word	0x08007c9d
 8007c50:	08007c9d 	.word	0x08007c9d
 8007c54:	08007c9d 	.word	0x08007c9d
 8007c58:	08007c8d 	.word	0x08007c8d
 8007c5c:	08007c9d 	.word	0x08007c9d
 8007c60:	08007c9d 	.word	0x08007c9d
 8007c64:	08007c9d 	.word	0x08007c9d
 8007c68:	08007c85 	.word	0x08007c85
 8007c6c:	08007c9d 	.word	0x08007c9d
 8007c70:	08007c9d 	.word	0x08007c9d
 8007c74:	08007c9d 	.word	0x08007c9d
 8007c78:	08007c95 	.word	0x08007c95
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c82:	e0d8      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007c84:	2302      	movs	r3, #2
 8007c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c8a:	e0d4      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007c8c:	2304      	movs	r3, #4
 8007c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c92:	e0d0      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007c94:	2308      	movs	r3, #8
 8007c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c9a:	e0cc      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ca2:	e0c8      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a5e      	ldr	r2, [pc, #376]	@ (8007e24 <UART_SetConfig+0x2d4>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d125      	bne.n	8007cfa <UART_SetConfig+0x1aa>
 8007cae:	4b5b      	ldr	r3, [pc, #364]	@ (8007e1c <UART_SetConfig+0x2cc>)
 8007cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007cb8:	2b30      	cmp	r3, #48	@ 0x30
 8007cba:	d016      	beq.n	8007cea <UART_SetConfig+0x19a>
 8007cbc:	2b30      	cmp	r3, #48	@ 0x30
 8007cbe:	d818      	bhi.n	8007cf2 <UART_SetConfig+0x1a2>
 8007cc0:	2b20      	cmp	r3, #32
 8007cc2:	d00a      	beq.n	8007cda <UART_SetConfig+0x18a>
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	d814      	bhi.n	8007cf2 <UART_SetConfig+0x1a2>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <UART_SetConfig+0x182>
 8007ccc:	2b10      	cmp	r3, #16
 8007cce:	d008      	beq.n	8007ce2 <UART_SetConfig+0x192>
 8007cd0:	e00f      	b.n	8007cf2 <UART_SetConfig+0x1a2>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cd8:	e0ad      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007cda:	2302      	movs	r3, #2
 8007cdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ce0:	e0a9      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007ce2:	2304      	movs	r3, #4
 8007ce4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ce8:	e0a5      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007cea:	2308      	movs	r3, #8
 8007cec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cf0:	e0a1      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007cf2:	2310      	movs	r3, #16
 8007cf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cf8:	e09d      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8007e28 <UART_SetConfig+0x2d8>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d125      	bne.n	8007d50 <UART_SetConfig+0x200>
 8007d04:	4b45      	ldr	r3, [pc, #276]	@ (8007e1c <UART_SetConfig+0x2cc>)
 8007d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d10:	d016      	beq.n	8007d40 <UART_SetConfig+0x1f0>
 8007d12:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d14:	d818      	bhi.n	8007d48 <UART_SetConfig+0x1f8>
 8007d16:	2b80      	cmp	r3, #128	@ 0x80
 8007d18:	d00a      	beq.n	8007d30 <UART_SetConfig+0x1e0>
 8007d1a:	2b80      	cmp	r3, #128	@ 0x80
 8007d1c:	d814      	bhi.n	8007d48 <UART_SetConfig+0x1f8>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <UART_SetConfig+0x1d8>
 8007d22:	2b40      	cmp	r3, #64	@ 0x40
 8007d24:	d008      	beq.n	8007d38 <UART_SetConfig+0x1e8>
 8007d26:	e00f      	b.n	8007d48 <UART_SetConfig+0x1f8>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d2e:	e082      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007d30:	2302      	movs	r3, #2
 8007d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d36:	e07e      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d3e:	e07a      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007d40:	2308      	movs	r3, #8
 8007d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d46:	e076      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007d48:	2310      	movs	r3, #16
 8007d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d4e:	e072      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a35      	ldr	r2, [pc, #212]	@ (8007e2c <UART_SetConfig+0x2dc>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d12a      	bne.n	8007db0 <UART_SetConfig+0x260>
 8007d5a:	4b30      	ldr	r3, [pc, #192]	@ (8007e1c <UART_SetConfig+0x2cc>)
 8007d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d68:	d01a      	beq.n	8007da0 <UART_SetConfig+0x250>
 8007d6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d6e:	d81b      	bhi.n	8007da8 <UART_SetConfig+0x258>
 8007d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d74:	d00c      	beq.n	8007d90 <UART_SetConfig+0x240>
 8007d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d7a:	d815      	bhi.n	8007da8 <UART_SetConfig+0x258>
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <UART_SetConfig+0x238>
 8007d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d84:	d008      	beq.n	8007d98 <UART_SetConfig+0x248>
 8007d86:	e00f      	b.n	8007da8 <UART_SetConfig+0x258>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d8e:	e052      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007d90:	2302      	movs	r3, #2
 8007d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d96:	e04e      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007d98:	2304      	movs	r3, #4
 8007d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d9e:	e04a      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007da0:	2308      	movs	r3, #8
 8007da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007da6:	e046      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007da8:	2310      	movs	r3, #16
 8007daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dae:	e042      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a17      	ldr	r2, [pc, #92]	@ (8007e14 <UART_SetConfig+0x2c4>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d13a      	bne.n	8007e30 <UART_SetConfig+0x2e0>
 8007dba:	4b18      	ldr	r3, [pc, #96]	@ (8007e1c <UART_SetConfig+0x2cc>)
 8007dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007dc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dc8:	d01a      	beq.n	8007e00 <UART_SetConfig+0x2b0>
 8007dca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dce:	d81b      	bhi.n	8007e08 <UART_SetConfig+0x2b8>
 8007dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dd4:	d00c      	beq.n	8007df0 <UART_SetConfig+0x2a0>
 8007dd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dda:	d815      	bhi.n	8007e08 <UART_SetConfig+0x2b8>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <UART_SetConfig+0x298>
 8007de0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007de4:	d008      	beq.n	8007df8 <UART_SetConfig+0x2a8>
 8007de6:	e00f      	b.n	8007e08 <UART_SetConfig+0x2b8>
 8007de8:	2300      	movs	r3, #0
 8007dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dee:	e022      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007df0:	2302      	movs	r3, #2
 8007df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007df6:	e01e      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007df8:	2304      	movs	r3, #4
 8007dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dfe:	e01a      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007e00:	2308      	movs	r3, #8
 8007e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e06:	e016      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e0e:	e012      	b.n	8007e36 <UART_SetConfig+0x2e6>
 8007e10:	efff69f3 	.word	0xefff69f3
 8007e14:	40008000 	.word	0x40008000
 8007e18:	40013800 	.word	0x40013800
 8007e1c:	40021000 	.word	0x40021000
 8007e20:	40004400 	.word	0x40004400
 8007e24:	40004800 	.word	0x40004800
 8007e28:	40004c00 	.word	0x40004c00
 8007e2c:	40005000 	.word	0x40005000
 8007e30:	2310      	movs	r3, #16
 8007e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a9f      	ldr	r2, [pc, #636]	@ (80080b8 <UART_SetConfig+0x568>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d17a      	bne.n	8007f36 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d824      	bhi.n	8007e92 <UART_SetConfig+0x342>
 8007e48:	a201      	add	r2, pc, #4	@ (adr r2, 8007e50 <UART_SetConfig+0x300>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007e75 	.word	0x08007e75
 8007e54:	08007e93 	.word	0x08007e93
 8007e58:	08007e7d 	.word	0x08007e7d
 8007e5c:	08007e93 	.word	0x08007e93
 8007e60:	08007e83 	.word	0x08007e83
 8007e64:	08007e93 	.word	0x08007e93
 8007e68:	08007e93 	.word	0x08007e93
 8007e6c:	08007e93 	.word	0x08007e93
 8007e70:	08007e8b 	.word	0x08007e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e74:	f7fc f89e 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8007e78:	61f8      	str	r0, [r7, #28]
        break;
 8007e7a:	e010      	b.n	8007e9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e7c:	4b8f      	ldr	r3, [pc, #572]	@ (80080bc <UART_SetConfig+0x56c>)
 8007e7e:	61fb      	str	r3, [r7, #28]
        break;
 8007e80:	e00d      	b.n	8007e9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e82:	f7fb ffff 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8007e86:	61f8      	str	r0, [r7, #28]
        break;
 8007e88:	e009      	b.n	8007e9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e8e:	61fb      	str	r3, [r7, #28]
        break;
 8007e90:	e005      	b.n	8007e9e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 80fb 	beq.w	800809c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	4413      	add	r3, r2
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d305      	bcc.n	8007ec2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d903      	bls.n	8007eca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007ec8:	e0e8      	b.n	800809c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	461c      	mov	r4, r3
 8007ed0:	4615      	mov	r5, r2
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	f04f 0300 	mov.w	r3, #0
 8007eda:	022b      	lsls	r3, r5, #8
 8007edc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ee0:	0222      	lsls	r2, r4, #8
 8007ee2:	68f9      	ldr	r1, [r7, #12]
 8007ee4:	6849      	ldr	r1, [r1, #4]
 8007ee6:	0849      	lsrs	r1, r1, #1
 8007ee8:	2000      	movs	r0, #0
 8007eea:	4688      	mov	r8, r1
 8007eec:	4681      	mov	r9, r0
 8007eee:	eb12 0a08 	adds.w	sl, r2, r8
 8007ef2:	eb43 0b09 	adc.w	fp, r3, r9
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	603b      	str	r3, [r7, #0]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f04:	4650      	mov	r0, sl
 8007f06:	4659      	mov	r1, fp
 8007f08:	f7f8 fc0e 	bl	8000728 <__aeabi_uldivmod>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4613      	mov	r3, r2
 8007f12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f1a:	d308      	bcc.n	8007f2e <UART_SetConfig+0x3de>
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f22:	d204      	bcs.n	8007f2e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	60da      	str	r2, [r3, #12]
 8007f2c:	e0b6      	b.n	800809c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007f34:	e0b2      	b.n	800809c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f3e:	d15e      	bne.n	8007ffe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007f40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d828      	bhi.n	8007f9a <UART_SetConfig+0x44a>
 8007f48:	a201      	add	r2, pc, #4	@ (adr r2, 8007f50 <UART_SetConfig+0x400>)
 8007f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4e:	bf00      	nop
 8007f50:	08007f75 	.word	0x08007f75
 8007f54:	08007f7d 	.word	0x08007f7d
 8007f58:	08007f85 	.word	0x08007f85
 8007f5c:	08007f9b 	.word	0x08007f9b
 8007f60:	08007f8b 	.word	0x08007f8b
 8007f64:	08007f9b 	.word	0x08007f9b
 8007f68:	08007f9b 	.word	0x08007f9b
 8007f6c:	08007f9b 	.word	0x08007f9b
 8007f70:	08007f93 	.word	0x08007f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f74:	f7fc f81e 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8007f78:	61f8      	str	r0, [r7, #28]
        break;
 8007f7a:	e014      	b.n	8007fa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f7c:	f7fc f830 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8007f80:	61f8      	str	r0, [r7, #28]
        break;
 8007f82:	e010      	b.n	8007fa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f84:	4b4d      	ldr	r3, [pc, #308]	@ (80080bc <UART_SetConfig+0x56c>)
 8007f86:	61fb      	str	r3, [r7, #28]
        break;
 8007f88:	e00d      	b.n	8007fa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f8a:	f7fb ff7b 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8007f8e:	61f8      	str	r0, [r7, #28]
        break;
 8007f90:	e009      	b.n	8007fa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f96:	61fb      	str	r3, [r7, #28]
        break;
 8007f98:	e005      	b.n	8007fa6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007fa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d077      	beq.n	800809c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	005a      	lsls	r2, r3, #1
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	085b      	lsrs	r3, r3, #1
 8007fb6:	441a      	add	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	2b0f      	cmp	r3, #15
 8007fc6:	d916      	bls.n	8007ff6 <UART_SetConfig+0x4a6>
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fce:	d212      	bcs.n	8007ff6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	f023 030f 	bic.w	r3, r3, #15
 8007fd8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	085b      	lsrs	r3, r3, #1
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	8afb      	ldrh	r3, [r7, #22]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	8afa      	ldrh	r2, [r7, #22]
 8007ff2:	60da      	str	r2, [r3, #12]
 8007ff4:	e052      	b.n	800809c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007ffc:	e04e      	b.n	800809c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ffe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008002:	2b08      	cmp	r3, #8
 8008004:	d827      	bhi.n	8008056 <UART_SetConfig+0x506>
 8008006:	a201      	add	r2, pc, #4	@ (adr r2, 800800c <UART_SetConfig+0x4bc>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	08008031 	.word	0x08008031
 8008010:	08008039 	.word	0x08008039
 8008014:	08008041 	.word	0x08008041
 8008018:	08008057 	.word	0x08008057
 800801c:	08008047 	.word	0x08008047
 8008020:	08008057 	.word	0x08008057
 8008024:	08008057 	.word	0x08008057
 8008028:	08008057 	.word	0x08008057
 800802c:	0800804f 	.word	0x0800804f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008030:	f7fb ffc0 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8008034:	61f8      	str	r0, [r7, #28]
        break;
 8008036:	e014      	b.n	8008062 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008038:	f7fb ffd2 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 800803c:	61f8      	str	r0, [r7, #28]
        break;
 800803e:	e010      	b.n	8008062 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008040:	4b1e      	ldr	r3, [pc, #120]	@ (80080bc <UART_SetConfig+0x56c>)
 8008042:	61fb      	str	r3, [r7, #28]
        break;
 8008044:	e00d      	b.n	8008062 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008046:	f7fb ff1d 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 800804a:	61f8      	str	r0, [r7, #28]
        break;
 800804c:	e009      	b.n	8008062 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800804e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008052:	61fb      	str	r3, [r7, #28]
        break;
 8008054:	e005      	b.n	8008062 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008060:	bf00      	nop
    }

    if (pclk != 0U)
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d019      	beq.n	800809c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	085a      	lsrs	r2, r3, #1
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	441a      	add	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	fbb2 f3f3 	udiv	r3, r2, r3
 800807a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	2b0f      	cmp	r3, #15
 8008080:	d909      	bls.n	8008096 <UART_SetConfig+0x546>
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008088:	d205      	bcs.n	8008096 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60da      	str	r2, [r3, #12]
 8008094:	e002      	b.n	800809c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80080a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3728      	adds	r7, #40	@ 0x28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080b6:	bf00      	nop
 80080b8:	40008000 	.word	0x40008000
 80080bc:	00f42400 	.word	0x00f42400

080080c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080cc:	f003 0308 	and.w	r3, r3, #8
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00a      	beq.n	80080ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008132:	f003 0304 	and.w	r3, r3, #4
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008154:	f003 0310 	and.w	r3, r3, #16
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008176:	f003 0320 	and.w	r3, r3, #32
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01a      	beq.n	80081d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081be:	d10a      	bne.n	80081d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00a      	beq.n	80081f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	430a      	orrs	r2, r1
 80081f6:	605a      	str	r2, [r3, #4]
  }
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b098      	sub	sp, #96	@ 0x60
 8008208:	af02      	add	r7, sp, #8
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008214:	f7f9 fdac 	bl	8001d70 <HAL_GetTick>
 8008218:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0308 	and.w	r3, r3, #8
 8008224:	2b08      	cmp	r3, #8
 8008226:	d12e      	bne.n	8008286 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008228:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008230:	2200      	movs	r2, #0
 8008232:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f88c 	bl	8008354 <UART_WaitOnFlagUntilTimeout>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d021      	beq.n	8008286 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800824a:	e853 3f00 	ldrex	r3, [r3]
 800824e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008256:	653b      	str	r3, [r7, #80]	@ 0x50
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008260:	647b      	str	r3, [r7, #68]	@ 0x44
 8008262:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008264:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008266:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008268:	e841 2300 	strex	r3, r2, [r1]
 800826c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800826e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e6      	bne.n	8008242 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2220      	movs	r2, #32
 8008278:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e062      	b.n	800834c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b04      	cmp	r3, #4
 8008292:	d149      	bne.n	8008328 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008294:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800829c:	2200      	movs	r2, #0
 800829e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f856 	bl	8008354 <UART_WaitOnFlagUntilTimeout>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d03c      	beq.n	8008328 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	623b      	str	r3, [r7, #32]
   return(result);
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80082ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082d4:	e841 2300 	strex	r3, r2, [r1]
 80082d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e6      	bne.n	80082ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3308      	adds	r3, #8
 80082e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	e853 3f00 	ldrex	r3, [r3]
 80082ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f023 0301 	bic.w	r3, r3, #1
 80082f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3308      	adds	r3, #8
 80082fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008300:	61fa      	str	r2, [r7, #28]
 8008302:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008304:	69b9      	ldr	r1, [r7, #24]
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	e841 2300 	strex	r3, r2, [r1]
 800830c:	617b      	str	r3, [r7, #20]
   return(result);
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1e5      	bne.n	80082e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e011      	b.n	800834c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2220      	movs	r2, #32
 800832c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2220      	movs	r2, #32
 8008332:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3758      	adds	r7, #88	@ 0x58
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	4613      	mov	r3, r2
 8008362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008364:	e04f      	b.n	8008406 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800836c:	d04b      	beq.n	8008406 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800836e:	f7f9 fcff 	bl	8001d70 <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	429a      	cmp	r2, r3
 800837c:	d302      	bcc.n	8008384 <UART_WaitOnFlagUntilTimeout+0x30>
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e04e      	b.n	8008426 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0304 	and.w	r3, r3, #4
 8008392:	2b00      	cmp	r3, #0
 8008394:	d037      	beq.n	8008406 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b80      	cmp	r3, #128	@ 0x80
 800839a:	d034      	beq.n	8008406 <UART_WaitOnFlagUntilTimeout+0xb2>
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2b40      	cmp	r3, #64	@ 0x40
 80083a0:	d031      	beq.n	8008406 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	f003 0308 	and.w	r3, r3, #8
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d110      	bne.n	80083d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2208      	movs	r2, #8
 80083b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 f8ff 	bl	80085bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2208      	movs	r2, #8
 80083c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e029      	b.n	8008426 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083e0:	d111      	bne.n	8008406 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 f8e5 	bl	80085bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2220      	movs	r2, #32
 80083f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e00f      	b.n	8008426 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69da      	ldr	r2, [r3, #28]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	4013      	ands	r3, r2
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	429a      	cmp	r2, r3
 8008414:	bf0c      	ite	eq
 8008416:	2301      	moveq	r3, #1
 8008418:	2300      	movne	r3, #0
 800841a:	b2db      	uxtb	r3, r3
 800841c:	461a      	mov	r2, r3
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	429a      	cmp	r2, r3
 8008422:	d0a0      	beq.n	8008366 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008430:	b480      	push	{r7}
 8008432:	b097      	sub	sp, #92	@ 0x5c
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	4613      	mov	r3, r2
 800843c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	88fa      	ldrh	r2, [r7, #6]
 8008448:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	88fa      	ldrh	r2, [r7, #6]
 8008450:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008462:	d10e      	bne.n	8008482 <UART_Start_Receive_IT+0x52>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d105      	bne.n	8008478 <UART_Start_Receive_IT+0x48>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008472:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008476:	e02d      	b.n	80084d4 <UART_Start_Receive_IT+0xa4>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	22ff      	movs	r2, #255	@ 0xff
 800847c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008480:	e028      	b.n	80084d4 <UART_Start_Receive_IT+0xa4>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10d      	bne.n	80084a6 <UART_Start_Receive_IT+0x76>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d104      	bne.n	800849c <UART_Start_Receive_IT+0x6c>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	22ff      	movs	r2, #255	@ 0xff
 8008496:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800849a:	e01b      	b.n	80084d4 <UART_Start_Receive_IT+0xa4>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	227f      	movs	r2, #127	@ 0x7f
 80084a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80084a4:	e016      	b.n	80084d4 <UART_Start_Receive_IT+0xa4>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084ae:	d10d      	bne.n	80084cc <UART_Start_Receive_IT+0x9c>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d104      	bne.n	80084c2 <UART_Start_Receive_IT+0x92>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	227f      	movs	r2, #127	@ 0x7f
 80084bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80084c0:	e008      	b.n	80084d4 <UART_Start_Receive_IT+0xa4>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	223f      	movs	r2, #63	@ 0x3f
 80084c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80084ca:	e003      	b.n	80084d4 <UART_Start_Receive_IT+0xa4>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2222      	movs	r2, #34	@ 0x22
 80084e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3308      	adds	r3, #8
 80084ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f6:	f043 0301 	orr.w	r3, r3, #1
 80084fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3308      	adds	r3, #8
 8008502:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008504:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008506:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800850a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e5      	bne.n	80084e4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008520:	d107      	bne.n	8008532 <UART_Start_Receive_IT+0x102>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d103      	bne.n	8008532 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	4a21      	ldr	r2, [pc, #132]	@ (80085b4 <UART_Start_Receive_IT+0x184>)
 800852e:	669a      	str	r2, [r3, #104]	@ 0x68
 8008530:	e002      	b.n	8008538 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4a20      	ldr	r2, [pc, #128]	@ (80085b8 <UART_Start_Receive_IT+0x188>)
 8008536:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d019      	beq.n	8008574 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800854e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008550:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800855e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008560:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008564:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800856c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e6      	bne.n	8008540 <UART_Start_Receive_IT+0x110>
 8008572:	e018      	b.n	80085a6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	613b      	str	r3, [r7, #16]
   return(result);
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f043 0320 	orr.w	r3, r3, #32
 8008588:	653b      	str	r3, [r7, #80]	@ 0x50
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008592:	623b      	str	r3, [r7, #32]
 8008594:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	69f9      	ldr	r1, [r7, #28]
 8008598:	6a3a      	ldr	r2, [r7, #32]
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	61bb      	str	r3, [r7, #24]
   return(result);
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e6      	bne.n	8008574 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	375c      	adds	r7, #92	@ 0x5c
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	080088c1 	.word	0x080088c1
 80085b8:	08008705 	.word	0x08008705

080085bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085bc:	b480      	push	{r7}
 80085be:	b095      	sub	sp, #84	@ 0x54
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80085e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e6      	bne.n	80085c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3308      	adds	r3, #8
 80085fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	61fb      	str	r3, [r7, #28]
   return(result);
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	f023 0301 	bic.w	r3, r3, #1
 800860c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3308      	adds	r3, #8
 8008614:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008616:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008618:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800861c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e5      	bne.n	80085f6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800862e:	2b01      	cmp	r3, #1
 8008630:	d118      	bne.n	8008664 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	e853 3f00 	ldrex	r3, [r3]
 800863e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f023 0310 	bic.w	r3, r3, #16
 8008646:	647b      	str	r3, [r7, #68]	@ 0x44
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
 800864e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008650:	61bb      	str	r3, [r7, #24]
 8008652:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008654:	6979      	ldr	r1, [r7, #20]
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	e841 2300 	strex	r3, r2, [r1]
 800865c:	613b      	str	r3, [r7, #16]
   return(result);
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e6      	bne.n	8008632 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2220      	movs	r2, #32
 8008668:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008678:	bf00      	nop
 800867a:	3754      	adds	r7, #84	@ 0x54
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008690:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f7ff fa3e 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086a8:	bf00      	nop
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b088      	sub	sp, #32
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	e853 3f00 	ldrex	r3, [r3]
 80086c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086cc:	61fb      	str	r3, [r7, #28]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	61bb      	str	r3, [r7, #24]
 80086d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086da:	6979      	ldr	r1, [r7, #20]
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	e841 2300 	strex	r3, r2, [r1]
 80086e2:	613b      	str	r3, [r7, #16]
   return(result);
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1e6      	bne.n	80086b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2220      	movs	r2, #32
 80086ee:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff fa0a 	bl	8007b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086fc:	bf00      	nop
 80086fe:	3720      	adds	r7, #32
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b09c      	sub	sp, #112	@ 0x70
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008712:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800871c:	2b22      	cmp	r3, #34	@ 0x22
 800871e:	f040 80be 	bne.w	800889e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008728:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800872c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008730:	b2d9      	uxtb	r1, r3
 8008732:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008736:	b2da      	uxtb	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800873c:	400a      	ands	r2, r1
 800873e:	b2d2      	uxtb	r2, r2
 8008740:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008752:	b29b      	uxth	r3, r3
 8008754:	3b01      	subs	r3, #1
 8008756:	b29a      	uxth	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008764:	b29b      	uxth	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	f040 80a3 	bne.w	80088b2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008774:	e853 3f00 	ldrex	r3, [r3]
 8008778:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800877a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800877c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008780:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800878a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800878c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008790:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1e6      	bne.n	800876c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3308      	adds	r3, #8
 80087a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a8:	e853 3f00 	ldrex	r3, [r3]
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b0:	f023 0301 	bic.w	r3, r3, #1
 80087b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3308      	adds	r3, #8
 80087bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80087be:	647a      	str	r2, [r7, #68]	@ 0x44
 80087c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087c6:	e841 2300 	strex	r3, r2, [r1]
 80087ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1e5      	bne.n	800879e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2220      	movs	r2, #32
 80087d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a34      	ldr	r2, [pc, #208]	@ (80088bc <UART_RxISR_8BIT+0x1b8>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d01f      	beq.n	8008830 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d018      	beq.n	8008830 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	623b      	str	r3, [r7, #32]
   return(result);
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008812:	663b      	str	r3, [r7, #96]	@ 0x60
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	461a      	mov	r2, r3
 800881a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800881c:	633b      	str	r3, [r7, #48]	@ 0x30
 800881e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800882a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e6      	bne.n	80087fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008834:	2b01      	cmp	r3, #1
 8008836:	d12e      	bne.n	8008896 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	e853 3f00 	ldrex	r3, [r3]
 800884a:	60fb      	str	r3, [r7, #12]
   return(result);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f023 0310 	bic.w	r3, r3, #16
 8008852:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	461a      	mov	r2, r3
 800885a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800885c:	61fb      	str	r3, [r7, #28]
 800885e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008860:	69b9      	ldr	r1, [r7, #24]
 8008862:	69fa      	ldr	r2, [r7, #28]
 8008864:	e841 2300 	strex	r3, r2, [r1]
 8008868:	617b      	str	r3, [r7, #20]
   return(result);
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1e6      	bne.n	800883e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	f003 0310 	and.w	r3, r3, #16
 800887a:	2b10      	cmp	r3, #16
 800887c:	d103      	bne.n	8008886 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2210      	movs	r2, #16
 8008884:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7ff f952 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008894:	e00d      	b.n	80088b2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f002 fb72 	bl	800af80 <HAL_UART_RxCpltCallback>
}
 800889c:	e009      	b.n	80088b2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	8b1b      	ldrh	r3, [r3, #24]
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f042 0208 	orr.w	r2, r2, #8
 80088ae:	b292      	uxth	r2, r2
 80088b0:	831a      	strh	r2, [r3, #24]
}
 80088b2:	bf00      	nop
 80088b4:	3770      	adds	r7, #112	@ 0x70
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	40008000 	.word	0x40008000

080088c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b09c      	sub	sp, #112	@ 0x70
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088d8:	2b22      	cmp	r3, #34	@ 0x22
 80088da:	f040 80be 	bne.w	8008a5a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80088e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80088ee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80088f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80088f6:	4013      	ands	r3, r2
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008902:	1c9a      	adds	r2, r3, #2
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800890e:	b29b      	uxth	r3, r3
 8008910:	3b01      	subs	r3, #1
 8008912:	b29a      	uxth	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008920:	b29b      	uxth	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	f040 80a3 	bne.w	8008a6e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008930:	e853 3f00 	ldrex	r3, [r3]
 8008934:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008938:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800893c:	667b      	str	r3, [r7, #100]	@ 0x64
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008946:	657b      	str	r3, [r7, #84]	@ 0x54
 8008948:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800894c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e6      	bne.n	8008928 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3308      	adds	r3, #8
 8008960:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800896a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896c:	f023 0301 	bic.w	r3, r3, #1
 8008970:	663b      	str	r3, [r7, #96]	@ 0x60
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3308      	adds	r3, #8
 8008978:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800897a:	643a      	str	r2, [r7, #64]	@ 0x40
 800897c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008980:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e5      	bne.n	800895a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2220      	movs	r2, #32
 8008992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a34      	ldr	r2, [pc, #208]	@ (8008a78 <UART_RxISR_16BIT+0x1b8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d01f      	beq.n	80089ec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d018      	beq.n	80089ec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089da:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089e0:	e841 2300 	strex	r3, r2, [r1]
 80089e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e6      	bne.n	80089ba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d12e      	bne.n	8008a52 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f023 0310 	bic.w	r3, r3, #16
 8008a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a18:	61bb      	str	r3, [r7, #24]
 8008a1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	6979      	ldr	r1, [r7, #20]
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	e841 2300 	strex	r3, r2, [r1]
 8008a24:	613b      	str	r3, [r7, #16]
   return(result);
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e6      	bne.n	80089fa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	f003 0310 	and.w	r3, r3, #16
 8008a36:	2b10      	cmp	r3, #16
 8008a38:	d103      	bne.n	8008a42 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2210      	movs	r2, #16
 8008a40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff f874 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a50:	e00d      	b.n	8008a6e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f002 fa94 	bl	800af80 <HAL_UART_RxCpltCallback>
}
 8008a58:	e009      	b.n	8008a6e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	8b1b      	ldrh	r3, [r3, #24]
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f042 0208 	orr.w	r2, r2, #8
 8008a6a:	b292      	uxth	r2, r2
 8008a6c:	831a      	strh	r2, [r3, #24]
}
 8008a6e:	bf00      	nop
 8008a70:	3770      	adds	r7, #112	@ 0x70
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	40008000 	.word	0x40008000

08008a7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	4603      	mov	r3, r0
 8008a98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008aa2:	2b84      	cmp	r3, #132	@ 0x84
 8008aa4:	d005      	beq.n	8008ab2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008aa6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4413      	add	r3, r2
 8008aae:	3303      	adds	r3, #3
 8008ab0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008ac4:	f000 fde2 	bl	800968c <vTaskStartScheduler>
  
  return osOK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	bd80      	pop	{r7, pc}

08008ace <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008ace:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ad0:	b089      	sub	sp, #36	@ 0x24
 8008ad2:	af04      	add	r7, sp, #16
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d020      	beq.n	8008b22 <osThreadCreate+0x54>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d01c      	beq.n	8008b22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685c      	ldr	r4, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691e      	ldr	r6, [r3, #16]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff ffc8 	bl	8008a90 <makeFreeRtosPriority>
 8008b00:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b0a:	9202      	str	r2, [sp, #8]
 8008b0c:	9301      	str	r3, [sp, #4]
 8008b0e:	9100      	str	r1, [sp, #0]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	4632      	mov	r2, r6
 8008b14:	4629      	mov	r1, r5
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 fbd2 	bl	80092c0 <xTaskCreateStatic>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	e01c      	b.n	8008b5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685c      	ldr	r4, [r3, #4]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b2e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff ffaa 	bl	8008a90 <makeFreeRtosPriority>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	f107 030c 	add.w	r3, r7, #12
 8008b42:	9301      	str	r3, [sp, #4]
 8008b44:	9200      	str	r2, [sp, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	4632      	mov	r2, r6
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 fc17 	bl	8009380 <xTaskCreate>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d001      	beq.n	8008b5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	e000      	b.n	8008b5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <osDelay+0x16>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	e000      	b.n	8008b7e <osDelay+0x18>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fd4e 	bl	8009620 <vTaskDelay>
  
  return osOK;
 8008b84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f103 0208 	add.w	r2, r3, #8
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ba6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f103 0208 	add.w	r2, r3, #8
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f103 0208 	add.w	r2, r3, #8
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	601a      	str	r2, [r3, #0]
}
 8008c24:	bf00      	nop
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c46:	d103      	bne.n	8008c50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	60fb      	str	r3, [r7, #12]
 8008c4e:	e00c      	b.n	8008c6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3308      	adds	r3, #8
 8008c54:	60fb      	str	r3, [r7, #12]
 8008c56:	e002      	b.n	8008c5e <vListInsert+0x2e>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	60fb      	str	r3, [r7, #12]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d2f6      	bcs.n	8008c58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	601a      	str	r2, [r3, #0]
}
 8008c96:	bf00      	nop
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b085      	sub	sp, #20
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	6892      	ldr	r2, [r2, #8]
 8008cb8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	6852      	ldr	r2, [r2, #4]
 8008cc2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d103      	bne.n	8008cd6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	689a      	ldr	r2, [r3, #8]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	1e5a      	subs	r2, r3, #1
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
	...

08008cf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10b      	bne.n	8008d24 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d1e:	bf00      	nop
 8008d20:	bf00      	nop
 8008d22:	e7fd      	b.n	8008d20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d24:	f001 fcd0 	bl	800a6c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d30:	68f9      	ldr	r1, [r7, #12]
 8008d32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008d34:	fb01 f303 	mul.w	r3, r1, r3
 8008d38:	441a      	add	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d54:	3b01      	subs	r3, #1
 8008d56:	68f9      	ldr	r1, [r7, #12]
 8008d58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008d5a:	fb01 f303 	mul.w	r3, r1, r3
 8008d5e:	441a      	add	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	22ff      	movs	r2, #255	@ 0xff
 8008d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	22ff      	movs	r2, #255	@ 0xff
 8008d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d114      	bne.n	8008da4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d01a      	beq.n	8008db8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3310      	adds	r3, #16
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 feda 	bl	8009b40 <xTaskRemoveFromEventList>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d012      	beq.n	8008db8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d92:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc8 <xQueueGenericReset+0xd0>)
 8008d94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	e009      	b.n	8008db8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	3310      	adds	r3, #16
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7ff fef0 	bl	8008b8e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	3324      	adds	r3, #36	@ 0x24
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7ff feeb 	bl	8008b8e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008db8:	f001 fcb8 	bl	800a72c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008dbc:	2301      	movs	r3, #1
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	e000ed04 	.word	0xe000ed04

08008dcc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08a      	sub	sp, #40	@ 0x28
 8008dd0:	af02      	add	r7, sp, #8
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10b      	bne.n	8008df8 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	613b      	str	r3, [r7, #16]
}
 8008df2:	bf00      	nop
 8008df4:	bf00      	nop
 8008df6:	e7fd      	b.n	8008df4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	fb02 f303 	mul.w	r3, r2, r3
 8008e00:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	3348      	adds	r3, #72	@ 0x48
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 fd80 	bl	800a90c <pvPortMalloc>
 8008e0c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d011      	beq.n	8008e38 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	3348      	adds	r3, #72	@ 0x48
 8008e1c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e26:	79fa      	ldrb	r2, [r7, #7]
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 f805 	bl	8008e42 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e38:	69bb      	ldr	r3, [r7, #24]
	}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3720      	adds	r7, #32
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	607a      	str	r2, [r7, #4]
 8008e4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d103      	bne.n	8008e5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	e002      	b.n	8008e64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e70:	2101      	movs	r1, #1
 8008e72:	69b8      	ldr	r0, [r7, #24]
 8008e74:	f7ff ff40 	bl	8008cf8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e78:	bf00      	nop
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08e      	sub	sp, #56	@ 0x38
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10b      	bne.n	8008eac <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	623b      	str	r3, [r7, #32]
}
 8008ea6:	bf00      	nop
 8008ea8:	bf00      	nop
 8008eaa:	e7fd      	b.n	8008ea8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00b      	beq.n	8008ecc <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	61fb      	str	r3, [r7, #28]
}
 8008ec6:	bf00      	nop
 8008ec8:	bf00      	nop
 8008eca:	e7fd      	b.n	8008ec8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d103      	bne.n	8008edc <xQueueGiveFromISR+0x5c>
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d101      	bne.n	8008ee0 <xQueueGiveFromISR+0x60>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e000      	b.n	8008ee2 <xQueueGiveFromISR+0x62>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10b      	bne.n	8008efe <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	61bb      	str	r3, [r7, #24]
}
 8008ef8:	bf00      	nop
 8008efa:	bf00      	nop
 8008efc:	e7fd      	b.n	8008efa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008efe:	f001 fcc3 	bl	800a888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f02:	f3ef 8211 	mrs	r2, BASEPRI
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	617a      	str	r2, [r7, #20]
 8008f18:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f22:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d22b      	bcs.n	8008f86 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f40:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008f44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f48:	d112      	bne.n	8008f70 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d016      	beq.n	8008f80 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f54:	3324      	adds	r3, #36	@ 0x24
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 fdf2 	bl	8009b40 <xTaskRemoveFromEventList>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00e      	beq.n	8008f80 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	e007      	b.n	8008f80 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f74:	3301      	adds	r3, #1
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	b25a      	sxtb	r2, r3
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008f80:	2301      	movs	r3, #1
 8008f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f84:	e001      	b.n	8008f8a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3738      	adds	r7, #56	@ 0x38
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08e      	sub	sp, #56	@ 0x38
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008faa:	2300      	movs	r3, #0
 8008fac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10b      	bne.n	8008fd4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	623b      	str	r3, [r7, #32]
}
 8008fce:	bf00      	nop
 8008fd0:	bf00      	nop
 8008fd2:	e7fd      	b.n	8008fd0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00b      	beq.n	8008ff4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	61fb      	str	r3, [r7, #28]
}
 8008fee:	bf00      	nop
 8008ff0:	bf00      	nop
 8008ff2:	e7fd      	b.n	8008ff0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ff4:	f000 ff6a 	bl	8009ecc <xTaskGetSchedulerState>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d102      	bne.n	8009004 <xQueueSemaphoreTake+0x64>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <xQueueSemaphoreTake+0x68>
 8009004:	2301      	movs	r3, #1
 8009006:	e000      	b.n	800900a <xQueueSemaphoreTake+0x6a>
 8009008:	2300      	movs	r3, #0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10b      	bne.n	8009026 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	61bb      	str	r3, [r7, #24]
}
 8009020:	bf00      	nop
 8009022:	bf00      	nop
 8009024:	e7fd      	b.n	8009022 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009026:	f001 fb4f 	bl	800a6c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800902a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800902c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009032:	2b00      	cmp	r3, #0
 8009034:	d024      	beq.n	8009080 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009038:	1e5a      	subs	r2, r3, #1
 800903a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800903c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800903e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d104      	bne.n	8009050 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009046:	f001 f865 	bl	800a114 <pvTaskIncrementMutexHeldCount>
 800904a:	4602      	mov	r2, r0
 800904c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00f      	beq.n	8009078 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800905a:	3310      	adds	r3, #16
 800905c:	4618      	mov	r0, r3
 800905e:	f000 fd6f 	bl	8009b40 <xTaskRemoveFromEventList>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d007      	beq.n	8009078 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009068:	4b54      	ldr	r3, [pc, #336]	@ (80091bc <xQueueSemaphoreTake+0x21c>)
 800906a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009078:	f001 fb58 	bl	800a72c <vPortExitCritical>
				return pdPASS;
 800907c:	2301      	movs	r3, #1
 800907e:	e098      	b.n	80091b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d112      	bne.n	80090ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00b      	beq.n	80090a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800908c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	617b      	str	r3, [r7, #20]
}
 800909e:	bf00      	nop
 80090a0:	bf00      	nop
 80090a2:	e7fd      	b.n	80090a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80090a4:	f001 fb42 	bl	800a72c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090a8:	2300      	movs	r3, #0
 80090aa:	e082      	b.n	80091b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d106      	bne.n	80090c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090b2:	f107 030c 	add.w	r3, r7, #12
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 fda6 	bl	8009c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090bc:	2301      	movs	r3, #1
 80090be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090c0:	f001 fb34 	bl	800a72c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090c4:	f000 fb4c 	bl	8009760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090c8:	f001 fafe 	bl	800a6c8 <vPortEnterCritical>
 80090cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090d2:	b25b      	sxtb	r3, r3
 80090d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090d8:	d103      	bne.n	80090e2 <xQueueSemaphoreTake+0x142>
 80090da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090e8:	b25b      	sxtb	r3, r3
 80090ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090ee:	d103      	bne.n	80090f8 <xQueueSemaphoreTake+0x158>
 80090f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090f8:	f001 fb18 	bl	800a72c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090fc:	463a      	mov	r2, r7
 80090fe:	f107 030c 	add.w	r3, r7, #12
 8009102:	4611      	mov	r1, r2
 8009104:	4618      	mov	r0, r3
 8009106:	f000 fd95 	bl	8009c34 <xTaskCheckForTimeOut>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d132      	bne.n	8009176 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009110:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009112:	f000 f8bf 	bl	8009294 <prvIsQueueEmpty>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d026      	beq.n	800916a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800911c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d109      	bne.n	8009138 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009124:	f001 fad0 	bl	800a6c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	4618      	mov	r0, r3
 800912e:	f000 feeb 	bl	8009f08 <xTaskPriorityInherit>
 8009132:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009134:	f001 fafa 	bl	800a72c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913a:	3324      	adds	r3, #36	@ 0x24
 800913c:	683a      	ldr	r2, [r7, #0]
 800913e:	4611      	mov	r1, r2
 8009140:	4618      	mov	r0, r3
 8009142:	f000 fcd7 	bl	8009af4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009146:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009148:	f000 f852 	bl	80091f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800914c:	f000 fb16 	bl	800977c <xTaskResumeAll>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	f47f af67 	bne.w	8009026 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009158:	4b18      	ldr	r3, [pc, #96]	@ (80091bc <xQueueSemaphoreTake+0x21c>)
 800915a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800915e:	601a      	str	r2, [r3, #0]
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	e75d      	b.n	8009026 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800916a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800916c:	f000 f840 	bl	80091f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009170:	f000 fb04 	bl	800977c <xTaskResumeAll>
 8009174:	e757      	b.n	8009026 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009176:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009178:	f000 f83a 	bl	80091f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800917c:	f000 fafe 	bl	800977c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009180:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009182:	f000 f887 	bl	8009294 <prvIsQueueEmpty>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	f43f af4c 	beq.w	8009026 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800918e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00d      	beq.n	80091b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009194:	f001 fa98 	bl	800a6c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009198:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800919a:	f000 f811 	bl	80091c0 <prvGetDisinheritPriorityAfterTimeout>
 800919e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80091a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 ff24 	bl	8009ff4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80091ac:	f001 fabe 	bl	800a72c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3738      	adds	r7, #56	@ 0x38
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	e000ed04 	.word	0xe000ed04

080091c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d006      	beq.n	80091de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f1c3 0307 	rsb	r3, r3, #7
 80091da:	60fb      	str	r3, [r7, #12]
 80091dc:	e001      	b.n	80091e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80091de:	2300      	movs	r3, #0
 80091e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80091e2:	68fb      	ldr	r3, [r7, #12]
	}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091f8:	f001 fa66 	bl	800a6c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009202:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009204:	e011      	b.n	800922a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920a:	2b00      	cmp	r3, #0
 800920c:	d012      	beq.n	8009234 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	3324      	adds	r3, #36	@ 0x24
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fc94 	bl	8009b40 <xTaskRemoveFromEventList>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800921e:	f000 fd6d 	bl	8009cfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	3b01      	subs	r3, #1
 8009226:	b2db      	uxtb	r3, r3
 8009228:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800922a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800922e:	2b00      	cmp	r3, #0
 8009230:	dce9      	bgt.n	8009206 <prvUnlockQueue+0x16>
 8009232:	e000      	b.n	8009236 <prvUnlockQueue+0x46>
					break;
 8009234:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	22ff      	movs	r2, #255	@ 0xff
 800923a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800923e:	f001 fa75 	bl	800a72c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009242:	f001 fa41 	bl	800a6c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800924c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800924e:	e011      	b.n	8009274 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d012      	beq.n	800927e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3310      	adds	r3, #16
 800925c:	4618      	mov	r0, r3
 800925e:	f000 fc6f 	bl	8009b40 <xTaskRemoveFromEventList>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009268:	f000 fd48 	bl	8009cfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	3b01      	subs	r3, #1
 8009270:	b2db      	uxtb	r3, r3
 8009272:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009278:	2b00      	cmp	r3, #0
 800927a:	dce9      	bgt.n	8009250 <prvUnlockQueue+0x60>
 800927c:	e000      	b.n	8009280 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800927e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	22ff      	movs	r2, #255	@ 0xff
 8009284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009288:	f001 fa50 	bl	800a72c <vPortExitCritical>
}
 800928c:	bf00      	nop
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800929c:	f001 fa14 	bl	800a6c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d102      	bne.n	80092ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092a8:	2301      	movs	r3, #1
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	e001      	b.n	80092b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092b2:	f001 fa3b 	bl	800a72c <vPortExitCritical>

	return xReturn;
 80092b6:	68fb      	ldr	r3, [r7, #12]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08e      	sub	sp, #56	@ 0x38
 80092c4:	af04      	add	r7, sp, #16
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80092ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10b      	bne.n	80092ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	623b      	str	r3, [r7, #32]
}
 80092e6:	bf00      	nop
 80092e8:	bf00      	nop
 80092ea:	e7fd      	b.n	80092e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80092ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10b      	bne.n	800930a <xTaskCreateStatic+0x4a>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	61fb      	str	r3, [r7, #28]
}
 8009304:	bf00      	nop
 8009306:	bf00      	nop
 8009308:	e7fd      	b.n	8009306 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800930a:	23a0      	movs	r3, #160	@ 0xa0
 800930c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	2ba0      	cmp	r3, #160	@ 0xa0
 8009312:	d00b      	beq.n	800932c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	61bb      	str	r3, [r7, #24]
}
 8009326:	bf00      	nop
 8009328:	bf00      	nop
 800932a:	e7fd      	b.n	8009328 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800932c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800932e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009330:	2b00      	cmp	r3, #0
 8009332:	d01e      	beq.n	8009372 <xTaskCreateStatic+0xb2>
 8009334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009336:	2b00      	cmp	r3, #0
 8009338:	d01b      	beq.n	8009372 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800933a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009340:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009342:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009346:	2202      	movs	r2, #2
 8009348:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800934c:	2300      	movs	r3, #0
 800934e:	9303      	str	r3, [sp, #12]
 8009350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009352:	9302      	str	r3, [sp, #8]
 8009354:	f107 0314 	add.w	r3, r7, #20
 8009358:	9301      	str	r3, [sp, #4]
 800935a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	68b9      	ldr	r1, [r7, #8]
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f000 f851 	bl	800940c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800936a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800936c:	f000 f8ee 	bl	800954c <prvAddNewTaskToReadyList>
 8009370:	e001      	b.n	8009376 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009372:	2300      	movs	r3, #0
 8009374:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009376:	697b      	ldr	r3, [r7, #20]
	}
 8009378:	4618      	mov	r0, r3
 800937a:	3728      	adds	r7, #40	@ 0x28
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08c      	sub	sp, #48	@ 0x30
 8009384:	af04      	add	r7, sp, #16
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	603b      	str	r3, [r7, #0]
 800938c:	4613      	mov	r3, r2
 800938e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009390:	88fb      	ldrh	r3, [r7, #6]
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4618      	mov	r0, r3
 8009396:	f001 fab9 	bl	800a90c <pvPortMalloc>
 800939a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00e      	beq.n	80093c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80093a2:	20a0      	movs	r0, #160	@ 0xa0
 80093a4:	f001 fab2 	bl	800a90c <pvPortMalloc>
 80093a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80093b6:	e005      	b.n	80093c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80093b8:	6978      	ldr	r0, [r7, #20]
 80093ba:	f001 fb75 	bl	800aaa8 <vPortFree>
 80093be:	e001      	b.n	80093c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80093c0:	2300      	movs	r3, #0
 80093c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d017      	beq.n	80093fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093d2:	88fa      	ldrh	r2, [r7, #6]
 80093d4:	2300      	movs	r3, #0
 80093d6:	9303      	str	r3, [sp, #12]
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	9302      	str	r3, [sp, #8]
 80093dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093de:	9301      	str	r3, [sp, #4]
 80093e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	68b9      	ldr	r1, [r7, #8]
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 f80f 	bl	800940c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093ee:	69f8      	ldr	r0, [r7, #28]
 80093f0:	f000 f8ac 	bl	800954c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80093f4:	2301      	movs	r3, #1
 80093f6:	61bb      	str	r3, [r7, #24]
 80093f8:	e002      	b.n	8009400 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009400:	69bb      	ldr	r3, [r7, #24]
	}
 8009402:	4618      	mov	r0, r3
 8009404:	3720      	adds	r7, #32
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b088      	sub	sp, #32
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800941a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009424:	3b01      	subs	r3, #1
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	f023 0307 	bic.w	r3, r3, #7
 8009432:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00b      	beq.n	8009456 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	617b      	str	r3, [r7, #20]
}
 8009450:	bf00      	nop
 8009452:	bf00      	nop
 8009454:	e7fd      	b.n	8009452 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d01f      	beq.n	800949c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800945c:	2300      	movs	r3, #0
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	e012      	b.n	8009488 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	4413      	add	r3, r2
 8009468:	7819      	ldrb	r1, [r3, #0]
 800946a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	4413      	add	r3, r2
 8009470:	3334      	adds	r3, #52	@ 0x34
 8009472:	460a      	mov	r2, r1
 8009474:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	4413      	add	r3, r2
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d006      	beq.n	8009490 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	3301      	adds	r3, #1
 8009486:	61fb      	str	r3, [r7, #28]
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	2b0f      	cmp	r3, #15
 800948c:	d9e9      	bls.n	8009462 <prvInitialiseNewTask+0x56>
 800948e:	e000      	b.n	8009492 <prvInitialiseNewTask+0x86>
			{
				break;
 8009490:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800949a:	e003      	b.n	80094a4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800949c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80094a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a6:	2b06      	cmp	r3, #6
 80094a8:	d901      	bls.n	80094ae <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80094aa:	2306      	movs	r3, #6
 80094ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80094ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80094b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094b8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80094ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094bc:	2200      	movs	r2, #0
 80094be:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c2:	3304      	adds	r3, #4
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff fb82 	bl	8008bce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094cc:	3318      	adds	r3, #24
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7ff fb7d 	bl	8008bce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094dc:	f1c3 0207 	rsb	r2, r3, #7
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	2200      	movs	r2, #0
 80094ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	334c      	adds	r3, #76	@ 0x4c
 80094fe:	224c      	movs	r2, #76	@ 0x4c
 8009500:	2100      	movs	r1, #0
 8009502:	4618      	mov	r0, r3
 8009504:	f002 f990 	bl	800b828 <memset>
 8009508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950a:	4a0d      	ldr	r2, [pc, #52]	@ (8009540 <prvInitialiseNewTask+0x134>)
 800950c:	651a      	str	r2, [r3, #80]	@ 0x50
 800950e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009510:	4a0c      	ldr	r2, [pc, #48]	@ (8009544 <prvInitialiseNewTask+0x138>)
 8009512:	655a      	str	r2, [r3, #84]	@ 0x54
 8009514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009516:	4a0c      	ldr	r2, [pc, #48]	@ (8009548 <prvInitialiseNewTask+0x13c>)
 8009518:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	68f9      	ldr	r1, [r7, #12]
 800951e:	69b8      	ldr	r0, [r7, #24]
 8009520:	f000 ffa4 	bl	800a46c <pxPortInitialiseStack>
 8009524:	4602      	mov	r2, r0
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800952a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009536:	bf00      	nop
 8009538:	3720      	adds	r7, #32
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	2000580c 	.word	0x2000580c
 8009544:	20005874 	.word	0x20005874
 8009548:	200058dc 	.word	0x200058dc

0800954c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009554:	f001 f8b8 	bl	800a6c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009558:	4b2a      	ldr	r3, [pc, #168]	@ (8009604 <prvAddNewTaskToReadyList+0xb8>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3301      	adds	r3, #1
 800955e:	4a29      	ldr	r2, [pc, #164]	@ (8009604 <prvAddNewTaskToReadyList+0xb8>)
 8009560:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009562:	4b29      	ldr	r3, [pc, #164]	@ (8009608 <prvAddNewTaskToReadyList+0xbc>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d109      	bne.n	800957e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800956a:	4a27      	ldr	r2, [pc, #156]	@ (8009608 <prvAddNewTaskToReadyList+0xbc>)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009570:	4b24      	ldr	r3, [pc, #144]	@ (8009604 <prvAddNewTaskToReadyList+0xb8>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d110      	bne.n	800959a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009578:	f000 fbe4 	bl	8009d44 <prvInitialiseTaskLists>
 800957c:	e00d      	b.n	800959a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800957e:	4b23      	ldr	r3, [pc, #140]	@ (800960c <prvAddNewTaskToReadyList+0xc0>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d109      	bne.n	800959a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009586:	4b20      	ldr	r3, [pc, #128]	@ (8009608 <prvAddNewTaskToReadyList+0xbc>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009590:	429a      	cmp	r2, r3
 8009592:	d802      	bhi.n	800959a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009594:	4a1c      	ldr	r2, [pc, #112]	@ (8009608 <prvAddNewTaskToReadyList+0xbc>)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800959a:	4b1d      	ldr	r3, [pc, #116]	@ (8009610 <prvAddNewTaskToReadyList+0xc4>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	3301      	adds	r3, #1
 80095a0:	4a1b      	ldr	r2, [pc, #108]	@ (8009610 <prvAddNewTaskToReadyList+0xc4>)
 80095a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a8:	2201      	movs	r2, #1
 80095aa:	409a      	lsls	r2, r3
 80095ac:	4b19      	ldr	r3, [pc, #100]	@ (8009614 <prvAddNewTaskToReadyList+0xc8>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	4a18      	ldr	r2, [pc, #96]	@ (8009614 <prvAddNewTaskToReadyList+0xc8>)
 80095b4:	6013      	str	r3, [r2, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ba:	4613      	mov	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4a15      	ldr	r2, [pc, #84]	@ (8009618 <prvAddNewTaskToReadyList+0xcc>)
 80095c4:	441a      	add	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3304      	adds	r3, #4
 80095ca:	4619      	mov	r1, r3
 80095cc:	4610      	mov	r0, r2
 80095ce:	f7ff fb0b 	bl	8008be8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095d2:	f001 f8ab 	bl	800a72c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095d6:	4b0d      	ldr	r3, [pc, #52]	@ (800960c <prvAddNewTaskToReadyList+0xc0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00e      	beq.n	80095fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095de:	4b0a      	ldr	r3, [pc, #40]	@ (8009608 <prvAddNewTaskToReadyList+0xbc>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d207      	bcs.n	80095fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095ec:	4b0b      	ldr	r3, [pc, #44]	@ (800961c <prvAddNewTaskToReadyList+0xd0>)
 80095ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	200008dc 	.word	0x200008dc
 8009608:	200007dc 	.word	0x200007dc
 800960c:	200008e8 	.word	0x200008e8
 8009610:	200008f8 	.word	0x200008f8
 8009614:	200008e4 	.word	0x200008e4
 8009618:	200007e0 	.word	0x200007e0
 800961c:	e000ed04 	.word	0xe000ed04

08009620 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009628:	2300      	movs	r3, #0
 800962a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d018      	beq.n	8009664 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009632:	4b14      	ldr	r3, [pc, #80]	@ (8009684 <vTaskDelay+0x64>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00b      	beq.n	8009652 <vTaskDelay+0x32>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	60bb      	str	r3, [r7, #8]
}
 800964c:	bf00      	nop
 800964e:	bf00      	nop
 8009650:	e7fd      	b.n	800964e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009652:	f000 f885 	bl	8009760 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009656:	2100      	movs	r1, #0
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fea1 	bl	800a3a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800965e:	f000 f88d 	bl	800977c <xTaskResumeAll>
 8009662:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d107      	bne.n	800967a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800966a:	4b07      	ldr	r3, [pc, #28]	@ (8009688 <vTaskDelay+0x68>)
 800966c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800967a:	bf00      	nop
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20000904 	.word	0x20000904
 8009688:	e000ed04 	.word	0xe000ed04

0800968c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b08a      	sub	sp, #40	@ 0x28
 8009690:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009692:	2300      	movs	r3, #0
 8009694:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009696:	2300      	movs	r3, #0
 8009698:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800969a:	463a      	mov	r2, r7
 800969c:	1d39      	adds	r1, r7, #4
 800969e:	f107 0308 	add.w	r3, r7, #8
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7f7 fc4e 	bl	8000f44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096a8:	6839      	ldr	r1, [r7, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	9202      	str	r2, [sp, #8]
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	2300      	movs	r3, #0
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	2300      	movs	r3, #0
 80096b8:	460a      	mov	r2, r1
 80096ba:	4921      	ldr	r1, [pc, #132]	@ (8009740 <vTaskStartScheduler+0xb4>)
 80096bc:	4821      	ldr	r0, [pc, #132]	@ (8009744 <vTaskStartScheduler+0xb8>)
 80096be:	f7ff fdff 	bl	80092c0 <xTaskCreateStatic>
 80096c2:	4603      	mov	r3, r0
 80096c4:	4a20      	ldr	r2, [pc, #128]	@ (8009748 <vTaskStartScheduler+0xbc>)
 80096c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096c8:	4b1f      	ldr	r3, [pc, #124]	@ (8009748 <vTaskStartScheduler+0xbc>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096d0:	2301      	movs	r3, #1
 80096d2:	617b      	str	r3, [r7, #20]
 80096d4:	e001      	b.n	80096da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096d6:	2300      	movs	r3, #0
 80096d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d11b      	bne.n	8009718 <vTaskStartScheduler+0x8c>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	613b      	str	r3, [r7, #16]
}
 80096f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096f4:	4b15      	ldr	r3, [pc, #84]	@ (800974c <vTaskStartScheduler+0xc0>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	334c      	adds	r3, #76	@ 0x4c
 80096fa:	4a15      	ldr	r2, [pc, #84]	@ (8009750 <vTaskStartScheduler+0xc4>)
 80096fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096fe:	4b15      	ldr	r3, [pc, #84]	@ (8009754 <vTaskStartScheduler+0xc8>)
 8009700:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009704:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009706:	4b14      	ldr	r3, [pc, #80]	@ (8009758 <vTaskStartScheduler+0xcc>)
 8009708:	2201      	movs	r2, #1
 800970a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800970c:	4b13      	ldr	r3, [pc, #76]	@ (800975c <vTaskStartScheduler+0xd0>)
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009712:	f000 ff35 	bl	800a580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009716:	e00f      	b.n	8009738 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800971e:	d10b      	bne.n	8009738 <vTaskStartScheduler+0xac>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	60fb      	str	r3, [r7, #12]
}
 8009732:	bf00      	nop
 8009734:	bf00      	nop
 8009736:	e7fd      	b.n	8009734 <vTaskStartScheduler+0xa8>
}
 8009738:	bf00      	nop
 800973a:	3718      	adds	r7, #24
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	0800c748 	.word	0x0800c748
 8009744:	08009d15 	.word	0x08009d15
 8009748:	20000900 	.word	0x20000900
 800974c:	200007dc 	.word	0x200007dc
 8009750:	200000fc 	.word	0x200000fc
 8009754:	200008fc 	.word	0x200008fc
 8009758:	200008e8 	.word	0x200008e8
 800975c:	200008e0 	.word	0x200008e0

08009760 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009760:	b480      	push	{r7}
 8009762:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009764:	4b04      	ldr	r3, [pc, #16]	@ (8009778 <vTaskSuspendAll+0x18>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3301      	adds	r3, #1
 800976a:	4a03      	ldr	r2, [pc, #12]	@ (8009778 <vTaskSuspendAll+0x18>)
 800976c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800976e:	bf00      	nop
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	20000904 	.word	0x20000904

0800977c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009786:	2300      	movs	r3, #0
 8009788:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800978a:	4b42      	ldr	r3, [pc, #264]	@ (8009894 <xTaskResumeAll+0x118>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10b      	bne.n	80097aa <xTaskResumeAll+0x2e>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	603b      	str	r3, [r7, #0]
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	e7fd      	b.n	80097a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097aa:	f000 ff8d 	bl	800a6c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097ae:	4b39      	ldr	r3, [pc, #228]	@ (8009894 <xTaskResumeAll+0x118>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3b01      	subs	r3, #1
 80097b4:	4a37      	ldr	r2, [pc, #220]	@ (8009894 <xTaskResumeAll+0x118>)
 80097b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097b8:	4b36      	ldr	r3, [pc, #216]	@ (8009894 <xTaskResumeAll+0x118>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d161      	bne.n	8009884 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097c0:	4b35      	ldr	r3, [pc, #212]	@ (8009898 <xTaskResumeAll+0x11c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d05d      	beq.n	8009884 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097c8:	e02e      	b.n	8009828 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ca:	4b34      	ldr	r3, [pc, #208]	@ (800989c <xTaskResumeAll+0x120>)
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3318      	adds	r3, #24
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7ff fa63 	bl	8008ca2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3304      	adds	r3, #4
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff fa5e 	bl	8008ca2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ea:	2201      	movs	r2, #1
 80097ec:	409a      	lsls	r2, r3
 80097ee:	4b2c      	ldr	r3, [pc, #176]	@ (80098a0 <xTaskResumeAll+0x124>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	4a2a      	ldr	r2, [pc, #168]	@ (80098a0 <xTaskResumeAll+0x124>)
 80097f6:	6013      	str	r3, [r2, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097fc:	4613      	mov	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4a27      	ldr	r2, [pc, #156]	@ (80098a4 <xTaskResumeAll+0x128>)
 8009806:	441a      	add	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3304      	adds	r3, #4
 800980c:	4619      	mov	r1, r3
 800980e:	4610      	mov	r0, r2
 8009810:	f7ff f9ea 	bl	8008be8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009818:	4b23      	ldr	r3, [pc, #140]	@ (80098a8 <xTaskResumeAll+0x12c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981e:	429a      	cmp	r2, r3
 8009820:	d302      	bcc.n	8009828 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009822:	4b22      	ldr	r3, [pc, #136]	@ (80098ac <xTaskResumeAll+0x130>)
 8009824:	2201      	movs	r2, #1
 8009826:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009828:	4b1c      	ldr	r3, [pc, #112]	@ (800989c <xTaskResumeAll+0x120>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1cc      	bne.n	80097ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009836:	f000 fb29 	bl	8009e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800983a:	4b1d      	ldr	r3, [pc, #116]	@ (80098b0 <xTaskResumeAll+0x134>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d010      	beq.n	8009868 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009846:	f000 f837 	bl	80098b8 <xTaskIncrementTick>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d002      	beq.n	8009856 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009850:	4b16      	ldr	r3, [pc, #88]	@ (80098ac <xTaskResumeAll+0x130>)
 8009852:	2201      	movs	r2, #1
 8009854:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	3b01      	subs	r3, #1
 800985a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1f1      	bne.n	8009846 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009862:	4b13      	ldr	r3, [pc, #76]	@ (80098b0 <xTaskResumeAll+0x134>)
 8009864:	2200      	movs	r2, #0
 8009866:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009868:	4b10      	ldr	r3, [pc, #64]	@ (80098ac <xTaskResumeAll+0x130>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d009      	beq.n	8009884 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009870:	2301      	movs	r3, #1
 8009872:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009874:	4b0f      	ldr	r3, [pc, #60]	@ (80098b4 <xTaskResumeAll+0x138>)
 8009876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009884:	f000 ff52 	bl	800a72c <vPortExitCritical>

	return xAlreadyYielded;
 8009888:	68bb      	ldr	r3, [r7, #8]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20000904 	.word	0x20000904
 8009898:	200008dc 	.word	0x200008dc
 800989c:	2000089c 	.word	0x2000089c
 80098a0:	200008e4 	.word	0x200008e4
 80098a4:	200007e0 	.word	0x200007e0
 80098a8:	200007dc 	.word	0x200007dc
 80098ac:	200008f0 	.word	0x200008f0
 80098b0:	200008ec 	.word	0x200008ec
 80098b4:	e000ed04 	.word	0xe000ed04

080098b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098be:	2300      	movs	r3, #0
 80098c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098c2:	4b4f      	ldr	r3, [pc, #316]	@ (8009a00 <xTaskIncrementTick+0x148>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f040 808f 	bne.w	80099ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098cc:	4b4d      	ldr	r3, [pc, #308]	@ (8009a04 <xTaskIncrementTick+0x14c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	3301      	adds	r3, #1
 80098d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098d4:	4a4b      	ldr	r2, [pc, #300]	@ (8009a04 <xTaskIncrementTick+0x14c>)
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d121      	bne.n	8009924 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80098e0:	4b49      	ldr	r3, [pc, #292]	@ (8009a08 <xTaskIncrementTick+0x150>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00b      	beq.n	8009902 <xTaskIncrementTick+0x4a>
	__asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	603b      	str	r3, [r7, #0]
}
 80098fc:	bf00      	nop
 80098fe:	bf00      	nop
 8009900:	e7fd      	b.n	80098fe <xTaskIncrementTick+0x46>
 8009902:	4b41      	ldr	r3, [pc, #260]	@ (8009a08 <xTaskIncrementTick+0x150>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	4b40      	ldr	r3, [pc, #256]	@ (8009a0c <xTaskIncrementTick+0x154>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a3e      	ldr	r2, [pc, #248]	@ (8009a08 <xTaskIncrementTick+0x150>)
 800990e:	6013      	str	r3, [r2, #0]
 8009910:	4a3e      	ldr	r2, [pc, #248]	@ (8009a0c <xTaskIncrementTick+0x154>)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	4b3e      	ldr	r3, [pc, #248]	@ (8009a10 <xTaskIncrementTick+0x158>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3301      	adds	r3, #1
 800991c:	4a3c      	ldr	r2, [pc, #240]	@ (8009a10 <xTaskIncrementTick+0x158>)
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	f000 fab4 	bl	8009e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009924:	4b3b      	ldr	r3, [pc, #236]	@ (8009a14 <xTaskIncrementTick+0x15c>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	429a      	cmp	r2, r3
 800992c:	d348      	bcc.n	80099c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800992e:	4b36      	ldr	r3, [pc, #216]	@ (8009a08 <xTaskIncrementTick+0x150>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009938:	4b36      	ldr	r3, [pc, #216]	@ (8009a14 <xTaskIncrementTick+0x15c>)
 800993a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800993e:	601a      	str	r2, [r3, #0]
					break;
 8009940:	e03e      	b.n	80099c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009942:	4b31      	ldr	r3, [pc, #196]	@ (8009a08 <xTaskIncrementTick+0x150>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	429a      	cmp	r2, r3
 8009958:	d203      	bcs.n	8009962 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800995a:	4a2e      	ldr	r2, [pc, #184]	@ (8009a14 <xTaskIncrementTick+0x15c>)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009960:	e02e      	b.n	80099c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	3304      	adds	r3, #4
 8009966:	4618      	mov	r0, r3
 8009968:	f7ff f99b 	bl	8008ca2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009970:	2b00      	cmp	r3, #0
 8009972:	d004      	beq.n	800997e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	3318      	adds	r3, #24
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff f992 	bl	8008ca2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009982:	2201      	movs	r2, #1
 8009984:	409a      	lsls	r2, r3
 8009986:	4b24      	ldr	r3, [pc, #144]	@ (8009a18 <xTaskIncrementTick+0x160>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4313      	orrs	r3, r2
 800998c:	4a22      	ldr	r2, [pc, #136]	@ (8009a18 <xTaskIncrementTick+0x160>)
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009994:	4613      	mov	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4413      	add	r3, r2
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	4a1f      	ldr	r2, [pc, #124]	@ (8009a1c <xTaskIncrementTick+0x164>)
 800999e:	441a      	add	r2, r3
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	3304      	adds	r3, #4
 80099a4:	4619      	mov	r1, r3
 80099a6:	4610      	mov	r0, r2
 80099a8:	f7ff f91e 	bl	8008be8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b0:	4b1b      	ldr	r3, [pc, #108]	@ (8009a20 <xTaskIncrementTick+0x168>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d3b9      	bcc.n	800992e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80099ba:	2301      	movs	r3, #1
 80099bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099be:	e7b6      	b.n	800992e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099c0:	4b17      	ldr	r3, [pc, #92]	@ (8009a20 <xTaskIncrementTick+0x168>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099c6:	4915      	ldr	r1, [pc, #84]	@ (8009a1c <xTaskIncrementTick+0x164>)
 80099c8:	4613      	mov	r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4413      	add	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	440b      	add	r3, r1
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d901      	bls.n	80099dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80099d8:	2301      	movs	r3, #1
 80099da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099dc:	4b11      	ldr	r3, [pc, #68]	@ (8009a24 <xTaskIncrementTick+0x16c>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d007      	beq.n	80099f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80099e4:	2301      	movs	r3, #1
 80099e6:	617b      	str	r3, [r7, #20]
 80099e8:	e004      	b.n	80099f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80099ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009a28 <xTaskIncrementTick+0x170>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3301      	adds	r3, #1
 80099f0:	4a0d      	ldr	r2, [pc, #52]	@ (8009a28 <xTaskIncrementTick+0x170>)
 80099f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80099f4:	697b      	ldr	r3, [r7, #20]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20000904 	.word	0x20000904
 8009a04:	200008e0 	.word	0x200008e0
 8009a08:	20000894 	.word	0x20000894
 8009a0c:	20000898 	.word	0x20000898
 8009a10:	200008f4 	.word	0x200008f4
 8009a14:	200008fc 	.word	0x200008fc
 8009a18:	200008e4 	.word	0x200008e4
 8009a1c:	200007e0 	.word	0x200007e0
 8009a20:	200007dc 	.word	0x200007dc
 8009a24:	200008f0 	.word	0x200008f0
 8009a28:	200008ec 	.word	0x200008ec

08009a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b087      	sub	sp, #28
 8009a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a32:	4b2a      	ldr	r3, [pc, #168]	@ (8009adc <vTaskSwitchContext+0xb0>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a3a:	4b29      	ldr	r3, [pc, #164]	@ (8009ae0 <vTaskSwitchContext+0xb4>)
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a40:	e045      	b.n	8009ace <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009a42:	4b27      	ldr	r3, [pc, #156]	@ (8009ae0 <vTaskSwitchContext+0xb4>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a48:	4b26      	ldr	r3, [pc, #152]	@ (8009ae4 <vTaskSwitchContext+0xb8>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	fab3 f383 	clz	r3, r3
 8009a54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009a56:	7afb      	ldrb	r3, [r7, #11]
 8009a58:	f1c3 031f 	rsb	r3, r3, #31
 8009a5c:	617b      	str	r3, [r7, #20]
 8009a5e:	4922      	ldr	r1, [pc, #136]	@ (8009ae8 <vTaskSwitchContext+0xbc>)
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	4613      	mov	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	440b      	add	r3, r1
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10b      	bne.n	8009a8a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	607b      	str	r3, [r7, #4]
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	e7fd      	b.n	8009a86 <vTaskSwitchContext+0x5a>
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4a14      	ldr	r2, [pc, #80]	@ (8009ae8 <vTaskSwitchContext+0xbc>)
 8009a96:	4413      	add	r3, r2
 8009a98:	613b      	str	r3, [r7, #16]
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	605a      	str	r2, [r3, #4]
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	3308      	adds	r3, #8
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d104      	bne.n	8009aba <vTaskSwitchContext+0x8e>
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	605a      	str	r2, [r3, #4]
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8009aec <vTaskSwitchContext+0xc0>)
 8009ac2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ac4:	4b09      	ldr	r3, [pc, #36]	@ (8009aec <vTaskSwitchContext+0xc0>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	334c      	adds	r3, #76	@ 0x4c
 8009aca:	4a09      	ldr	r2, [pc, #36]	@ (8009af0 <vTaskSwitchContext+0xc4>)
 8009acc:	6013      	str	r3, [r2, #0]
}
 8009ace:	bf00      	nop
 8009ad0:	371c      	adds	r7, #28
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	20000904 	.word	0x20000904
 8009ae0:	200008f0 	.word	0x200008f0
 8009ae4:	200008e4 	.word	0x200008e4
 8009ae8:	200007e0 	.word	0x200007e0
 8009aec:	200007dc 	.word	0x200007dc
 8009af0:	200000fc 	.word	0x200000fc

08009af4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10b      	bne.n	8009b1c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	60fb      	str	r3, [r7, #12]
}
 8009b16:	bf00      	nop
 8009b18:	bf00      	nop
 8009b1a:	e7fd      	b.n	8009b18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b1c:	4b07      	ldr	r3, [pc, #28]	@ (8009b3c <vTaskPlaceOnEventList+0x48>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3318      	adds	r3, #24
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7ff f883 	bl	8008c30 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	6838      	ldr	r0, [r7, #0]
 8009b2e:	f000 fc37 	bl	800a3a0 <prvAddCurrentTaskToDelayedList>
}
 8009b32:	bf00      	nop
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	200007dc 	.word	0x200007dc

08009b40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10b      	bne.n	8009b6e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	60fb      	str	r3, [r7, #12]
}
 8009b68:	bf00      	nop
 8009b6a:	bf00      	nop
 8009b6c:	e7fd      	b.n	8009b6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	3318      	adds	r3, #24
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7ff f895 	bl	8008ca2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b78:	4b1d      	ldr	r3, [pc, #116]	@ (8009bf0 <xTaskRemoveFromEventList+0xb0>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d11c      	bne.n	8009bba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	3304      	adds	r3, #4
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7ff f88c 	bl	8008ca2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8e:	2201      	movs	r2, #1
 8009b90:	409a      	lsls	r2, r3
 8009b92:	4b18      	ldr	r3, [pc, #96]	@ (8009bf4 <xTaskRemoveFromEventList+0xb4>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	4a16      	ldr	r2, [pc, #88]	@ (8009bf4 <xTaskRemoveFromEventList+0xb4>)
 8009b9a:	6013      	str	r3, [r2, #0]
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4a13      	ldr	r2, [pc, #76]	@ (8009bf8 <xTaskRemoveFromEventList+0xb8>)
 8009baa:	441a      	add	r2, r3
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	3304      	adds	r3, #4
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	f7ff f818 	bl	8008be8 <vListInsertEnd>
 8009bb8:	e005      	b.n	8009bc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	3318      	adds	r3, #24
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	480e      	ldr	r0, [pc, #56]	@ (8009bfc <xTaskRemoveFromEventList+0xbc>)
 8009bc2:	f7ff f811 	bl	8008be8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bca:	4b0d      	ldr	r3, [pc, #52]	@ (8009c00 <xTaskRemoveFromEventList+0xc0>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d905      	bls.n	8009be0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c04 <xTaskRemoveFromEventList+0xc4>)
 8009bda:	2201      	movs	r2, #1
 8009bdc:	601a      	str	r2, [r3, #0]
 8009bde:	e001      	b.n	8009be4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009be0:	2300      	movs	r3, #0
 8009be2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009be4:	697b      	ldr	r3, [r7, #20]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20000904 	.word	0x20000904
 8009bf4:	200008e4 	.word	0x200008e4
 8009bf8:	200007e0 	.word	0x200007e0
 8009bfc:	2000089c 	.word	0x2000089c
 8009c00:	200007dc 	.word	0x200007dc
 8009c04:	200008f0 	.word	0x200008f0

08009c08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c10:	4b06      	ldr	r3, [pc, #24]	@ (8009c2c <vTaskInternalSetTimeOutState+0x24>)
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c18:	4b05      	ldr	r3, [pc, #20]	@ (8009c30 <vTaskInternalSetTimeOutState+0x28>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	605a      	str	r2, [r3, #4]
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	200008f4 	.word	0x200008f4
 8009c30:	200008e0 	.word	0x200008e0

08009c34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b088      	sub	sp, #32
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10b      	bne.n	8009c5c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	613b      	str	r3, [r7, #16]
}
 8009c56:	bf00      	nop
 8009c58:	bf00      	nop
 8009c5a:	e7fd      	b.n	8009c58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10b      	bne.n	8009c7a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	60fb      	str	r3, [r7, #12]
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop
 8009c78:	e7fd      	b.n	8009c76 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009c7a:	f000 fd25 	bl	800a6c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8009cf4 <xTaskCheckForTimeOut+0xc0>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	69ba      	ldr	r2, [r7, #24]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c96:	d102      	bne.n	8009c9e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	61fb      	str	r3, [r7, #28]
 8009c9c:	e023      	b.n	8009ce6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	4b15      	ldr	r3, [pc, #84]	@ (8009cf8 <xTaskCheckForTimeOut+0xc4>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d007      	beq.n	8009cba <xTaskCheckForTimeOut+0x86>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	69ba      	ldr	r2, [r7, #24]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d302      	bcc.n	8009cba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	61fb      	str	r3, [r7, #28]
 8009cb8:	e015      	b.n	8009ce6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d20b      	bcs.n	8009cdc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	1ad2      	subs	r2, r2, r3
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f7ff ff99 	bl	8009c08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	61fb      	str	r3, [r7, #28]
 8009cda:	e004      	b.n	8009ce6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009ce6:	f000 fd21 	bl	800a72c <vPortExitCritical>

	return xReturn;
 8009cea:	69fb      	ldr	r3, [r7, #28]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3720      	adds	r7, #32
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	200008e0 	.word	0x200008e0
 8009cf8:	200008f4 	.word	0x200008f4

08009cfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d00:	4b03      	ldr	r3, [pc, #12]	@ (8009d10 <vTaskMissedYield+0x14>)
 8009d02:	2201      	movs	r2, #1
 8009d04:	601a      	str	r2, [r3, #0]
}
 8009d06:	bf00      	nop
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	200008f0 	.word	0x200008f0

08009d14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d1c:	f000 f852 	bl	8009dc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d20:	4b06      	ldr	r3, [pc, #24]	@ (8009d3c <prvIdleTask+0x28>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d9f9      	bls.n	8009d1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d28:	4b05      	ldr	r3, [pc, #20]	@ (8009d40 <prvIdleTask+0x2c>)
 8009d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d38:	e7f0      	b.n	8009d1c <prvIdleTask+0x8>
 8009d3a:	bf00      	nop
 8009d3c:	200007e0 	.word	0x200007e0
 8009d40:	e000ed04 	.word	0xe000ed04

08009d44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	607b      	str	r3, [r7, #4]
 8009d4e:	e00c      	b.n	8009d6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	4613      	mov	r3, r2
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4413      	add	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4a12      	ldr	r2, [pc, #72]	@ (8009da4 <prvInitialiseTaskLists+0x60>)
 8009d5c:	4413      	add	r3, r2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fe ff15 	bl	8008b8e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	3301      	adds	r3, #1
 8009d68:	607b      	str	r3, [r7, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b06      	cmp	r3, #6
 8009d6e:	d9ef      	bls.n	8009d50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d70:	480d      	ldr	r0, [pc, #52]	@ (8009da8 <prvInitialiseTaskLists+0x64>)
 8009d72:	f7fe ff0c 	bl	8008b8e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d76:	480d      	ldr	r0, [pc, #52]	@ (8009dac <prvInitialiseTaskLists+0x68>)
 8009d78:	f7fe ff09 	bl	8008b8e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d7c:	480c      	ldr	r0, [pc, #48]	@ (8009db0 <prvInitialiseTaskLists+0x6c>)
 8009d7e:	f7fe ff06 	bl	8008b8e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d82:	480c      	ldr	r0, [pc, #48]	@ (8009db4 <prvInitialiseTaskLists+0x70>)
 8009d84:	f7fe ff03 	bl	8008b8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d88:	480b      	ldr	r0, [pc, #44]	@ (8009db8 <prvInitialiseTaskLists+0x74>)
 8009d8a:	f7fe ff00 	bl	8008b8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8009dbc <prvInitialiseTaskLists+0x78>)
 8009d90:	4a05      	ldr	r2, [pc, #20]	@ (8009da8 <prvInitialiseTaskLists+0x64>)
 8009d92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d94:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc0 <prvInitialiseTaskLists+0x7c>)
 8009d96:	4a05      	ldr	r2, [pc, #20]	@ (8009dac <prvInitialiseTaskLists+0x68>)
 8009d98:	601a      	str	r2, [r3, #0]
}
 8009d9a:	bf00      	nop
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	200007e0 	.word	0x200007e0
 8009da8:	2000086c 	.word	0x2000086c
 8009dac:	20000880 	.word	0x20000880
 8009db0:	2000089c 	.word	0x2000089c
 8009db4:	200008b0 	.word	0x200008b0
 8009db8:	200008c8 	.word	0x200008c8
 8009dbc:	20000894 	.word	0x20000894
 8009dc0:	20000898 	.word	0x20000898

08009dc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dca:	e019      	b.n	8009e00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009dcc:	f000 fc7c 	bl	800a6c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dd0:	4b10      	ldr	r3, [pc, #64]	@ (8009e14 <prvCheckTasksWaitingTermination+0x50>)
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3304      	adds	r3, #4
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7fe ff60 	bl	8008ca2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009de2:	4b0d      	ldr	r3, [pc, #52]	@ (8009e18 <prvCheckTasksWaitingTermination+0x54>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	4a0b      	ldr	r2, [pc, #44]	@ (8009e18 <prvCheckTasksWaitingTermination+0x54>)
 8009dea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009dec:	4b0b      	ldr	r3, [pc, #44]	@ (8009e1c <prvCheckTasksWaitingTermination+0x58>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	4a0a      	ldr	r2, [pc, #40]	@ (8009e1c <prvCheckTasksWaitingTermination+0x58>)
 8009df4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009df6:	f000 fc99 	bl	800a72c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f810 	bl	8009e20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e00:	4b06      	ldr	r3, [pc, #24]	@ (8009e1c <prvCheckTasksWaitingTermination+0x58>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1e1      	bne.n	8009dcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e08:	bf00      	nop
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	200008b0 	.word	0x200008b0
 8009e18:	200008dc 	.word	0x200008dc
 8009e1c:	200008c4 	.word	0x200008c4

08009e20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	334c      	adds	r3, #76	@ 0x4c
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f001 fd03 	bl	800b838 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d108      	bne.n	8009e4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 fe31 	bl	800aaa8 <vPortFree>
				vPortFree( pxTCB );
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fe2e 	bl	800aaa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e4c:	e019      	b.n	8009e82 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d103      	bne.n	8009e60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fe25 	bl	800aaa8 <vPortFree>
	}
 8009e5e:	e010      	b.n	8009e82 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d00b      	beq.n	8009e82 <prvDeleteTCB+0x62>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	60fb      	str	r3, [r7, #12]
}
 8009e7c:	bf00      	nop
 8009e7e:	bf00      	nop
 8009e80:	e7fd      	b.n	8009e7e <prvDeleteTCB+0x5e>
	}
 8009e82:	bf00      	nop
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e92:	4b0c      	ldr	r3, [pc, #48]	@ (8009ec4 <prvResetNextTaskUnblockTime+0x38>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d104      	bne.n	8009ea6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8009e9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ea2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ea4:	e008      	b.n	8009eb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea6:	4b07      	ldr	r3, [pc, #28]	@ (8009ec4 <prvResetNextTaskUnblockTime+0x38>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	4a04      	ldr	r2, [pc, #16]	@ (8009ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8009eb6:	6013      	str	r3, [r2, #0]
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	20000894 	.word	0x20000894
 8009ec8:	200008fc 	.word	0x200008fc

08009ecc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8009f00 <xTaskGetSchedulerState+0x34>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d102      	bne.n	8009ee0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009eda:	2301      	movs	r3, #1
 8009edc:	607b      	str	r3, [r7, #4]
 8009ede:	e008      	b.n	8009ef2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ee0:	4b08      	ldr	r3, [pc, #32]	@ (8009f04 <xTaskGetSchedulerState+0x38>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d102      	bne.n	8009eee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ee8:	2302      	movs	r3, #2
 8009eea:	607b      	str	r3, [r7, #4]
 8009eec:	e001      	b.n	8009ef2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ef2:	687b      	ldr	r3, [r7, #4]
	}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	200008e8 	.word	0x200008e8
 8009f04:	20000904 	.word	0x20000904

08009f08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d05e      	beq.n	8009fdc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f22:	4b31      	ldr	r3, [pc, #196]	@ (8009fe8 <xTaskPriorityInherit+0xe0>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d24e      	bcs.n	8009fca <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	db06      	blt.n	8009f42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f34:	4b2c      	ldr	r3, [pc, #176]	@ (8009fe8 <xTaskPriorityInherit+0xe0>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f3a:	f1c3 0207 	rsb	r2, r3, #7
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	6959      	ldr	r1, [r3, #20]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4a26      	ldr	r2, [pc, #152]	@ (8009fec <xTaskPriorityInherit+0xe4>)
 8009f54:	4413      	add	r3, r2
 8009f56:	4299      	cmp	r1, r3
 8009f58:	d12f      	bne.n	8009fba <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe fe9f 	bl	8008ca2 <uxListRemove>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10a      	bne.n	8009f80 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f6e:	2201      	movs	r2, #1
 8009f70:	fa02 f303 	lsl.w	r3, r2, r3
 8009f74:	43da      	mvns	r2, r3
 8009f76:	4b1e      	ldr	r3, [pc, #120]	@ (8009ff0 <xTaskPriorityInherit+0xe8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ff0 <xTaskPriorityInherit+0xe8>)
 8009f7e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f80:	4b19      	ldr	r3, [pc, #100]	@ (8009fe8 <xTaskPriorityInherit+0xe0>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8e:	2201      	movs	r2, #1
 8009f90:	409a      	lsls	r2, r3
 8009f92:	4b17      	ldr	r3, [pc, #92]	@ (8009ff0 <xTaskPriorityInherit+0xe8>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	4a15      	ldr	r2, [pc, #84]	@ (8009ff0 <xTaskPriorityInherit+0xe8>)
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4a10      	ldr	r2, [pc, #64]	@ (8009fec <xTaskPriorityInherit+0xe4>)
 8009faa:	441a      	add	r2, r3
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	f7fe fe18 	bl	8008be8 <vListInsertEnd>
 8009fb8:	e004      	b.n	8009fc4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fba:	4b0b      	ldr	r3, [pc, #44]	@ (8009fe8 <xTaskPriorityInherit+0xe0>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	e008      	b.n	8009fdc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fce:	4b06      	ldr	r3, [pc, #24]	@ (8009fe8 <xTaskPriorityInherit+0xe0>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d201      	bcs.n	8009fdc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
	}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	200007dc 	.word	0x200007dc
 8009fec:	200007e0 	.word	0x200007e0
 8009ff0:	200008e4 	.word	0x200008e4

08009ff4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a002:	2301      	movs	r3, #1
 800a004:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d079      	beq.n	800a100 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10b      	bne.n	800a02c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	60fb      	str	r3, [r7, #12]
}
 800a026:	bf00      	nop
 800a028:	bf00      	nop
 800a02a:	e7fd      	b.n	800a028 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d902      	bls.n	800a03c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	61fb      	str	r3, [r7, #28]
 800a03a:	e002      	b.n	800a042 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a040:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d059      	beq.n	800a100 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	429a      	cmp	r2, r3
 800a054:	d154      	bne.n	800a100 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a056:	4b2c      	ldr	r3, [pc, #176]	@ (800a108 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	69ba      	ldr	r2, [r7, #24]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d10b      	bne.n	800a078 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	60bb      	str	r3, [r7, #8]
}
 800a072:	bf00      	nop
 800a074:	bf00      	nop
 800a076:	e7fd      	b.n	800a074 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a07c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	69fa      	ldr	r2, [r7, #28]
 800a082:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	db04      	blt.n	800a096 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	f1c3 0207 	rsb	r2, r3, #7
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	6959      	ldr	r1, [r3, #20]
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	4613      	mov	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4413      	add	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4a19      	ldr	r2, [pc, #100]	@ (800a10c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a0a6:	4413      	add	r3, r2
 800a0a8:	4299      	cmp	r1, r3
 800a0aa:	d129      	bne.n	800a100 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fe fdf6 	bl	8008ca2 <uxListRemove>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10a      	bne.n	800a0d2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c6:	43da      	mvns	r2, r3
 800a0c8:	4b11      	ldr	r3, [pc, #68]	@ (800a110 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	4a10      	ldr	r2, [pc, #64]	@ (800a110 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a0d0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	409a      	lsls	r2, r3
 800a0da:	4b0d      	ldr	r3, [pc, #52]	@ (800a110 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	4a0b      	ldr	r2, [pc, #44]	@ (800a110 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4a06      	ldr	r2, [pc, #24]	@ (800a10c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a0f2:	441a      	add	r2, r3
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f7fe fd74 	bl	8008be8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a100:	bf00      	nop
 800a102:	3720      	adds	r7, #32
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	200007dc 	.word	0x200007dc
 800a10c:	200007e0 	.word	0x200007e0
 800a110:	200008e4 	.word	0x200008e4

0800a114 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a114:	b480      	push	{r7}
 800a116:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a118:	4b07      	ldr	r3, [pc, #28]	@ (800a138 <pvTaskIncrementMutexHeldCount+0x24>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d004      	beq.n	800a12a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a120:	4b05      	ldr	r3, [pc, #20]	@ (800a138 <pvTaskIncrementMutexHeldCount+0x24>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a126:	3201      	adds	r2, #1
 800a128:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800a12a:	4b03      	ldr	r3, [pc, #12]	@ (800a138 <pvTaskIncrementMutexHeldCount+0x24>)
 800a12c:	681b      	ldr	r3, [r3, #0]
	}
 800a12e:	4618      	mov	r0, r3
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	200007dc 	.word	0x200007dc

0800a13c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800a146:	f000 fabf 	bl	800a6c8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a14a:	4b20      	ldr	r3, [pc, #128]	@ (800a1cc <ulTaskNotifyTake+0x90>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a152:	2b00      	cmp	r3, #0
 800a154:	d113      	bne.n	800a17e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a156:	4b1d      	ldr	r3, [pc, #116]	@ (800a1cc <ulTaskNotifyTake+0x90>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00b      	beq.n	800a17e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a166:	2101      	movs	r1, #1
 800a168:	6838      	ldr	r0, [r7, #0]
 800a16a:	f000 f919 	bl	800a3a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a16e:	4b18      	ldr	r3, [pc, #96]	@ (800a1d0 <ulTaskNotifyTake+0x94>)
 800a170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a17e:	f000 fad5 	bl	800a72c <vPortExitCritical>

		taskENTER_CRITICAL();
 800a182:	f000 faa1 	bl	800a6c8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800a186:	4b11      	ldr	r3, [pc, #68]	@ (800a1cc <ulTaskNotifyTake+0x90>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a18e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00e      	beq.n	800a1b4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d005      	beq.n	800a1a8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800a19c:	4b0b      	ldr	r3, [pc, #44]	@ (800a1cc <ulTaskNotifyTake+0x90>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800a1a6:	e005      	b.n	800a1b4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800a1a8:	4b08      	ldr	r3, [pc, #32]	@ (800a1cc <ulTaskNotifyTake+0x90>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	3a01      	subs	r2, #1
 800a1b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1b4:	4b05      	ldr	r3, [pc, #20]	@ (800a1cc <ulTaskNotifyTake+0x90>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800a1be:	f000 fab5 	bl	800a72c <vPortExitCritical>

		return ulReturn;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
	}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	200007dc 	.word	0x200007dc
 800a1d0:	e000ed04 	.word	0xe000ed04

0800a1d4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b08e      	sub	sp, #56	@ 0x38
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d10b      	bne.n	800a206 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a200:	bf00      	nop
 800a202:	bf00      	nop
 800a204:	e7fd      	b.n	800a202 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a206:	f000 fb3f 	bl	800a888 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800a20e:	f3ef 8211 	mrs	r2, BASEPRI
 800a212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	623a      	str	r2, [r7, #32]
 800a224:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a226:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a228:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d004      	beq.n	800a23a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a232:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a23c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800a240:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a246:	2202      	movs	r2, #2
 800a248:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800a24c:	79fb      	ldrb	r3, [r7, #7]
 800a24e:	2b04      	cmp	r3, #4
 800a250:	d82e      	bhi.n	800a2b0 <xTaskGenericNotifyFromISR+0xdc>
 800a252:	a201      	add	r2, pc, #4	@ (adr r2, 800a258 <xTaskGenericNotifyFromISR+0x84>)
 800a254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a258:	0800a2d5 	.word	0x0800a2d5
 800a25c:	0800a26d 	.word	0x0800a26d
 800a260:	0800a27f 	.word	0x0800a27f
 800a264:	0800a28f 	.word	0x0800a28f
 800a268:	0800a299 	.word	0x0800a299
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	431a      	orrs	r2, r3
 800a276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a278:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a27c:	e02d      	b.n	800a2da <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a280:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a284:	1c5a      	adds	r2, r3, #1
 800a286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a288:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a28c:	e025      	b.n	800a2da <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a296:	e020      	b.n	800a2da <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a298:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d004      	beq.n	800a2aa <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a2a8:	e017      	b.n	800a2da <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800a2ae:	e014      	b.n	800a2da <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a2b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2ba:	d00d      	beq.n	800a2d8 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800a2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	61bb      	str	r3, [r7, #24]
}
 800a2ce:	bf00      	nop
 800a2d0:	bf00      	nop
 800a2d2:	e7fd      	b.n	800a2d0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a2d4:	bf00      	nop
 800a2d6:	e000      	b.n	800a2da <xTaskGenericNotifyFromISR+0x106>
					break;
 800a2d8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a2da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d146      	bne.n	800a370 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00b      	beq.n	800a302 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800a2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ee:	f383 8811 	msr	BASEPRI, r3
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	617b      	str	r3, [r7, #20]
}
 800a2fc:	bf00      	nop
 800a2fe:	bf00      	nop
 800a300:	e7fd      	b.n	800a2fe <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a302:	4b21      	ldr	r3, [pc, #132]	@ (800a388 <xTaskGenericNotifyFromISR+0x1b4>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d11c      	bne.n	800a344 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30c:	3304      	adds	r3, #4
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fcc7 	bl	8008ca2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a318:	2201      	movs	r2, #1
 800a31a:	409a      	lsls	r2, r3
 800a31c:	4b1b      	ldr	r3, [pc, #108]	@ (800a38c <xTaskGenericNotifyFromISR+0x1b8>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4313      	orrs	r3, r2
 800a322:	4a1a      	ldr	r2, [pc, #104]	@ (800a38c <xTaskGenericNotifyFromISR+0x1b8>)
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a32a:	4613      	mov	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4413      	add	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4a17      	ldr	r2, [pc, #92]	@ (800a390 <xTaskGenericNotifyFromISR+0x1bc>)
 800a334:	441a      	add	r2, r3
 800a336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a338:	3304      	adds	r3, #4
 800a33a:	4619      	mov	r1, r3
 800a33c:	4610      	mov	r0, r2
 800a33e:	f7fe fc53 	bl	8008be8 <vListInsertEnd>
 800a342:	e005      	b.n	800a350 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a346:	3318      	adds	r3, #24
 800a348:	4619      	mov	r1, r3
 800a34a:	4812      	ldr	r0, [pc, #72]	@ (800a394 <xTaskGenericNotifyFromISR+0x1c0>)
 800a34c:	f7fe fc4c 	bl	8008be8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a354:	4b10      	ldr	r3, [pc, #64]	@ (800a398 <xTaskGenericNotifyFromISR+0x1c4>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d908      	bls.n	800a370 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a35e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a366:	2201      	movs	r2, #1
 800a368:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a36a:	4b0c      	ldr	r3, [pc, #48]	@ (800a39c <xTaskGenericNotifyFromISR+0x1c8>)
 800a36c:	2201      	movs	r2, #1
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a372:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	f383 8811 	msr	BASEPRI, r3
}
 800a37a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800a37e:	4618      	mov	r0, r3
 800a380:	3738      	adds	r7, #56	@ 0x38
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20000904 	.word	0x20000904
 800a38c:	200008e4 	.word	0x200008e4
 800a390:	200007e0 	.word	0x200007e0
 800a394:	2000089c 	.word	0x2000089c
 800a398:	200007dc 	.word	0x200007dc
 800a39c:	200008f0 	.word	0x200008f0

0800a3a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a3aa:	4b29      	ldr	r3, [pc, #164]	@ (800a450 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3b0:	4b28      	ldr	r3, [pc, #160]	@ (800a454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fe fc73 	bl	8008ca2 <uxListRemove>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10b      	bne.n	800a3da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a3c2:	4b24      	ldr	r3, [pc, #144]	@ (800a454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ce:	43da      	mvns	r2, r3
 800a3d0:	4b21      	ldr	r3, [pc, #132]	@ (800a458 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	4a20      	ldr	r2, [pc, #128]	@ (800a458 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a3d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3e0:	d10a      	bne.n	800a3f8 <prvAddCurrentTaskToDelayedList+0x58>
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d007      	beq.n	800a3f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	481a      	ldr	r0, [pc, #104]	@ (800a45c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a3f2:	f7fe fbf9 	bl	8008be8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3f6:	e026      	b.n	800a446 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a400:	4b14      	ldr	r3, [pc, #80]	@ (800a454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d209      	bcs.n	800a424 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a410:	4b13      	ldr	r3, [pc, #76]	@ (800a460 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	4b0f      	ldr	r3, [pc, #60]	@ (800a454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	3304      	adds	r3, #4
 800a41a:	4619      	mov	r1, r3
 800a41c:	4610      	mov	r0, r2
 800a41e:	f7fe fc07 	bl	8008c30 <vListInsert>
}
 800a422:	e010      	b.n	800a446 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a424:	4b0f      	ldr	r3, [pc, #60]	@ (800a464 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	4b0a      	ldr	r3, [pc, #40]	@ (800a454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3304      	adds	r3, #4
 800a42e:	4619      	mov	r1, r3
 800a430:	4610      	mov	r0, r2
 800a432:	f7fe fbfd 	bl	8008c30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a436:	4b0c      	ldr	r3, [pc, #48]	@ (800a468 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d202      	bcs.n	800a446 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a440:	4a09      	ldr	r2, [pc, #36]	@ (800a468 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	6013      	str	r3, [r2, #0]
}
 800a446:	bf00      	nop
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	200008e0 	.word	0x200008e0
 800a454:	200007dc 	.word	0x200007dc
 800a458:	200008e4 	.word	0x200008e4
 800a45c:	200008c8 	.word	0x200008c8
 800a460:	20000898 	.word	0x20000898
 800a464:	20000894 	.word	0x20000894
 800a468:	200008fc 	.word	0x200008fc

0800a46c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	3b04      	subs	r3, #4
 800a47c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3b04      	subs	r3, #4
 800a48a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f023 0201 	bic.w	r2, r3, #1
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	3b04      	subs	r3, #4
 800a49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a49c:	4a0c      	ldr	r2, [pc, #48]	@ (800a4d0 <pxPortInitialiseStack+0x64>)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3b14      	subs	r3, #20
 800a4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3b04      	subs	r3, #4
 800a4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f06f 0202 	mvn.w	r2, #2
 800a4ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	3b20      	subs	r3, #32
 800a4c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	0800a4d5 	.word	0x0800a4d5

0800a4d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4de:	4b13      	ldr	r3, [pc, #76]	@ (800a52c <prvTaskExitError+0x58>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4e6:	d00b      	beq.n	800a500 <prvTaskExitError+0x2c>
	__asm volatile
 800a4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	60fb      	str	r3, [r7, #12]
}
 800a4fa:	bf00      	nop
 800a4fc:	bf00      	nop
 800a4fe:	e7fd      	b.n	800a4fc <prvTaskExitError+0x28>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	60bb      	str	r3, [r7, #8]
}
 800a512:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a514:	bf00      	nop
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d0fc      	beq.n	800a516 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a51c:	bf00      	nop
 800a51e:	bf00      	nop
 800a520:	3714      	adds	r7, #20
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	2000000c 	.word	0x2000000c

0800a530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a530:	4b07      	ldr	r3, [pc, #28]	@ (800a550 <pxCurrentTCBConst2>)
 800a532:	6819      	ldr	r1, [r3, #0]
 800a534:	6808      	ldr	r0, [r1, #0]
 800a536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53a:	f380 8809 	msr	PSP, r0
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f04f 0000 	mov.w	r0, #0
 800a546:	f380 8811 	msr	BASEPRI, r0
 800a54a:	4770      	bx	lr
 800a54c:	f3af 8000 	nop.w

0800a550 <pxCurrentTCBConst2>:
 800a550:	200007dc 	.word	0x200007dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop

0800a558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a558:	4808      	ldr	r0, [pc, #32]	@ (800a57c <prvPortStartFirstTask+0x24>)
 800a55a:	6800      	ldr	r0, [r0, #0]
 800a55c:	6800      	ldr	r0, [r0, #0]
 800a55e:	f380 8808 	msr	MSP, r0
 800a562:	f04f 0000 	mov.w	r0, #0
 800a566:	f380 8814 	msr	CONTROL, r0
 800a56a:	b662      	cpsie	i
 800a56c:	b661      	cpsie	f
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	df00      	svc	0
 800a578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a57a:	bf00      	nop
 800a57c:	e000ed08 	.word	0xe000ed08

0800a580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a586:	4b47      	ldr	r3, [pc, #284]	@ (800a6a4 <xPortStartScheduler+0x124>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a47      	ldr	r2, [pc, #284]	@ (800a6a8 <xPortStartScheduler+0x128>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d10b      	bne.n	800a5a8 <xPortStartScheduler+0x28>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	613b      	str	r3, [r7, #16]
}
 800a5a2:	bf00      	nop
 800a5a4:	bf00      	nop
 800a5a6:	e7fd      	b.n	800a5a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5a8:	4b3e      	ldr	r3, [pc, #248]	@ (800a6a4 <xPortStartScheduler+0x124>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a3f      	ldr	r2, [pc, #252]	@ (800a6ac <xPortStartScheduler+0x12c>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d10b      	bne.n	800a5ca <xPortStartScheduler+0x4a>
	__asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	60fb      	str	r3, [r7, #12]
}
 800a5c4:	bf00      	nop
 800a5c6:	bf00      	nop
 800a5c8:	e7fd      	b.n	800a5c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5ca:	4b39      	ldr	r3, [pc, #228]	@ (800a6b0 <xPortStartScheduler+0x130>)
 800a5cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	22ff      	movs	r2, #255	@ 0xff
 800a5da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5e4:	78fb      	ldrb	r3, [r7, #3]
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	4b31      	ldr	r3, [pc, #196]	@ (800a6b4 <xPortStartScheduler+0x134>)
 800a5f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5f2:	4b31      	ldr	r3, [pc, #196]	@ (800a6b8 <xPortStartScheduler+0x138>)
 800a5f4:	2207      	movs	r2, #7
 800a5f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5f8:	e009      	b.n	800a60e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a5fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a6b8 <xPortStartScheduler+0x138>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	3b01      	subs	r3, #1
 800a600:	4a2d      	ldr	r2, [pc, #180]	@ (800a6b8 <xPortStartScheduler+0x138>)
 800a602:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a604:	78fb      	ldrb	r3, [r7, #3]
 800a606:	b2db      	uxtb	r3, r3
 800a608:	005b      	lsls	r3, r3, #1
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a60e:	78fb      	ldrb	r3, [r7, #3]
 800a610:	b2db      	uxtb	r3, r3
 800a612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a616:	2b80      	cmp	r3, #128	@ 0x80
 800a618:	d0ef      	beq.n	800a5fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a61a:	4b27      	ldr	r3, [pc, #156]	@ (800a6b8 <xPortStartScheduler+0x138>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f1c3 0307 	rsb	r3, r3, #7
 800a622:	2b04      	cmp	r3, #4
 800a624:	d00b      	beq.n	800a63e <xPortStartScheduler+0xbe>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	60bb      	str	r3, [r7, #8]
}
 800a638:	bf00      	nop
 800a63a:	bf00      	nop
 800a63c:	e7fd      	b.n	800a63a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a63e:	4b1e      	ldr	r3, [pc, #120]	@ (800a6b8 <xPortStartScheduler+0x138>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	021b      	lsls	r3, r3, #8
 800a644:	4a1c      	ldr	r2, [pc, #112]	@ (800a6b8 <xPortStartScheduler+0x138>)
 800a646:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a648:	4b1b      	ldr	r3, [pc, #108]	@ (800a6b8 <xPortStartScheduler+0x138>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a650:	4a19      	ldr	r2, [pc, #100]	@ (800a6b8 <xPortStartScheduler+0x138>)
 800a652:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	b2da      	uxtb	r2, r3
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a65c:	4b17      	ldr	r3, [pc, #92]	@ (800a6bc <xPortStartScheduler+0x13c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a16      	ldr	r2, [pc, #88]	@ (800a6bc <xPortStartScheduler+0x13c>)
 800a662:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a666:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a668:	4b14      	ldr	r3, [pc, #80]	@ (800a6bc <xPortStartScheduler+0x13c>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a13      	ldr	r2, [pc, #76]	@ (800a6bc <xPortStartScheduler+0x13c>)
 800a66e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a672:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a674:	f000 f8da 	bl	800a82c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a678:	4b11      	ldr	r3, [pc, #68]	@ (800a6c0 <xPortStartScheduler+0x140>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a67e:	f000 f8f9 	bl	800a874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a682:	4b10      	ldr	r3, [pc, #64]	@ (800a6c4 <xPortStartScheduler+0x144>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a0f      	ldr	r2, [pc, #60]	@ (800a6c4 <xPortStartScheduler+0x144>)
 800a688:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a68c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a68e:	f7ff ff63 	bl	800a558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a692:	f7ff f9cb 	bl	8009a2c <vTaskSwitchContext>
	prvTaskExitError();
 800a696:	f7ff ff1d 	bl	800a4d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3718      	adds	r7, #24
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	e000ed00 	.word	0xe000ed00
 800a6a8:	410fc271 	.word	0x410fc271
 800a6ac:	410fc270 	.word	0x410fc270
 800a6b0:	e000e400 	.word	0xe000e400
 800a6b4:	20000908 	.word	0x20000908
 800a6b8:	2000090c 	.word	0x2000090c
 800a6bc:	e000ed20 	.word	0xe000ed20
 800a6c0:	2000000c 	.word	0x2000000c
 800a6c4:	e000ef34 	.word	0xe000ef34

0800a6c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	607b      	str	r3, [r7, #4]
}
 800a6e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6e2:	4b10      	ldr	r3, [pc, #64]	@ (800a724 <vPortEnterCritical+0x5c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	4a0e      	ldr	r2, [pc, #56]	@ (800a724 <vPortEnterCritical+0x5c>)
 800a6ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6ec:	4b0d      	ldr	r3, [pc, #52]	@ (800a724 <vPortEnterCritical+0x5c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d110      	bne.n	800a716 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a728 <vPortEnterCritical+0x60>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00b      	beq.n	800a716 <vPortEnterCritical+0x4e>
	__asm volatile
 800a6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	603b      	str	r3, [r7, #0]
}
 800a710:	bf00      	nop
 800a712:	bf00      	nop
 800a714:	e7fd      	b.n	800a712 <vPortEnterCritical+0x4a>
	}
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	2000000c 	.word	0x2000000c
 800a728:	e000ed04 	.word	0xe000ed04

0800a72c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a732:	4b12      	ldr	r3, [pc, #72]	@ (800a77c <vPortExitCritical+0x50>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10b      	bne.n	800a752 <vPortExitCritical+0x26>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	607b      	str	r3, [r7, #4]
}
 800a74c:	bf00      	nop
 800a74e:	bf00      	nop
 800a750:	e7fd      	b.n	800a74e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a752:	4b0a      	ldr	r3, [pc, #40]	@ (800a77c <vPortExitCritical+0x50>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3b01      	subs	r3, #1
 800a758:	4a08      	ldr	r2, [pc, #32]	@ (800a77c <vPortExitCritical+0x50>)
 800a75a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a75c:	4b07      	ldr	r3, [pc, #28]	@ (800a77c <vPortExitCritical+0x50>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d105      	bne.n	800a770 <vPortExitCritical+0x44>
 800a764:	2300      	movs	r3, #0
 800a766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	f383 8811 	msr	BASEPRI, r3
}
 800a76e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr
 800a77c:	2000000c 	.word	0x2000000c

0800a780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a780:	f3ef 8009 	mrs	r0, PSP
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	4b15      	ldr	r3, [pc, #84]	@ (800a7e0 <pxCurrentTCBConst>)
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	f01e 0f10 	tst.w	lr, #16
 800a790:	bf08      	it	eq
 800a792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79a:	6010      	str	r0, [r2, #0]
 800a79c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a7a4:	f380 8811 	msr	BASEPRI, r0
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f7ff f93c 	bl	8009a2c <vTaskSwitchContext>
 800a7b4:	f04f 0000 	mov.w	r0, #0
 800a7b8:	f380 8811 	msr	BASEPRI, r0
 800a7bc:	bc09      	pop	{r0, r3}
 800a7be:	6819      	ldr	r1, [r3, #0]
 800a7c0:	6808      	ldr	r0, [r1, #0]
 800a7c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c6:	f01e 0f10 	tst.w	lr, #16
 800a7ca:	bf08      	it	eq
 800a7cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7d0:	f380 8809 	msr	PSP, r0
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	f3af 8000 	nop.w

0800a7e0 <pxCurrentTCBConst>:
 800a7e0:	200007dc 	.word	0x200007dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop

0800a7e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	607b      	str	r3, [r7, #4]
}
 800a800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a802:	f7ff f859 	bl	80098b8 <xTaskIncrementTick>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d003      	beq.n	800a814 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a80c:	4b06      	ldr	r3, [pc, #24]	@ (800a828 <SysTick_Handler+0x40>)
 800a80e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	2300      	movs	r3, #0
 800a816:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	f383 8811 	msr	BASEPRI, r3
}
 800a81e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	e000ed04 	.word	0xe000ed04

0800a82c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a830:	4b0b      	ldr	r3, [pc, #44]	@ (800a860 <vPortSetupTimerInterrupt+0x34>)
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a836:	4b0b      	ldr	r3, [pc, #44]	@ (800a864 <vPortSetupTimerInterrupt+0x38>)
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a83c:	4b0a      	ldr	r3, [pc, #40]	@ (800a868 <vPortSetupTimerInterrupt+0x3c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a0a      	ldr	r2, [pc, #40]	@ (800a86c <vPortSetupTimerInterrupt+0x40>)
 800a842:	fba2 2303 	umull	r2, r3, r2, r3
 800a846:	099b      	lsrs	r3, r3, #6
 800a848:	4a09      	ldr	r2, [pc, #36]	@ (800a870 <vPortSetupTimerInterrupt+0x44>)
 800a84a:	3b01      	subs	r3, #1
 800a84c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a84e:	4b04      	ldr	r3, [pc, #16]	@ (800a860 <vPortSetupTimerInterrupt+0x34>)
 800a850:	2207      	movs	r2, #7
 800a852:	601a      	str	r2, [r3, #0]
}
 800a854:	bf00      	nop
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	e000e010 	.word	0xe000e010
 800a864:	e000e018 	.word	0xe000e018
 800a868:	20000000 	.word	0x20000000
 800a86c:	10624dd3 	.word	0x10624dd3
 800a870:	e000e014 	.word	0xe000e014

0800a874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a874:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a884 <vPortEnableVFP+0x10>
 800a878:	6801      	ldr	r1, [r0, #0]
 800a87a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a87e:	6001      	str	r1, [r0, #0]
 800a880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a882:	bf00      	nop
 800a884:	e000ed88 	.word	0xe000ed88

0800a888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a88e:	f3ef 8305 	mrs	r3, IPSR
 800a892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b0f      	cmp	r3, #15
 800a898:	d915      	bls.n	800a8c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a89a:	4a18      	ldr	r2, [pc, #96]	@ (800a8fc <vPortValidateInterruptPriority+0x74>)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8a4:	4b16      	ldr	r3, [pc, #88]	@ (800a900 <vPortValidateInterruptPriority+0x78>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	7afa      	ldrb	r2, [r7, #11]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d20b      	bcs.n	800a8c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	607b      	str	r3, [r7, #4]
}
 800a8c0:	bf00      	nop
 800a8c2:	bf00      	nop
 800a8c4:	e7fd      	b.n	800a8c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a904 <vPortValidateInterruptPriority+0x7c>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a8ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a908 <vPortValidateInterruptPriority+0x80>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d90b      	bls.n	800a8ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	603b      	str	r3, [r7, #0]
}
 800a8e8:	bf00      	nop
 800a8ea:	bf00      	nop
 800a8ec:	e7fd      	b.n	800a8ea <vPortValidateInterruptPriority+0x62>
	}
 800a8ee:	bf00      	nop
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	e000e3f0 	.word	0xe000e3f0
 800a900:	20000908 	.word	0x20000908
 800a904:	e000ed0c 	.word	0xe000ed0c
 800a908:	2000090c 	.word	0x2000090c

0800a90c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b08a      	sub	sp, #40	@ 0x28
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a914:	2300      	movs	r3, #0
 800a916:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a918:	f7fe ff22 	bl	8009760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a91c:	4b5c      	ldr	r3, [pc, #368]	@ (800aa90 <pvPortMalloc+0x184>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a924:	f000 f924 	bl	800ab70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a928:	4b5a      	ldr	r3, [pc, #360]	@ (800aa94 <pvPortMalloc+0x188>)
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4013      	ands	r3, r2
 800a930:	2b00      	cmp	r3, #0
 800a932:	f040 8095 	bne.w	800aa60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d01e      	beq.n	800a97a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a93c:	2208      	movs	r2, #8
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4413      	add	r3, r2
 800a942:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f003 0307 	and.w	r3, r3, #7
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d015      	beq.n	800a97a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f023 0307 	bic.w	r3, r3, #7
 800a954:	3308      	adds	r3, #8
 800a956:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f003 0307 	and.w	r3, r3, #7
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00b      	beq.n	800a97a <pvPortMalloc+0x6e>
	__asm volatile
 800a962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	617b      	str	r3, [r7, #20]
}
 800a974:	bf00      	nop
 800a976:	bf00      	nop
 800a978:	e7fd      	b.n	800a976 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d06f      	beq.n	800aa60 <pvPortMalloc+0x154>
 800a980:	4b45      	ldr	r3, [pc, #276]	@ (800aa98 <pvPortMalloc+0x18c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	429a      	cmp	r2, r3
 800a988:	d86a      	bhi.n	800aa60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a98a:	4b44      	ldr	r3, [pc, #272]	@ (800aa9c <pvPortMalloc+0x190>)
 800a98c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a98e:	4b43      	ldr	r3, [pc, #268]	@ (800aa9c <pvPortMalloc+0x190>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a994:	e004      	b.n	800a9a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a998:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d903      	bls.n	800a9b2 <pvPortMalloc+0xa6>
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1f1      	bne.n	800a996 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9b2:	4b37      	ldr	r3, [pc, #220]	@ (800aa90 <pvPortMalloc+0x184>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d051      	beq.n	800aa60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2208      	movs	r2, #8
 800a9c2:	4413      	add	r3, r2
 800a9c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	6a3b      	ldr	r3, [r7, #32]
 800a9cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d0:	685a      	ldr	r2, [r3, #4]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	1ad2      	subs	r2, r2, r3
 800a9d6:	2308      	movs	r3, #8
 800a9d8:	005b      	lsls	r3, r3, #1
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d920      	bls.n	800aa20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	f003 0307 	and.w	r3, r3, #7
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00b      	beq.n	800aa08 <pvPortMalloc+0xfc>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	613b      	str	r3, [r7, #16]
}
 800aa02:	bf00      	nop
 800aa04:	bf00      	nop
 800aa06:	e7fd      	b.n	800aa04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0a:	685a      	ldr	r2, [r3, #4]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	1ad2      	subs	r2, r2, r3
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa1a:	69b8      	ldr	r0, [r7, #24]
 800aa1c:	f000 f90a 	bl	800ac34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa20:	4b1d      	ldr	r3, [pc, #116]	@ (800aa98 <pvPortMalloc+0x18c>)
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	4a1b      	ldr	r2, [pc, #108]	@ (800aa98 <pvPortMalloc+0x18c>)
 800aa2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa2e:	4b1a      	ldr	r3, [pc, #104]	@ (800aa98 <pvPortMalloc+0x18c>)
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	4b1b      	ldr	r3, [pc, #108]	@ (800aaa0 <pvPortMalloc+0x194>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d203      	bcs.n	800aa42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa3a:	4b17      	ldr	r3, [pc, #92]	@ (800aa98 <pvPortMalloc+0x18c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a18      	ldr	r2, [pc, #96]	@ (800aaa0 <pvPortMalloc+0x194>)
 800aa40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	4b13      	ldr	r3, [pc, #76]	@ (800aa94 <pvPortMalloc+0x188>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	431a      	orrs	r2, r3
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa52:	2200      	movs	r2, #0
 800aa54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa56:	4b13      	ldr	r3, [pc, #76]	@ (800aaa4 <pvPortMalloc+0x198>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	4a11      	ldr	r2, [pc, #68]	@ (800aaa4 <pvPortMalloc+0x198>)
 800aa5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa60:	f7fe fe8c 	bl	800977c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	f003 0307 	and.w	r3, r3, #7
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00b      	beq.n	800aa86 <pvPortMalloc+0x17a>
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	60fb      	str	r3, [r7, #12]
}
 800aa80:	bf00      	nop
 800aa82:	bf00      	nop
 800aa84:	e7fd      	b.n	800aa82 <pvPortMalloc+0x176>
	return pvReturn;
 800aa86:	69fb      	ldr	r3, [r7, #28]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3728      	adds	r7, #40	@ 0x28
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	20005738 	.word	0x20005738
 800aa94:	2000574c 	.word	0x2000574c
 800aa98:	2000573c 	.word	0x2000573c
 800aa9c:	20005730 	.word	0x20005730
 800aaa0:	20005740 	.word	0x20005740
 800aaa4:	20005744 	.word	0x20005744

0800aaa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b086      	sub	sp, #24
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d04f      	beq.n	800ab5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aaba:	2308      	movs	r3, #8
 800aabc:	425b      	negs	r3, r3
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	4413      	add	r3, r2
 800aac2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	4b25      	ldr	r3, [pc, #148]	@ (800ab64 <vPortFree+0xbc>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4013      	ands	r3, r2
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10b      	bne.n	800aaee <vPortFree+0x46>
	__asm volatile
 800aad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	60fb      	str	r3, [r7, #12]
}
 800aae8:	bf00      	nop
 800aaea:	bf00      	nop
 800aaec:	e7fd      	b.n	800aaea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00b      	beq.n	800ab0e <vPortFree+0x66>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	60bb      	str	r3, [r7, #8]
}
 800ab08:	bf00      	nop
 800ab0a:	bf00      	nop
 800ab0c:	e7fd      	b.n	800ab0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	685a      	ldr	r2, [r3, #4]
 800ab12:	4b14      	ldr	r3, [pc, #80]	@ (800ab64 <vPortFree+0xbc>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4013      	ands	r3, r2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d01e      	beq.n	800ab5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d11a      	bne.n	800ab5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	685a      	ldr	r2, [r3, #4]
 800ab28:	4b0e      	ldr	r3, [pc, #56]	@ (800ab64 <vPortFree+0xbc>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	43db      	mvns	r3, r3
 800ab2e:	401a      	ands	r2, r3
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab34:	f7fe fe14 	bl	8009760 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab68 <vPortFree+0xc0>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4413      	add	r3, r2
 800ab42:	4a09      	ldr	r2, [pc, #36]	@ (800ab68 <vPortFree+0xc0>)
 800ab44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab46:	6938      	ldr	r0, [r7, #16]
 800ab48:	f000 f874 	bl	800ac34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab4c:	4b07      	ldr	r3, [pc, #28]	@ (800ab6c <vPortFree+0xc4>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3301      	adds	r3, #1
 800ab52:	4a06      	ldr	r2, [pc, #24]	@ (800ab6c <vPortFree+0xc4>)
 800ab54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab56:	f7fe fe11 	bl	800977c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab5a:	bf00      	nop
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	2000574c 	.word	0x2000574c
 800ab68:	2000573c 	.word	0x2000573c
 800ab6c:	20005748 	.word	0x20005748

0800ab70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab76:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800ab7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab7c:	4b27      	ldr	r3, [pc, #156]	@ (800ac1c <prvHeapInit+0xac>)
 800ab7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00c      	beq.n	800aba4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	3307      	adds	r3, #7
 800ab8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f023 0307 	bic.w	r3, r3, #7
 800ab96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	4a1f      	ldr	r2, [pc, #124]	@ (800ac1c <prvHeapInit+0xac>)
 800aba0:	4413      	add	r3, r2
 800aba2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aba8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac20 <prvHeapInit+0xb0>)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800abae:	4b1c      	ldr	r3, [pc, #112]	@ (800ac20 <prvHeapInit+0xb0>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	4413      	add	r3, r2
 800abba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abbc:	2208      	movs	r2, #8
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	1a9b      	subs	r3, r3, r2
 800abc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f023 0307 	bic.w	r3, r3, #7
 800abca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4a15      	ldr	r2, [pc, #84]	@ (800ac24 <prvHeapInit+0xb4>)
 800abd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abd2:	4b14      	ldr	r3, [pc, #80]	@ (800ac24 <prvHeapInit+0xb4>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2200      	movs	r2, #0
 800abd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abda:	4b12      	ldr	r3, [pc, #72]	@ (800ac24 <prvHeapInit+0xb4>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2200      	movs	r2, #0
 800abe0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	1ad2      	subs	r2, r2, r3
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abf0:	4b0c      	ldr	r3, [pc, #48]	@ (800ac24 <prvHeapInit+0xb4>)
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	4a0a      	ldr	r2, [pc, #40]	@ (800ac28 <prvHeapInit+0xb8>)
 800abfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	4a09      	ldr	r2, [pc, #36]	@ (800ac2c <prvHeapInit+0xbc>)
 800ac06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac08:	4b09      	ldr	r3, [pc, #36]	@ (800ac30 <prvHeapInit+0xc0>)
 800ac0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ac0e:	601a      	str	r2, [r3, #0]
}
 800ac10:	bf00      	nop
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	20000910 	.word	0x20000910
 800ac20:	20005730 	.word	0x20005730
 800ac24:	20005738 	.word	0x20005738
 800ac28:	20005740 	.word	0x20005740
 800ac2c:	2000573c 	.word	0x2000573c
 800ac30:	2000574c 	.word	0x2000574c

0800ac34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac3c:	4b28      	ldr	r3, [pc, #160]	@ (800ace0 <prvInsertBlockIntoFreeList+0xac>)
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	e002      	b.n	800ac48 <prvInsertBlockIntoFreeList+0x14>
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	60fb      	str	r3, [r7, #12]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d8f7      	bhi.n	800ac42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d108      	bne.n	800ac76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	685a      	ldr	r2, [r3, #4]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	441a      	add	r2, r3
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	441a      	add	r2, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d118      	bne.n	800acbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	4b15      	ldr	r3, [pc, #84]	@ (800ace4 <prvInsertBlockIntoFreeList+0xb0>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d00d      	beq.n	800acb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	441a      	add	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	601a      	str	r2, [r3, #0]
 800acb0:	e008      	b.n	800acc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800acb2:	4b0c      	ldr	r3, [pc, #48]	@ (800ace4 <prvInsertBlockIntoFreeList+0xb0>)
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	601a      	str	r2, [r3, #0]
 800acba:	e003      	b.n	800acc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d002      	beq.n	800acd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acd2:	bf00      	nop
 800acd4:	3714      	adds	r7, #20
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	20005730 	.word	0x20005730
 800ace4:	20005738 	.word	0x20005738

0800ace8 <vu_run>:
#include "shell.h"

extern uint16_t data_SAI_rx[SIZE_SAI_BUFFER];
#define U_MAX 2.0

void vu_run(void*){
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
	MCP23S17_init();
 800acf0:	f7f5 fe92 	bl	8000a18 <MCP23S17_init>
	for(;;){

		ulTaskNotifyTake(pdTRUE, HAL_MAX_DELAY);
 800acf4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800acf8:	2001      	movs	r0, #1
 800acfa:	f7ff fa1f 	bl	800a13c <ulTaskNotifyTake>
		float mean_R=0;
 800acfe:	f04f 0300 	mov.w	r3, #0
 800ad02:	617b      	str	r3, [r7, #20]
		float mean_L=0;
 800ad04:	f04f 0300 	mov.w	r3, #0
 800ad08:	613b      	str	r3, [r7, #16]
		for (int i=0;i<SIZE_SAI_BUFFER/2;i++){
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	60fb      	str	r3, [r7, #12]
 800ad0e:	e021      	b.n	800ad54 <vu_run+0x6c>
			mean_R+=data_SAI_rx[2*i];
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	005b      	lsls	r3, r3, #1
 800ad14:	4a96      	ldr	r2, [pc, #600]	@ (800af70 <vu_run+0x288>)
 800ad16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad1a:	ee07 3a90 	vmov	s15, r3
 800ad1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad22:	ed97 7a05 	vldr	s14, [r7, #20]
 800ad26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad2a:	edc7 7a05 	vstr	s15, [r7, #20]
			mean_L+=data_SAI_rx[2*(i+1)];
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3301      	adds	r3, #1
 800ad32:	005b      	lsls	r3, r3, #1
 800ad34:	4a8e      	ldr	r2, [pc, #568]	@ (800af70 <vu_run+0x288>)
 800ad36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad3a:	ee07 3a90 	vmov	s15, r3
 800ad3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad42:	ed97 7a04 	vldr	s14, [r7, #16]
 800ad46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad4a:	edc7 7a04 	vstr	s15, [r7, #16]
		for (int i=0;i<SIZE_SAI_BUFFER/2;i++){
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3301      	adds	r3, #1
 800ad52:	60fb      	str	r3, [r7, #12]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b09      	cmp	r3, #9
 800ad58:	ddda      	ble.n	800ad10 <vu_run+0x28>
		}
		mean_R = mean_R/SIZE_SAI_BUFFER;
 800ad5a:	ed97 7a05 	vldr	s14, [r7, #20]
 800ad5e:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800ad62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ad66:	edc7 7a05 	vstr	s15, [r7, #20]
		if (mean_R < U_MAX/9.0){
 800ad6a:	6978      	ldr	r0, [r7, #20]
 800ad6c:	f7f5 fbfc 	bl	8000568 <__aeabi_f2d>
 800ad70:	a36f      	add	r3, pc, #444	@ (adr r3, 800af30 <vu_run+0x248>)
 800ad72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad76:	f7f5 fcaf 	bl	80006d8 <__aeabi_dcmplt>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d010      	beq.n	800ada2 <vu_run+0xba>
			MCP23S17_WriteRegister(0x12, (0xFF<<0)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 800ad80:	21ff      	movs	r1, #255	@ 0xff
 800ad82:	2012      	movs	r0, #18
 800ad84:	f7f5 ff78 	bl	8000c78 <MCP23S17_WriteRegister>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d104      	bne.n	800ad98 <vu_run+0xb0>
 800ad8e:	4979      	ldr	r1, [pc, #484]	@ (800af74 <vu_run+0x28c>)
 800ad90:	4879      	ldr	r0, [pc, #484]	@ (800af78 <vu_run+0x290>)
 800ad92:	f000 fb1f 	bl	800b3d4 <debug>
 800ad96:	e7ad      	b.n	800acf4 <vu_run+0xc>
 800ad98:	4976      	ldr	r1, [pc, #472]	@ (800af74 <vu_run+0x28c>)
 800ad9a:	4878      	ldr	r0, [pc, #480]	@ (800af7c <vu_run+0x294>)
 800ad9c:	f000 fb1a 	bl	800b3d4 <debug>
 800ada0:	e7a8      	b.n	800acf4 <vu_run+0xc>

		}
		else if (mean_R < 2*U_MAX/9.0){
 800ada2:	6978      	ldr	r0, [r7, #20]
 800ada4:	f7f5 fbe0 	bl	8000568 <__aeabi_f2d>
 800ada8:	a363      	add	r3, pc, #396	@ (adr r3, 800af38 <vu_run+0x250>)
 800adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adae:	f7f5 fc93 	bl	80006d8 <__aeabi_dcmplt>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d010      	beq.n	800adda <vu_run+0xf2>
			MCP23S17_WriteRegister(0x12, (0xFF<<1)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 800adb8:	21fe      	movs	r1, #254	@ 0xfe
 800adba:	2012      	movs	r0, #18
 800adbc:	f7f5 ff5c 	bl	8000c78 <MCP23S17_WriteRegister>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d104      	bne.n	800add0 <vu_run+0xe8>
 800adc6:	496b      	ldr	r1, [pc, #428]	@ (800af74 <vu_run+0x28c>)
 800adc8:	486b      	ldr	r0, [pc, #428]	@ (800af78 <vu_run+0x290>)
 800adca:	f000 fb03 	bl	800b3d4 <debug>
 800adce:	e791      	b.n	800acf4 <vu_run+0xc>
 800add0:	4968      	ldr	r1, [pc, #416]	@ (800af74 <vu_run+0x28c>)
 800add2:	486a      	ldr	r0, [pc, #424]	@ (800af7c <vu_run+0x294>)
 800add4:	f000 fafe 	bl	800b3d4 <debug>
 800add8:	e78c      	b.n	800acf4 <vu_run+0xc>

		}
		else if (mean_R < 3*U_MAX/9.0){
 800adda:	6978      	ldr	r0, [r7, #20]
 800addc:	f7f5 fbc4 	bl	8000568 <__aeabi_f2d>
 800ade0:	a357      	add	r3, pc, #348	@ (adr r3, 800af40 <vu_run+0x258>)
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	f7f5 fc77 	bl	80006d8 <__aeabi_dcmplt>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d010      	beq.n	800ae12 <vu_run+0x12a>
			MCP23S17_WriteRegister(0x12, (0xFF<<2)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 800adf0:	21fc      	movs	r1, #252	@ 0xfc
 800adf2:	2012      	movs	r0, #18
 800adf4:	f7f5 ff40 	bl	8000c78 <MCP23S17_WriteRegister>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d104      	bne.n	800ae08 <vu_run+0x120>
 800adfe:	495d      	ldr	r1, [pc, #372]	@ (800af74 <vu_run+0x28c>)
 800ae00:	485d      	ldr	r0, [pc, #372]	@ (800af78 <vu_run+0x290>)
 800ae02:	f000 fae7 	bl	800b3d4 <debug>
 800ae06:	e775      	b.n	800acf4 <vu_run+0xc>
 800ae08:	495a      	ldr	r1, [pc, #360]	@ (800af74 <vu_run+0x28c>)
 800ae0a:	485c      	ldr	r0, [pc, #368]	@ (800af7c <vu_run+0x294>)
 800ae0c:	f000 fae2 	bl	800b3d4 <debug>
 800ae10:	e770      	b.n	800acf4 <vu_run+0xc>

		}
		else if (mean_R < 4*U_MAX/9.0){
 800ae12:	6978      	ldr	r0, [r7, #20]
 800ae14:	f7f5 fba8 	bl	8000568 <__aeabi_f2d>
 800ae18:	a34b      	add	r3, pc, #300	@ (adr r3, 800af48 <vu_run+0x260>)
 800ae1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1e:	f7f5 fc5b 	bl	80006d8 <__aeabi_dcmplt>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d010      	beq.n	800ae4a <vu_run+0x162>
			MCP23S17_WriteRegister(0x12, (0xFF<<3)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 800ae28:	21f8      	movs	r1, #248	@ 0xf8
 800ae2a:	2012      	movs	r0, #18
 800ae2c:	f7f5 ff24 	bl	8000c78 <MCP23S17_WriteRegister>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d104      	bne.n	800ae40 <vu_run+0x158>
 800ae36:	494f      	ldr	r1, [pc, #316]	@ (800af74 <vu_run+0x28c>)
 800ae38:	484f      	ldr	r0, [pc, #316]	@ (800af78 <vu_run+0x290>)
 800ae3a:	f000 facb 	bl	800b3d4 <debug>
 800ae3e:	e759      	b.n	800acf4 <vu_run+0xc>
 800ae40:	494c      	ldr	r1, [pc, #304]	@ (800af74 <vu_run+0x28c>)
 800ae42:	484e      	ldr	r0, [pc, #312]	@ (800af7c <vu_run+0x294>)
 800ae44:	f000 fac6 	bl	800b3d4 <debug>
 800ae48:	e754      	b.n	800acf4 <vu_run+0xc>

		}
		else if (mean_R < 5*U_MAX/9.0){
 800ae4a:	6978      	ldr	r0, [r7, #20]
 800ae4c:	f7f5 fb8c 	bl	8000568 <__aeabi_f2d>
 800ae50:	a33f      	add	r3, pc, #252	@ (adr r3, 800af50 <vu_run+0x268>)
 800ae52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae56:	f7f5 fc3f 	bl	80006d8 <__aeabi_dcmplt>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d010      	beq.n	800ae82 <vu_run+0x19a>
			MCP23S17_WriteRegister(0x12, (0xFF<<4)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 800ae60:	21f0      	movs	r1, #240	@ 0xf0
 800ae62:	2012      	movs	r0, #18
 800ae64:	f7f5 ff08 	bl	8000c78 <MCP23S17_WriteRegister>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d104      	bne.n	800ae78 <vu_run+0x190>
 800ae6e:	4941      	ldr	r1, [pc, #260]	@ (800af74 <vu_run+0x28c>)
 800ae70:	4841      	ldr	r0, [pc, #260]	@ (800af78 <vu_run+0x290>)
 800ae72:	f000 faaf 	bl	800b3d4 <debug>
 800ae76:	e73d      	b.n	800acf4 <vu_run+0xc>
 800ae78:	493e      	ldr	r1, [pc, #248]	@ (800af74 <vu_run+0x28c>)
 800ae7a:	4840      	ldr	r0, [pc, #256]	@ (800af7c <vu_run+0x294>)
 800ae7c:	f000 faaa 	bl	800b3d4 <debug>
 800ae80:	e738      	b.n	800acf4 <vu_run+0xc>

		}
		else if (mean_R < 6*U_MAX/9.0){
 800ae82:	6978      	ldr	r0, [r7, #20]
 800ae84:	f7f5 fb70 	bl	8000568 <__aeabi_f2d>
 800ae88:	a333      	add	r3, pc, #204	@ (adr r3, 800af58 <vu_run+0x270>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f7f5 fc23 	bl	80006d8 <__aeabi_dcmplt>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d010      	beq.n	800aeba <vu_run+0x1d2>
			MCP23S17_WriteRegister(0x12, (0xFF<<5)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 800ae98:	21e0      	movs	r1, #224	@ 0xe0
 800ae9a:	2012      	movs	r0, #18
 800ae9c:	f7f5 feec 	bl	8000c78 <MCP23S17_WriteRegister>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d104      	bne.n	800aeb0 <vu_run+0x1c8>
 800aea6:	4933      	ldr	r1, [pc, #204]	@ (800af74 <vu_run+0x28c>)
 800aea8:	4833      	ldr	r0, [pc, #204]	@ (800af78 <vu_run+0x290>)
 800aeaa:	f000 fa93 	bl	800b3d4 <debug>
 800aeae:	e721      	b.n	800acf4 <vu_run+0xc>
 800aeb0:	4930      	ldr	r1, [pc, #192]	@ (800af74 <vu_run+0x28c>)
 800aeb2:	4832      	ldr	r0, [pc, #200]	@ (800af7c <vu_run+0x294>)
 800aeb4:	f000 fa8e 	bl	800b3d4 <debug>
 800aeb8:	e71c      	b.n	800acf4 <vu_run+0xc>

		}
		else if (mean_R < 7*U_MAX/9.0){
 800aeba:	6978      	ldr	r0, [r7, #20]
 800aebc:	f7f5 fb54 	bl	8000568 <__aeabi_f2d>
 800aec0:	a327      	add	r3, pc, #156	@ (adr r3, 800af60 <vu_run+0x278>)
 800aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec6:	f7f5 fc07 	bl	80006d8 <__aeabi_dcmplt>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d010      	beq.n	800aef2 <vu_run+0x20a>
			MCP23S17_WriteRegister(0x12, (0xFF<<6)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 800aed0:	21c0      	movs	r1, #192	@ 0xc0
 800aed2:	2012      	movs	r0, #18
 800aed4:	f7f5 fed0 	bl	8000c78 <MCP23S17_WriteRegister>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d104      	bne.n	800aee8 <vu_run+0x200>
 800aede:	4925      	ldr	r1, [pc, #148]	@ (800af74 <vu_run+0x28c>)
 800aee0:	4825      	ldr	r0, [pc, #148]	@ (800af78 <vu_run+0x290>)
 800aee2:	f000 fa77 	bl	800b3d4 <debug>
 800aee6:	e705      	b.n	800acf4 <vu_run+0xc>
 800aee8:	4922      	ldr	r1, [pc, #136]	@ (800af74 <vu_run+0x28c>)
 800aeea:	4824      	ldr	r0, [pc, #144]	@ (800af7c <vu_run+0x294>)
 800aeec:	f000 fa72 	bl	800b3d4 <debug>
 800aef0:	e700      	b.n	800acf4 <vu_run+0xc>

		}
		else if(mean_R < 8*U_MAX/9.0){
 800aef2:	6978      	ldr	r0, [r7, #20]
 800aef4:	f7f5 fb38 	bl	8000568 <__aeabi_f2d>
 800aef8:	a31b      	add	r3, pc, #108	@ (adr r3, 800af68 <vu_run+0x280>)
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	f7f5 fbeb 	bl	80006d8 <__aeabi_dcmplt>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00f      	beq.n	800af28 <vu_run+0x240>
			MCP23S17_WriteRegister(0x12, (0xFF<<7)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 800af08:	2180      	movs	r1, #128	@ 0x80
 800af0a:	2012      	movs	r0, #18
 800af0c:	f7f5 feb4 	bl	8000c78 <MCP23S17_WriteRegister>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d104      	bne.n	800af20 <vu_run+0x238>
 800af16:	4917      	ldr	r1, [pc, #92]	@ (800af74 <vu_run+0x28c>)
 800af18:	4817      	ldr	r0, [pc, #92]	@ (800af78 <vu_run+0x290>)
 800af1a:	f000 fa5b 	bl	800b3d4 <debug>
 800af1e:	e6e9      	b.n	800acf4 <vu_run+0xc>
 800af20:	4914      	ldr	r1, [pc, #80]	@ (800af74 <vu_run+0x28c>)
 800af22:	4816      	ldr	r0, [pc, #88]	@ (800af7c <vu_run+0x294>)
 800af24:	f000 fa56 	bl	800b3d4 <debug>
	for(;;){
 800af28:	e6e4      	b.n	800acf4 <vu_run+0xc>
 800af2a:	bf00      	nop
 800af2c:	f3af 8000 	nop.w
 800af30:	1c71c71c 	.word	0x1c71c71c
 800af34:	3fcc71c7 	.word	0x3fcc71c7
 800af38:	1c71c71c 	.word	0x1c71c71c
 800af3c:	3fdc71c7 	.word	0x3fdc71c7
 800af40:	55555555 	.word	0x55555555
 800af44:	3fe55555 	.word	0x3fe55555
 800af48:	1c71c71c 	.word	0x1c71c71c
 800af4c:	3fec71c7 	.word	0x3fec71c7
 800af50:	71c71c72 	.word	0x71c71c72
 800af54:	3ff1c71c 	.word	0x3ff1c71c
 800af58:	55555555 	.word	0x55555555
 800af5c:	3ff55555 	.word	0x3ff55555
 800af60:	38e38e39 	.word	0x38e38e39
 800af64:	3ff8e38e 	.word	0x3ff8e38e
 800af68:	1c71c71c 	.word	0x1c71c71c
 800af6c:	3ffc71c7 	.word	0x3ffc71c7
 800af70:	20000460 	.word	0x20000460
 800af74:	0800c750 	.word	0x0800c750
 800af78:	0800c764 	.word	0x0800c764
 800af7c:	0800c770 	.word	0x0800c770

0800af80 <HAL_UART_RxCpltCallback>:
/*********** PREEMPTION PRIORITY  ***********/
void CUSTOM_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	return;
}
/*********** PREEMPTION PRIORITY 5 ***********/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
	/** SHELL INTERRUPTIONS **/
	if (huart->Instance == USART2) {
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a0d      	ldr	r2, [pc, #52]	@ (800afc4 <HAL_UART_RxCpltCallback+0x44>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d114      	bne.n	800afbc <HAL_UART_RxCpltCallback+0x3c>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800af92:	2300      	movs	r3, #0
 800af94:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 800af96:	4b0c      	ldr	r3, [pc, #48]	@ (800afc8 <HAL_UART_RxCpltCallback+0x48>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f107 020c 	add.w	r2, r7, #12
 800af9e:	4611      	mov	r1, r2
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fd ff6d 	bl	8008e80 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d007      	beq.n	800afbc <HAL_UART_RxCpltCallback+0x3c>
 800afac:	4b07      	ldr	r3, [pc, #28]	@ (800afcc <HAL_UART_RxCpltCallback+0x4c>)
 800afae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	f3bf 8f6f 	isb	sy
	}
}
 800afbc:	bf00      	nop
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	40004400 	.word	0x40004400
 800afc8:	20005750 	.word	0x20005750
 800afcc:	e000ed04 	.word	0xe000ed04

0800afd0 <shell_init>:
int isStarted = 0;
int isADC_cplt =0;
uint8_t PWMLed = 255;


void shell_init(void) {
 800afd0:	b580      	push	{r7, lr}
 800afd2:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS * sizeof(char*));
 800afd4:	2220      	movs	r2, #32
 800afd6:	2100      	movs	r1, #0
 800afd8:	481a      	ldr	r0, [pc, #104]	@ (800b044 <shell_init+0x74>)
 800afda:	f000 fc25 	bl	800b828 <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 800afde:	2240      	movs	r2, #64	@ 0x40
 800afe0:	2100      	movs	r1, #0
 800afe2:	4819      	ldr	r0, [pc, #100]	@ (800b048 <shell_init+0x78>)
 800afe4:	f000 fc20 	bl	800b828 <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
 800afe8:	4b18      	ldr	r3, [pc, #96]	@ (800b04c <shell_init+0x7c>)
 800afea:	2200      	movs	r2, #0
 800afec:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 800afee:	2240      	movs	r2, #64	@ 0x40
 800aff0:	2100      	movs	r1, #0
 800aff2:	4817      	ldr	r0, [pc, #92]	@ (800b050 <shell_init+0x80>)
 800aff4:	f000 fc18 	bl	800b828 <memset>
	sem_uart_read = xSemaphoreCreateBinary();
 800aff8:	2203      	movs	r2, #3
 800affa:	2100      	movs	r1, #0
 800affc:	2001      	movs	r0, #1
 800affe:	f7fd fee5 	bl	8008dcc <xQueueGenericCreate>
 800b002:	4603      	mov	r3, r0
 800b004:	4a13      	ldr	r2, [pc, #76]	@ (800b054 <shell_init+0x84>)
 800b006:	6013      	str	r3, [r2, #0]
	sem_uart_read == NULL ? Error_Handler() : (void) 0;
 800b008:	4b12      	ldr	r3, [pc, #72]	@ (800b054 <shell_init+0x84>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d101      	bne.n	800b014 <shell_init+0x44>
 800b010:	f7f6 f9f0 	bl	80013f4 <Error_Handler>

	HAL_UART_Transmit(&UART_DEVICE, started, strlen((char*) started),
 800b014:	4810      	ldr	r0, [pc, #64]	@ (800b058 <shell_init+0x88>)
 800b016:	f7f5 f8db 	bl	80001d0 <strlen>
 800b01a:	4603      	mov	r3, r0
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b022:	490d      	ldr	r1, [pc, #52]	@ (800b058 <shell_init+0x88>)
 800b024:	480d      	ldr	r0, [pc, #52]	@ (800b05c <shell_init+0x8c>)
 800b026:	f7fc f997 	bl	8007358 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	HAL_UART_Transmit(&UART_DEVICE, prompt, strlen((char*) prompt),
 800b02a:	480d      	ldr	r0, [pc, #52]	@ (800b060 <shell_init+0x90>)
 800b02c:	f7f5 f8d0 	bl	80001d0 <strlen>
 800b030:	4603      	mov	r3, r0
 800b032:	b29a      	uxth	r2, r3
 800b034:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b038:	4909      	ldr	r1, [pc, #36]	@ (800b060 <shell_init+0x90>)
 800b03a:	4808      	ldr	r0, [pc, #32]	@ (800b05c <shell_init+0x8c>)
 800b03c:	f7fc f98c 	bl	8007358 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
}
 800b040:	bf00      	nop
 800b042:	bd80      	pop	{r7, pc}
 800b044:	200057dc 	.word	0x200057dc
 800b048:	20005798 	.word	0x20005798
 800b04c:	20005754 	.word	0x20005754
 800b050:	20005758 	.word	0x20005758
 800b054:	20005750 	.word	0x20005750
 800b058:	20000050 	.word	0x20000050
 800b05c:	20000750 	.word	0x20000750
 800b060:	200000d4 	.word	0x200000d4

0800b064 <shell_run>:

void shell_run(void*) {
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
	int reading = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]
	for (;;) {
		reading = 1;
 800b070:	2301      	movs	r3, #1
 800b072:	60fb      	str	r3, [r7, #12]
		idx_cmd = 0;
 800b074:	4b5d      	ldr	r3, [pc, #372]	@ (800b1ec <shell_run+0x188>)
 800b076:	2200      	movs	r2, #0
 800b078:	601a      	str	r2, [r3, #0]
		while (reading) {
 800b07a:	e070      	b.n	800b15e <shell_run+0xfa>
			HAL_UART_Receive_IT(&UART_DEVICE, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800b07c:	2201      	movs	r2, #1
 800b07e:	495c      	ldr	r1, [pc, #368]	@ (800b1f0 <shell_run+0x18c>)
 800b080:	485c      	ldr	r0, [pc, #368]	@ (800b1f4 <shell_run+0x190>)
 800b082:	f7fc f9f3 	bl	800746c <HAL_UART_Receive_IT>
			xSemaphoreTake(sem_uart_read, portMAX_DELAY)!=pdPASS ? Error_Handler():(void)0;
 800b086:	4b5c      	ldr	r3, [pc, #368]	@ (800b1f8 <shell_run+0x194>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b08e:	4618      	mov	r0, r3
 800b090:	f7fd ff86 	bl	8008fa0 <xQueueSemaphoreTake>
 800b094:	4603      	mov	r3, r0
 800b096:	2b01      	cmp	r3, #1
 800b098:	d001      	beq.n	800b09e <shell_run+0x3a>
 800b09a:	f7f6 f9ab 	bl	80013f4 <Error_Handler>

			switch (uartRxBuffer[0]) {
 800b09e:	4b54      	ldr	r3, [pc, #336]	@ (800b1f0 <shell_run+0x18c>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800b0a4:	d035      	beq.n	800b112 <shell_run+0xae>
 800b0a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b0a8:	dc47      	bgt.n	800b13a <shell_run+0xd6>
 800b0aa:	2b08      	cmp	r3, #8
 800b0ac:	d031      	beq.n	800b112 <shell_run+0xae>
 800b0ae:	2b0d      	cmp	r3, #13
 800b0b0:	d143      	bne.n	800b13a <shell_run+0xd6>
			case ASCII_CR: // Nouvelle ligne, instruction à traiter
				HAL_UART_Transmit(&UART_DEVICE, newline, sizeof(newline),
 800b0b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b0b6:	2203      	movs	r2, #3
 800b0b8:	4950      	ldr	r1, [pc, #320]	@ (800b1fc <shell_run+0x198>)
 800b0ba:	484e      	ldr	r0, [pc, #312]	@ (800b1f4 <shell_run+0x190>)
 800b0bc:	f7fc f94c 	bl	8007358 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				argc = 0;
 800b0c0:	4b4f      	ldr	r3, [pc, #316]	@ (800b200 <shell_run+0x19c>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]
				token = strtok(cmdBuffer, " ");
 800b0c6:	494f      	ldr	r1, [pc, #316]	@ (800b204 <shell_run+0x1a0>)
 800b0c8:	484f      	ldr	r0, [pc, #316]	@ (800b208 <shell_run+0x1a4>)
 800b0ca:	f000 fb51 	bl	800b770 <strtok>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	4a4e      	ldr	r2, [pc, #312]	@ (800b20c <shell_run+0x1a8>)
 800b0d2:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 800b0d4:	e010      	b.n	800b0f8 <shell_run+0x94>
					argv[argc++] = token;
 800b0d6:	4b4a      	ldr	r3, [pc, #296]	@ (800b200 <shell_run+0x19c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	4948      	ldr	r1, [pc, #288]	@ (800b200 <shell_run+0x19c>)
 800b0de:	600a      	str	r2, [r1, #0]
 800b0e0:	4a4a      	ldr	r2, [pc, #296]	@ (800b20c <shell_run+0x1a8>)
 800b0e2:	6812      	ldr	r2, [r2, #0]
 800b0e4:	494a      	ldr	r1, [pc, #296]	@ (800b210 <shell_run+0x1ac>)
 800b0e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					token = strtok(NULL, " ");
 800b0ea:	4946      	ldr	r1, [pc, #280]	@ (800b204 <shell_run+0x1a0>)
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	f000 fb3f 	bl	800b770 <strtok>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	4a45      	ldr	r2, [pc, #276]	@ (800b20c <shell_run+0x1a8>)
 800b0f6:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 800b0f8:	4b44      	ldr	r3, [pc, #272]	@ (800b20c <shell_run+0x1a8>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1ea      	bne.n	800b0d6 <shell_run+0x72>
				}
				idx_cmd = 0;
 800b100:	4b3a      	ldr	r3, [pc, #232]	@ (800b1ec <shell_run+0x188>)
 800b102:	2200      	movs	r2, #0
 800b104:	601a      	str	r2, [r3, #0]
				reading = 0;        //exit read loop
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]
				newCmdReady = 1;
 800b10a:	4b42      	ldr	r3, [pc, #264]	@ (800b214 <shell_run+0x1b0>)
 800b10c:	2201      	movs	r2, #1
 800b10e:	601a      	str	r2, [r3, #0]
				break;
 800b110:	e025      	b.n	800b15e <shell_run+0xfa>
			case ASCII_BACK:
			case ASCII_BACK_BIS: // Suppression du dernier caractère
				if (idx_cmd == 0) {
 800b112:	4b36      	ldr	r3, [pc, #216]	@ (800b1ec <shell_run+0x188>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d020      	beq.n	800b15c <shell_run+0xf8>
					break;
				}
				cmdBuffer[idx_cmd--] = '\0';
 800b11a:	4b34      	ldr	r3, [pc, #208]	@ (800b1ec <shell_run+0x188>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	1e5a      	subs	r2, r3, #1
 800b120:	4932      	ldr	r1, [pc, #200]	@ (800b1ec <shell_run+0x188>)
 800b122:	600a      	str	r2, [r1, #0]
 800b124:	4a38      	ldr	r2, [pc, #224]	@ (800b208 <shell_run+0x1a4>)
 800b126:	2100      	movs	r1, #0
 800b128:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, backspace, sizeof(backspace),
 800b12a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b12e:	2204      	movs	r2, #4
 800b130:	4939      	ldr	r1, [pc, #228]	@ (800b218 <shell_run+0x1b4>)
 800b132:	4830      	ldr	r0, [pc, #192]	@ (800b1f4 <shell_run+0x190>)
 800b134:	f7fc f910 	bl	8007358 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				break;
 800b138:	e011      	b.n	800b15e <shell_run+0xfa>
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800b13a:	4b2c      	ldr	r3, [pc, #176]	@ (800b1ec <shell_run+0x188>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	1c5a      	adds	r2, r3, #1
 800b140:	492a      	ldr	r1, [pc, #168]	@ (800b1ec <shell_run+0x188>)
 800b142:	600a      	str	r2, [r1, #0]
 800b144:	4a2a      	ldr	r2, [pc, #168]	@ (800b1f0 <shell_run+0x18c>)
 800b146:	7811      	ldrb	r1, [r2, #0]
 800b148:	4a2f      	ldr	r2, [pc, #188]	@ (800b208 <shell_run+0x1a4>)
 800b14a:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, uartRxBuffer,
 800b14c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b150:	2201      	movs	r2, #1
 800b152:	4927      	ldr	r1, [pc, #156]	@ (800b1f0 <shell_run+0x18c>)
 800b154:	4827      	ldr	r0, [pc, #156]	@ (800b1f4 <shell_run+0x190>)
 800b156:	f7fc f8ff 	bl	8007358 <HAL_UART_Transmit>
 800b15a:	e000      	b.n	800b15e <shell_run+0xfa>
					break;
 800b15c:	bf00      	nop
		while (reading) {
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d18b      	bne.n	800b07c <shell_run+0x18>
						UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
			}
		}
		if (newCmdReady) {
 800b164:	4b2b      	ldr	r3, [pc, #172]	@ (800b214 <shell_run+0x1b0>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d081      	beq.n	800b070 <shell_run+0xc>
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 800b16c:	2300      	movs	r3, #0
 800b16e:	60bb      	str	r3, [r7, #8]
 800b170:	e01b      	b.n	800b1aa <shell_run+0x146>
				if (strcmp(argv[0], mapping[i].name) == 0) {
 800b172:	4b27      	ldr	r3, [pc, #156]	@ (800b210 <shell_run+0x1ac>)
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	4929      	ldr	r1, [pc, #164]	@ (800b21c <shell_run+0x1b8>)
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	011b      	lsls	r3, r3, #4
 800b17c:	440b      	add	r3, r1
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4619      	mov	r1, r3
 800b182:	4610      	mov	r0, r2
 800b184:	f7f5 f82c 	bl	80001e0 <strcmp>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10a      	bne.n	800b1a4 <shell_run+0x140>
					isFind = 1;
 800b18e:	4b24      	ldr	r3, [pc, #144]	@ (800b220 <shell_run+0x1bc>)
 800b190:	2201      	movs	r2, #1
 800b192:	601a      	str	r2, [r3, #0]
					mapping[i].funct(argv);
 800b194:	4a21      	ldr	r2, [pc, #132]	@ (800b21c <shell_run+0x1b8>)
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	011b      	lsls	r3, r3, #4
 800b19a:	4413      	add	r3, r2
 800b19c:	330c      	adds	r3, #12
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	481b      	ldr	r0, [pc, #108]	@ (800b210 <shell_run+0x1ac>)
 800b1a2:	4798      	blx	r3
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	60bb      	str	r3, [r7, #8]
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2b03      	cmp	r3, #3
 800b1ae:	d9e0      	bls.n	800b172 <shell_run+0x10e>
				}
			}
			if (!isFind) {
 800b1b0:	4b1b      	ldr	r3, [pc, #108]	@ (800b220 <shell_run+0x1bc>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d106      	bne.n	800b1c6 <shell_run+0x162>
				HAL_UART_Transmit(&UART_DEVICE, cmdNotFound,
 800b1b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b1bc:	2214      	movs	r2, #20
 800b1be:	4919      	ldr	r1, [pc, #100]	@ (800b224 <shell_run+0x1c0>)
 800b1c0:	480c      	ldr	r0, [pc, #48]	@ (800b1f4 <shell_run+0x190>)
 800b1c2:	f7fc f8c9 	bl	8007358 <HAL_UART_Transmit>
						sizeof(cmdNotFound), HAL_MAX_DELAY);
			}

			HAL_UART_Transmit(&UART_DEVICE, prompt, sizeof(prompt),
 800b1c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b1ca:	2212      	movs	r2, #18
 800b1cc:	4916      	ldr	r1, [pc, #88]	@ (800b228 <shell_run+0x1c4>)
 800b1ce:	4809      	ldr	r0, [pc, #36]	@ (800b1f4 <shell_run+0x190>)
 800b1d0:	f7fc f8c2 	bl	8007358 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			newCmdReady = 0;
 800b1d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b214 <shell_run+0x1b0>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	601a      	str	r2, [r3, #0]
			isFind = 0;
 800b1da:	4b11      	ldr	r3, [pc, #68]	@ (800b220 <shell_run+0x1bc>)
 800b1dc:	2200      	movs	r2, #0
 800b1de:	601a      	str	r2, [r3, #0]
			memset(cmdBuffer, 0, MAX_ARGS * sizeof(char*));
 800b1e0:	2220      	movs	r2, #32
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	4808      	ldr	r0, [pc, #32]	@ (800b208 <shell_run+0x1a4>)
 800b1e6:	f000 fb1f 	bl	800b828 <memset>
		reading = 1;
 800b1ea:	e741      	b.n	800b070 <shell_run+0xc>
 800b1ec:	200057d8 	.word	0x200057d8
 800b1f0:	20005754 	.word	0x20005754
 800b1f4:	20000750 	.word	0x20000750
 800b1f8:	20005750 	.word	0x20005750
 800b1fc:	200000b8 	.word	0x200000b8
 800b200:	200057fc 	.word	0x200057fc
 800b204:	0800c7d0 	.word	0x0800c7d0
 800b208:	20005798 	.word	0x20005798
 800b20c:	20005800 	.word	0x20005800
 800b210:	200057dc 	.word	0x200057dc
 800b214:	20005804 	.word	0x20005804
 800b218:	200000bc 	.word	0x200000bc
 800b21c:	20000010 	.word	0x20000010
 800b220:	20005808 	.word	0x20005808
 800b224:	200000c0 	.word	0x200000c0
 800b228:	200000d4 	.word	0x200000d4

0800b22c <subfunct_help>:

/*
 * ***********************************************************************************************
 * 										SUBFUNCTIONS
 *************************************************************************************************/
void subfunct_help(char **argv) {
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b088      	sub	sp, #32
 800b230:	af04      	add	r7, sp, #16
 800b232:	6078      	str	r0, [r7, #4]
	printf("%s%-15s | %-30s | %-50s\r\n%s%s", GRAS, "Fonctions", "Params",
 800b234:	4b1a      	ldr	r3, [pc, #104]	@ (800b2a0 <subfunct_help+0x74>)
 800b236:	9302      	str	r3, [sp, #8]
 800b238:	4b1a      	ldr	r3, [pc, #104]	@ (800b2a4 <subfunct_help+0x78>)
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	4b1a      	ldr	r3, [pc, #104]	@ (800b2a8 <subfunct_help+0x7c>)
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	4b1a      	ldr	r3, [pc, #104]	@ (800b2ac <subfunct_help+0x80>)
 800b242:	4a1b      	ldr	r2, [pc, #108]	@ (800b2b0 <subfunct_help+0x84>)
 800b244:	491b      	ldr	r1, [pc, #108]	@ (800b2b4 <subfunct_help+0x88>)
 800b246:	481c      	ldr	r0, [pc, #112]	@ (800b2b8 <subfunct_help+0x8c>)
 800b248:	f000 fa22 	bl	800b690 <iprintf>
			"Description", D_RESET, separator);
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 800b24c:	2300      	movs	r3, #0
 800b24e:	60fb      	str	r3, [r7, #12]
 800b250:	e01b      	b.n	800b28a <subfunct_help+0x5e>
		printf("%s%-15s%s | %-30s | %-50s\r\n", FUNCTION, mapping[i].name,
 800b252:	4a1a      	ldr	r2, [pc, #104]	@ (800b2bc <subfunct_help+0x90>)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	011b      	lsls	r3, r3, #4
 800b258:	4413      	add	r3, r2
 800b25a:	6819      	ldr	r1, [r3, #0]
 800b25c:	4a17      	ldr	r2, [pc, #92]	@ (800b2bc <subfunct_help+0x90>)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	011b      	lsls	r3, r3, #4
 800b262:	4413      	add	r3, r2
 800b264:	3308      	adds	r3, #8
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4814      	ldr	r0, [pc, #80]	@ (800b2bc <subfunct_help+0x90>)
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	0112      	lsls	r2, r2, #4
 800b26e:	4402      	add	r2, r0
 800b270:	3204      	adds	r2, #4
 800b272:	6812      	ldr	r2, [r2, #0]
 800b274:	9201      	str	r2, [sp, #4]
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a4 <subfunct_help+0x78>)
 800b27a:	460a      	mov	r2, r1
 800b27c:	4910      	ldr	r1, [pc, #64]	@ (800b2c0 <subfunct_help+0x94>)
 800b27e:	4811      	ldr	r0, [pc, #68]	@ (800b2c4 <subfunct_help+0x98>)
 800b280:	f000 fa06 	bl	800b690 <iprintf>
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	3301      	adds	r3, #1
 800b288:	60fb      	str	r3, [r7, #12]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	d9e0      	bls.n	800b252 <subfunct_help+0x26>
				D_RESET, mapping[i].params, mapping[i].resume);
	}
	printf(separator);
 800b290:	480d      	ldr	r0, [pc, #52]	@ (800b2c8 <subfunct_help+0x9c>)
 800b292:	f000 fa65 	bl	800b760 <puts>
}
 800b296:	bf00      	nop
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	0800c810 	.word	0x0800c810
 800b2a4:	0800c860 	.word	0x0800c860
 800b2a8:	0800c868 	.word	0x0800c868
 800b2ac:	0800c7d4 	.word	0x0800c7d4
 800b2b0:	0800c7dc 	.word	0x0800c7dc
 800b2b4:	0800c7e8 	.word	0x0800c7e8
 800b2b8:	0800c7f0 	.word	0x0800c7f0
 800b2bc:	20000010 	.word	0x20000010
 800b2c0:	0800c874 	.word	0x0800c874
 800b2c4:	0800c87c 	.word	0x0800c87c
 800b2c8:	0800c898 	.word	0x0800c898

0800b2cc <subfunct_i2c>:

void subfunct_i2c(char **argv){
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
	sgtl5000_init();
 800b2d4:	f7f5 fcfc 	bl	8000cd0 <sgtl5000_init>

}
 800b2d8:	bf00      	nop
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <subfunct_led>:
void subfunct_led(char **argv){
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
	int GPIO = atoi(argv[1]);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 f884 	bl	800b3fc <atoi>
 800b2f4:	60f8      	str	r0, [r7, #12]
	uint8_t i=(uint8_t) strtol(argv[2], NULL, 10);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	3308      	adds	r3, #8
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	220a      	movs	r2, #10
 800b2fe:	2100      	movs	r1, #0
 800b300:	4618      	mov	r0, r3
 800b302:	f000 f99d 	bl	800b640 <strtol>
 800b306:	4603      	mov	r3, r0
 800b308:	72fb      	strb	r3, [r7, #11]
	if (GPIO == atoi("A")){
 800b30a:	4821      	ldr	r0, [pc, #132]	@ (800b390 <subfunct_led+0xb0>)
 800b30c:	f000 f876 	bl	800b3fc <atoi>
 800b310:	4602      	mov	r2, r0
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	4293      	cmp	r3, r2
 800b316:	d115      	bne.n	800b344 <subfunct_led+0x64>
		MCP23S17_WriteRegister(0x12, (0xFF<<i)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 800b318:	7afb      	ldrb	r3, [r7, #11]
 800b31a:	22ff      	movs	r2, #255	@ 0xff
 800b31c:	fa02 f303 	lsl.w	r3, r2, r3
 800b320:	b2db      	uxtb	r3, r3
 800b322:	4619      	mov	r1, r3
 800b324:	2012      	movs	r0, #18
 800b326:	f7f5 fca7 	bl	8000c78 <MCP23S17_WriteRegister>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d104      	bne.n	800b33a <subfunct_led+0x5a>
 800b330:	4918      	ldr	r1, [pc, #96]	@ (800b394 <subfunct_led+0xb4>)
 800b332:	4819      	ldr	r0, [pc, #100]	@ (800b398 <subfunct_led+0xb8>)
 800b334:	f000 f84e 	bl	800b3d4 <debug>
	}else if (GPIO == atoi("B")){
		MCP23S17_WriteRegister(0x13, (0xFF<<i)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOB") : debug(D_ERROR,"MCP23S17 - GPIOB");
	}else {
		debug(D_ERROR,"Argument 2 : A ou B attendu\r\n");
	}
}
 800b338:	e025      	b.n	800b386 <subfunct_led+0xa6>
		MCP23S17_WriteRegister(0x12, (0xFF<<i)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOA") : debug(D_ERROR,"MCP23S17 - GPIOA");
 800b33a:	4916      	ldr	r1, [pc, #88]	@ (800b394 <subfunct_led+0xb4>)
 800b33c:	4817      	ldr	r0, [pc, #92]	@ (800b39c <subfunct_led+0xbc>)
 800b33e:	f000 f849 	bl	800b3d4 <debug>
}
 800b342:	e020      	b.n	800b386 <subfunct_led+0xa6>
	}else if (GPIO == atoi("B")){
 800b344:	4816      	ldr	r0, [pc, #88]	@ (800b3a0 <subfunct_led+0xc0>)
 800b346:	f000 f859 	bl	800b3fc <atoi>
 800b34a:	4602      	mov	r2, r0
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	4293      	cmp	r3, r2
 800b350:	d115      	bne.n	800b37e <subfunct_led+0x9e>
		MCP23S17_WriteRegister(0x13, (0xFF<<i)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOB") : debug(D_ERROR,"MCP23S17 - GPIOB");
 800b352:	7afb      	ldrb	r3, [r7, #11]
 800b354:	22ff      	movs	r2, #255	@ 0xff
 800b356:	fa02 f303 	lsl.w	r3, r2, r3
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	4619      	mov	r1, r3
 800b35e:	2013      	movs	r0, #19
 800b360:	f7f5 fc8a 	bl	8000c78 <MCP23S17_WriteRegister>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d104      	bne.n	800b374 <subfunct_led+0x94>
 800b36a:	490e      	ldr	r1, [pc, #56]	@ (800b3a4 <subfunct_led+0xc4>)
 800b36c:	480a      	ldr	r0, [pc, #40]	@ (800b398 <subfunct_led+0xb8>)
 800b36e:	f000 f831 	bl	800b3d4 <debug>
}
 800b372:	e008      	b.n	800b386 <subfunct_led+0xa6>
		MCP23S17_WriteRegister(0x13, (0xFF<<i)&0xFF) == HAL_OK ? debug(START,"MCP23S17 - GPIOB") : debug(D_ERROR,"MCP23S17 - GPIOB");
 800b374:	490b      	ldr	r1, [pc, #44]	@ (800b3a4 <subfunct_led+0xc4>)
 800b376:	4809      	ldr	r0, [pc, #36]	@ (800b39c <subfunct_led+0xbc>)
 800b378:	f000 f82c 	bl	800b3d4 <debug>
}
 800b37c:	e003      	b.n	800b386 <subfunct_led+0xa6>
		debug(D_ERROR,"Argument 2 : A ou B attendu\r\n");
 800b37e:	490a      	ldr	r1, [pc, #40]	@ (800b3a8 <subfunct_led+0xc8>)
 800b380:	4806      	ldr	r0, [pc, #24]	@ (800b39c <subfunct_led+0xbc>)
 800b382:	f000 f827 	bl	800b3d4 <debug>
}
 800b386:	bf00      	nop
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	0800c8e4 	.word	0x0800c8e4
 800b394:	0800c8e8 	.word	0x0800c8e8
 800b398:	0800c8fc 	.word	0x0800c8fc
 800b39c:	0800c908 	.word	0x0800c908
 800b3a0:	0800c914 	.word	0x0800c914
 800b3a4:	0800c918 	.word	0x0800c918
 800b3a8:	0800c92c 	.word	0x0800c92c

0800b3ac <subfunct_clear>:
void subfunct_clear(char **argv) {
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, clear, sizeof(clear), HAL_MAX_DELAY);
 800b3b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3b8:	2208      	movs	r2, #8
 800b3ba:	4904      	ldr	r1, [pc, #16]	@ (800b3cc <subfunct_clear+0x20>)
 800b3bc:	4804      	ldr	r0, [pc, #16]	@ (800b3d0 <subfunct_clear+0x24>)
 800b3be:	f7fb ffcb 	bl	8007358 <HAL_UART_Transmit>
}
 800b3c2:	bf00      	nop
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	200000e8 	.word	0x200000e8
 800b3d0:	20000750 	.word	0x20000750

0800b3d4 <debug>:

/************************************************************************************************
 * 										DEBUG
 *************************************************************************************************/

void debug(char *debugType, char *message) {
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]

	printf("%-15s%s| %s\r\n", debugType, D_RESET, message);
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	4a04      	ldr	r2, [pc, #16]	@ (800b3f4 <debug+0x20>)
 800b3e2:	6879      	ldr	r1, [r7, #4]
 800b3e4:	4804      	ldr	r0, [pc, #16]	@ (800b3f8 <debug+0x24>)
 800b3e6:	f000 f953 	bl	800b690 <iprintf>

}
 800b3ea:	bf00      	nop
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	0800c860 	.word	0x0800c860
 800b3f8:	0800c94c 	.word	0x0800c94c

0800b3fc <atoi>:
 800b3fc:	220a      	movs	r2, #10
 800b3fe:	2100      	movs	r1, #0
 800b400:	f000 b91e 	b.w	800b640 <strtol>

0800b404 <std>:
 800b404:	2300      	movs	r3, #0
 800b406:	b510      	push	{r4, lr}
 800b408:	4604      	mov	r4, r0
 800b40a:	e9c0 3300 	strd	r3, r3, [r0]
 800b40e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b412:	6083      	str	r3, [r0, #8]
 800b414:	8181      	strh	r1, [r0, #12]
 800b416:	6643      	str	r3, [r0, #100]	@ 0x64
 800b418:	81c2      	strh	r2, [r0, #14]
 800b41a:	6183      	str	r3, [r0, #24]
 800b41c:	4619      	mov	r1, r3
 800b41e:	2208      	movs	r2, #8
 800b420:	305c      	adds	r0, #92	@ 0x5c
 800b422:	f000 fa01 	bl	800b828 <memset>
 800b426:	4b0d      	ldr	r3, [pc, #52]	@ (800b45c <std+0x58>)
 800b428:	6263      	str	r3, [r4, #36]	@ 0x24
 800b42a:	4b0d      	ldr	r3, [pc, #52]	@ (800b460 <std+0x5c>)
 800b42c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b42e:	4b0d      	ldr	r3, [pc, #52]	@ (800b464 <std+0x60>)
 800b430:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b432:	4b0d      	ldr	r3, [pc, #52]	@ (800b468 <std+0x64>)
 800b434:	6323      	str	r3, [r4, #48]	@ 0x30
 800b436:	4b0d      	ldr	r3, [pc, #52]	@ (800b46c <std+0x68>)
 800b438:	6224      	str	r4, [r4, #32]
 800b43a:	429c      	cmp	r4, r3
 800b43c:	d006      	beq.n	800b44c <std+0x48>
 800b43e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b442:	4294      	cmp	r4, r2
 800b444:	d002      	beq.n	800b44c <std+0x48>
 800b446:	33d0      	adds	r3, #208	@ 0xd0
 800b448:	429c      	cmp	r4, r3
 800b44a:	d105      	bne.n	800b458 <std+0x54>
 800b44c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b454:	f000 ba70 	b.w	800b938 <__retarget_lock_init_recursive>
 800b458:	bd10      	pop	{r4, pc}
 800b45a:	bf00      	nop
 800b45c:	0800c275 	.word	0x0800c275
 800b460:	0800c297 	.word	0x0800c297
 800b464:	0800c2cf 	.word	0x0800c2cf
 800b468:	0800c2f3 	.word	0x0800c2f3
 800b46c:	2000580c 	.word	0x2000580c

0800b470 <stdio_exit_handler>:
 800b470:	4a02      	ldr	r2, [pc, #8]	@ (800b47c <stdio_exit_handler+0xc>)
 800b472:	4903      	ldr	r1, [pc, #12]	@ (800b480 <stdio_exit_handler+0x10>)
 800b474:	4803      	ldr	r0, [pc, #12]	@ (800b484 <stdio_exit_handler+0x14>)
 800b476:	f000 b8ed 	b.w	800b654 <_fwalk_sglue>
 800b47a:	bf00      	nop
 800b47c:	200000f0 	.word	0x200000f0
 800b480:	0800c20d 	.word	0x0800c20d
 800b484:	20000100 	.word	0x20000100

0800b488 <cleanup_stdio>:
 800b488:	6841      	ldr	r1, [r0, #4]
 800b48a:	4b0c      	ldr	r3, [pc, #48]	@ (800b4bc <cleanup_stdio+0x34>)
 800b48c:	4299      	cmp	r1, r3
 800b48e:	b510      	push	{r4, lr}
 800b490:	4604      	mov	r4, r0
 800b492:	d001      	beq.n	800b498 <cleanup_stdio+0x10>
 800b494:	f000 feba 	bl	800c20c <_fflush_r>
 800b498:	68a1      	ldr	r1, [r4, #8]
 800b49a:	4b09      	ldr	r3, [pc, #36]	@ (800b4c0 <cleanup_stdio+0x38>)
 800b49c:	4299      	cmp	r1, r3
 800b49e:	d002      	beq.n	800b4a6 <cleanup_stdio+0x1e>
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f000 feb3 	bl	800c20c <_fflush_r>
 800b4a6:	68e1      	ldr	r1, [r4, #12]
 800b4a8:	4b06      	ldr	r3, [pc, #24]	@ (800b4c4 <cleanup_stdio+0x3c>)
 800b4aa:	4299      	cmp	r1, r3
 800b4ac:	d004      	beq.n	800b4b8 <cleanup_stdio+0x30>
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b4:	f000 beaa 	b.w	800c20c <_fflush_r>
 800b4b8:	bd10      	pop	{r4, pc}
 800b4ba:	bf00      	nop
 800b4bc:	2000580c 	.word	0x2000580c
 800b4c0:	20005874 	.word	0x20005874
 800b4c4:	200058dc 	.word	0x200058dc

0800b4c8 <global_stdio_init.part.0>:
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b4f8 <global_stdio_init.part.0+0x30>)
 800b4cc:	4c0b      	ldr	r4, [pc, #44]	@ (800b4fc <global_stdio_init.part.0+0x34>)
 800b4ce:	4a0c      	ldr	r2, [pc, #48]	@ (800b500 <global_stdio_init.part.0+0x38>)
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2104      	movs	r1, #4
 800b4d8:	f7ff ff94 	bl	800b404 <std>
 800b4dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	2109      	movs	r1, #9
 800b4e4:	f7ff ff8e 	bl	800b404 <std>
 800b4e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b4ec:	2202      	movs	r2, #2
 800b4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4f2:	2112      	movs	r1, #18
 800b4f4:	f7ff bf86 	b.w	800b404 <std>
 800b4f8:	20005944 	.word	0x20005944
 800b4fc:	2000580c 	.word	0x2000580c
 800b500:	0800b471 	.word	0x0800b471

0800b504 <__sfp_lock_acquire>:
 800b504:	4801      	ldr	r0, [pc, #4]	@ (800b50c <__sfp_lock_acquire+0x8>)
 800b506:	f000 ba18 	b.w	800b93a <__retarget_lock_acquire_recursive>
 800b50a:	bf00      	nop
 800b50c:	2000594d 	.word	0x2000594d

0800b510 <__sfp_lock_release>:
 800b510:	4801      	ldr	r0, [pc, #4]	@ (800b518 <__sfp_lock_release+0x8>)
 800b512:	f000 ba13 	b.w	800b93c <__retarget_lock_release_recursive>
 800b516:	bf00      	nop
 800b518:	2000594d 	.word	0x2000594d

0800b51c <__sinit>:
 800b51c:	b510      	push	{r4, lr}
 800b51e:	4604      	mov	r4, r0
 800b520:	f7ff fff0 	bl	800b504 <__sfp_lock_acquire>
 800b524:	6a23      	ldr	r3, [r4, #32]
 800b526:	b11b      	cbz	r3, 800b530 <__sinit+0x14>
 800b528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b52c:	f7ff bff0 	b.w	800b510 <__sfp_lock_release>
 800b530:	4b04      	ldr	r3, [pc, #16]	@ (800b544 <__sinit+0x28>)
 800b532:	6223      	str	r3, [r4, #32]
 800b534:	4b04      	ldr	r3, [pc, #16]	@ (800b548 <__sinit+0x2c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1f5      	bne.n	800b528 <__sinit+0xc>
 800b53c:	f7ff ffc4 	bl	800b4c8 <global_stdio_init.part.0>
 800b540:	e7f2      	b.n	800b528 <__sinit+0xc>
 800b542:	bf00      	nop
 800b544:	0800b489 	.word	0x0800b489
 800b548:	20005944 	.word	0x20005944

0800b54c <_strtol_l.constprop.0>:
 800b54c:	2b24      	cmp	r3, #36	@ 0x24
 800b54e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b552:	4686      	mov	lr, r0
 800b554:	4690      	mov	r8, r2
 800b556:	d801      	bhi.n	800b55c <_strtol_l.constprop.0+0x10>
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d106      	bne.n	800b56a <_strtol_l.constprop.0+0x1e>
 800b55c:	f000 f9c2 	bl	800b8e4 <__errno>
 800b560:	2316      	movs	r3, #22
 800b562:	6003      	str	r3, [r0, #0]
 800b564:	2000      	movs	r0, #0
 800b566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56a:	4834      	ldr	r0, [pc, #208]	@ (800b63c <_strtol_l.constprop.0+0xf0>)
 800b56c:	460d      	mov	r5, r1
 800b56e:	462a      	mov	r2, r5
 800b570:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b574:	5d06      	ldrb	r6, [r0, r4]
 800b576:	f016 0608 	ands.w	r6, r6, #8
 800b57a:	d1f8      	bne.n	800b56e <_strtol_l.constprop.0+0x22>
 800b57c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b57e:	d12d      	bne.n	800b5dc <_strtol_l.constprop.0+0x90>
 800b580:	782c      	ldrb	r4, [r5, #0]
 800b582:	2601      	movs	r6, #1
 800b584:	1c95      	adds	r5, r2, #2
 800b586:	f033 0210 	bics.w	r2, r3, #16
 800b58a:	d109      	bne.n	800b5a0 <_strtol_l.constprop.0+0x54>
 800b58c:	2c30      	cmp	r4, #48	@ 0x30
 800b58e:	d12a      	bne.n	800b5e6 <_strtol_l.constprop.0+0x9a>
 800b590:	782a      	ldrb	r2, [r5, #0]
 800b592:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b596:	2a58      	cmp	r2, #88	@ 0x58
 800b598:	d125      	bne.n	800b5e6 <_strtol_l.constprop.0+0x9a>
 800b59a:	786c      	ldrb	r4, [r5, #1]
 800b59c:	2310      	movs	r3, #16
 800b59e:	3502      	adds	r5, #2
 800b5a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b5a4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	fbbc f9f3 	udiv	r9, ip, r3
 800b5ae:	4610      	mov	r0, r2
 800b5b0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b5b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b5b8:	2f09      	cmp	r7, #9
 800b5ba:	d81b      	bhi.n	800b5f4 <_strtol_l.constprop.0+0xa8>
 800b5bc:	463c      	mov	r4, r7
 800b5be:	42a3      	cmp	r3, r4
 800b5c0:	dd27      	ble.n	800b612 <_strtol_l.constprop.0+0xc6>
 800b5c2:	1c57      	adds	r7, r2, #1
 800b5c4:	d007      	beq.n	800b5d6 <_strtol_l.constprop.0+0x8a>
 800b5c6:	4581      	cmp	r9, r0
 800b5c8:	d320      	bcc.n	800b60c <_strtol_l.constprop.0+0xc0>
 800b5ca:	d101      	bne.n	800b5d0 <_strtol_l.constprop.0+0x84>
 800b5cc:	45a2      	cmp	sl, r4
 800b5ce:	db1d      	blt.n	800b60c <_strtol_l.constprop.0+0xc0>
 800b5d0:	fb00 4003 	mla	r0, r0, r3, r4
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5da:	e7eb      	b.n	800b5b4 <_strtol_l.constprop.0+0x68>
 800b5dc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b5de:	bf04      	itt	eq
 800b5e0:	782c      	ldrbeq	r4, [r5, #0]
 800b5e2:	1c95      	addeq	r5, r2, #2
 800b5e4:	e7cf      	b.n	800b586 <_strtol_l.constprop.0+0x3a>
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1da      	bne.n	800b5a0 <_strtol_l.constprop.0+0x54>
 800b5ea:	2c30      	cmp	r4, #48	@ 0x30
 800b5ec:	bf0c      	ite	eq
 800b5ee:	2308      	moveq	r3, #8
 800b5f0:	230a      	movne	r3, #10
 800b5f2:	e7d5      	b.n	800b5a0 <_strtol_l.constprop.0+0x54>
 800b5f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b5f8:	2f19      	cmp	r7, #25
 800b5fa:	d801      	bhi.n	800b600 <_strtol_l.constprop.0+0xb4>
 800b5fc:	3c37      	subs	r4, #55	@ 0x37
 800b5fe:	e7de      	b.n	800b5be <_strtol_l.constprop.0+0x72>
 800b600:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b604:	2f19      	cmp	r7, #25
 800b606:	d804      	bhi.n	800b612 <_strtol_l.constprop.0+0xc6>
 800b608:	3c57      	subs	r4, #87	@ 0x57
 800b60a:	e7d8      	b.n	800b5be <_strtol_l.constprop.0+0x72>
 800b60c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b610:	e7e1      	b.n	800b5d6 <_strtol_l.constprop.0+0x8a>
 800b612:	1c53      	adds	r3, r2, #1
 800b614:	d108      	bne.n	800b628 <_strtol_l.constprop.0+0xdc>
 800b616:	2322      	movs	r3, #34	@ 0x22
 800b618:	f8ce 3000 	str.w	r3, [lr]
 800b61c:	4660      	mov	r0, ip
 800b61e:	f1b8 0f00 	cmp.w	r8, #0
 800b622:	d0a0      	beq.n	800b566 <_strtol_l.constprop.0+0x1a>
 800b624:	1e69      	subs	r1, r5, #1
 800b626:	e006      	b.n	800b636 <_strtol_l.constprop.0+0xea>
 800b628:	b106      	cbz	r6, 800b62c <_strtol_l.constprop.0+0xe0>
 800b62a:	4240      	negs	r0, r0
 800b62c:	f1b8 0f00 	cmp.w	r8, #0
 800b630:	d099      	beq.n	800b566 <_strtol_l.constprop.0+0x1a>
 800b632:	2a00      	cmp	r2, #0
 800b634:	d1f6      	bne.n	800b624 <_strtol_l.constprop.0+0xd8>
 800b636:	f8c8 1000 	str.w	r1, [r8]
 800b63a:	e794      	b.n	800b566 <_strtol_l.constprop.0+0x1a>
 800b63c:	0800ca16 	.word	0x0800ca16

0800b640 <strtol>:
 800b640:	4613      	mov	r3, r2
 800b642:	460a      	mov	r2, r1
 800b644:	4601      	mov	r1, r0
 800b646:	4802      	ldr	r0, [pc, #8]	@ (800b650 <strtol+0x10>)
 800b648:	6800      	ldr	r0, [r0, #0]
 800b64a:	f7ff bf7f 	b.w	800b54c <_strtol_l.constprop.0>
 800b64e:	bf00      	nop
 800b650:	200000fc 	.word	0x200000fc

0800b654 <_fwalk_sglue>:
 800b654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b658:	4607      	mov	r7, r0
 800b65a:	4688      	mov	r8, r1
 800b65c:	4614      	mov	r4, r2
 800b65e:	2600      	movs	r6, #0
 800b660:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b664:	f1b9 0901 	subs.w	r9, r9, #1
 800b668:	d505      	bpl.n	800b676 <_fwalk_sglue+0x22>
 800b66a:	6824      	ldr	r4, [r4, #0]
 800b66c:	2c00      	cmp	r4, #0
 800b66e:	d1f7      	bne.n	800b660 <_fwalk_sglue+0xc>
 800b670:	4630      	mov	r0, r6
 800b672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b676:	89ab      	ldrh	r3, [r5, #12]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d907      	bls.n	800b68c <_fwalk_sglue+0x38>
 800b67c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b680:	3301      	adds	r3, #1
 800b682:	d003      	beq.n	800b68c <_fwalk_sglue+0x38>
 800b684:	4629      	mov	r1, r5
 800b686:	4638      	mov	r0, r7
 800b688:	47c0      	blx	r8
 800b68a:	4306      	orrs	r6, r0
 800b68c:	3568      	adds	r5, #104	@ 0x68
 800b68e:	e7e9      	b.n	800b664 <_fwalk_sglue+0x10>

0800b690 <iprintf>:
 800b690:	b40f      	push	{r0, r1, r2, r3}
 800b692:	b507      	push	{r0, r1, r2, lr}
 800b694:	4906      	ldr	r1, [pc, #24]	@ (800b6b0 <iprintf+0x20>)
 800b696:	ab04      	add	r3, sp, #16
 800b698:	6808      	ldr	r0, [r1, #0]
 800b69a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b69e:	6881      	ldr	r1, [r0, #8]
 800b6a0:	9301      	str	r3, [sp, #4]
 800b6a2:	f000 f9df 	bl	800ba64 <_vfiprintf_r>
 800b6a6:	b003      	add	sp, #12
 800b6a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6ac:	b004      	add	sp, #16
 800b6ae:	4770      	bx	lr
 800b6b0:	200000fc 	.word	0x200000fc

0800b6b4 <_puts_r>:
 800b6b4:	6a03      	ldr	r3, [r0, #32]
 800b6b6:	b570      	push	{r4, r5, r6, lr}
 800b6b8:	6884      	ldr	r4, [r0, #8]
 800b6ba:	4605      	mov	r5, r0
 800b6bc:	460e      	mov	r6, r1
 800b6be:	b90b      	cbnz	r3, 800b6c4 <_puts_r+0x10>
 800b6c0:	f7ff ff2c 	bl	800b51c <__sinit>
 800b6c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6c6:	07db      	lsls	r3, r3, #31
 800b6c8:	d405      	bmi.n	800b6d6 <_puts_r+0x22>
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	0598      	lsls	r0, r3, #22
 800b6ce:	d402      	bmi.n	800b6d6 <_puts_r+0x22>
 800b6d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6d2:	f000 f932 	bl	800b93a <__retarget_lock_acquire_recursive>
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	0719      	lsls	r1, r3, #28
 800b6da:	d502      	bpl.n	800b6e2 <_puts_r+0x2e>
 800b6dc:	6923      	ldr	r3, [r4, #16]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d135      	bne.n	800b74e <_puts_r+0x9a>
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f000 fe59 	bl	800c39c <__swsetup_r>
 800b6ea:	b380      	cbz	r0, 800b74e <_puts_r+0x9a>
 800b6ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b6f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6f2:	07da      	lsls	r2, r3, #31
 800b6f4:	d405      	bmi.n	800b702 <_puts_r+0x4e>
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	059b      	lsls	r3, r3, #22
 800b6fa:	d402      	bmi.n	800b702 <_puts_r+0x4e>
 800b6fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6fe:	f000 f91d 	bl	800b93c <__retarget_lock_release_recursive>
 800b702:	4628      	mov	r0, r5
 800b704:	bd70      	pop	{r4, r5, r6, pc}
 800b706:	2b00      	cmp	r3, #0
 800b708:	da04      	bge.n	800b714 <_puts_r+0x60>
 800b70a:	69a2      	ldr	r2, [r4, #24]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	dc17      	bgt.n	800b740 <_puts_r+0x8c>
 800b710:	290a      	cmp	r1, #10
 800b712:	d015      	beq.n	800b740 <_puts_r+0x8c>
 800b714:	6823      	ldr	r3, [r4, #0]
 800b716:	1c5a      	adds	r2, r3, #1
 800b718:	6022      	str	r2, [r4, #0]
 800b71a:	7019      	strb	r1, [r3, #0]
 800b71c:	68a3      	ldr	r3, [r4, #8]
 800b71e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b722:	3b01      	subs	r3, #1
 800b724:	60a3      	str	r3, [r4, #8]
 800b726:	2900      	cmp	r1, #0
 800b728:	d1ed      	bne.n	800b706 <_puts_r+0x52>
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	da11      	bge.n	800b752 <_puts_r+0x9e>
 800b72e:	4622      	mov	r2, r4
 800b730:	210a      	movs	r1, #10
 800b732:	4628      	mov	r0, r5
 800b734:	f000 fdf4 	bl	800c320 <__swbuf_r>
 800b738:	3001      	adds	r0, #1
 800b73a:	d0d7      	beq.n	800b6ec <_puts_r+0x38>
 800b73c:	250a      	movs	r5, #10
 800b73e:	e7d7      	b.n	800b6f0 <_puts_r+0x3c>
 800b740:	4622      	mov	r2, r4
 800b742:	4628      	mov	r0, r5
 800b744:	f000 fdec 	bl	800c320 <__swbuf_r>
 800b748:	3001      	adds	r0, #1
 800b74a:	d1e7      	bne.n	800b71c <_puts_r+0x68>
 800b74c:	e7ce      	b.n	800b6ec <_puts_r+0x38>
 800b74e:	3e01      	subs	r6, #1
 800b750:	e7e4      	b.n	800b71c <_puts_r+0x68>
 800b752:	6823      	ldr	r3, [r4, #0]
 800b754:	1c5a      	adds	r2, r3, #1
 800b756:	6022      	str	r2, [r4, #0]
 800b758:	220a      	movs	r2, #10
 800b75a:	701a      	strb	r2, [r3, #0]
 800b75c:	e7ee      	b.n	800b73c <_puts_r+0x88>
	...

0800b760 <puts>:
 800b760:	4b02      	ldr	r3, [pc, #8]	@ (800b76c <puts+0xc>)
 800b762:	4601      	mov	r1, r0
 800b764:	6818      	ldr	r0, [r3, #0]
 800b766:	f7ff bfa5 	b.w	800b6b4 <_puts_r>
 800b76a:	bf00      	nop
 800b76c:	200000fc 	.word	0x200000fc

0800b770 <strtok>:
 800b770:	4b16      	ldr	r3, [pc, #88]	@ (800b7cc <strtok+0x5c>)
 800b772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b776:	681f      	ldr	r7, [r3, #0]
 800b778:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b77a:	4605      	mov	r5, r0
 800b77c:	460e      	mov	r6, r1
 800b77e:	b9ec      	cbnz	r4, 800b7bc <strtok+0x4c>
 800b780:	2050      	movs	r0, #80	@ 0x50
 800b782:	f000 fa87 	bl	800bc94 <malloc>
 800b786:	4602      	mov	r2, r0
 800b788:	6478      	str	r0, [r7, #68]	@ 0x44
 800b78a:	b920      	cbnz	r0, 800b796 <strtok+0x26>
 800b78c:	4b10      	ldr	r3, [pc, #64]	@ (800b7d0 <strtok+0x60>)
 800b78e:	4811      	ldr	r0, [pc, #68]	@ (800b7d4 <strtok+0x64>)
 800b790:	215b      	movs	r1, #91	@ 0x5b
 800b792:	f000 f8d5 	bl	800b940 <__assert_func>
 800b796:	e9c0 4400 	strd	r4, r4, [r0]
 800b79a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b79e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b7a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b7a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b7aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b7ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b7b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b7b6:	6184      	str	r4, [r0, #24]
 800b7b8:	7704      	strb	r4, [r0, #28]
 800b7ba:	6244      	str	r4, [r0, #36]	@ 0x24
 800b7bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7be:	4631      	mov	r1, r6
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c8:	f000 b806 	b.w	800b7d8 <__strtok_r>
 800b7cc:	200000fc 	.word	0x200000fc
 800b7d0:	0800c9a4 	.word	0x0800c9a4
 800b7d4:	0800c9bb 	.word	0x0800c9bb

0800b7d8 <__strtok_r>:
 800b7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7da:	4604      	mov	r4, r0
 800b7dc:	b908      	cbnz	r0, 800b7e2 <__strtok_r+0xa>
 800b7de:	6814      	ldr	r4, [r2, #0]
 800b7e0:	b144      	cbz	r4, 800b7f4 <__strtok_r+0x1c>
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b7e8:	460f      	mov	r7, r1
 800b7ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b7ee:	b91e      	cbnz	r6, 800b7f8 <__strtok_r+0x20>
 800b7f0:	b965      	cbnz	r5, 800b80c <__strtok_r+0x34>
 800b7f2:	6015      	str	r5, [r2, #0]
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	e005      	b.n	800b804 <__strtok_r+0x2c>
 800b7f8:	42b5      	cmp	r5, r6
 800b7fa:	d1f6      	bne.n	800b7ea <__strtok_r+0x12>
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1f0      	bne.n	800b7e2 <__strtok_r+0xa>
 800b800:	6014      	str	r4, [r2, #0]
 800b802:	7003      	strb	r3, [r0, #0]
 800b804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b806:	461c      	mov	r4, r3
 800b808:	e00c      	b.n	800b824 <__strtok_r+0x4c>
 800b80a:	b915      	cbnz	r5, 800b812 <__strtok_r+0x3a>
 800b80c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b810:	460e      	mov	r6, r1
 800b812:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b816:	42ab      	cmp	r3, r5
 800b818:	d1f7      	bne.n	800b80a <__strtok_r+0x32>
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d0f3      	beq.n	800b806 <__strtok_r+0x2e>
 800b81e:	2300      	movs	r3, #0
 800b820:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b824:	6014      	str	r4, [r2, #0]
 800b826:	e7ed      	b.n	800b804 <__strtok_r+0x2c>

0800b828 <memset>:
 800b828:	4402      	add	r2, r0
 800b82a:	4603      	mov	r3, r0
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d100      	bne.n	800b832 <memset+0xa>
 800b830:	4770      	bx	lr
 800b832:	f803 1b01 	strb.w	r1, [r3], #1
 800b836:	e7f9      	b.n	800b82c <memset+0x4>

0800b838 <_reclaim_reent>:
 800b838:	4b29      	ldr	r3, [pc, #164]	@ (800b8e0 <_reclaim_reent+0xa8>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4283      	cmp	r3, r0
 800b83e:	b570      	push	{r4, r5, r6, lr}
 800b840:	4604      	mov	r4, r0
 800b842:	d04b      	beq.n	800b8dc <_reclaim_reent+0xa4>
 800b844:	69c3      	ldr	r3, [r0, #28]
 800b846:	b1ab      	cbz	r3, 800b874 <_reclaim_reent+0x3c>
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	b16b      	cbz	r3, 800b868 <_reclaim_reent+0x30>
 800b84c:	2500      	movs	r5, #0
 800b84e:	69e3      	ldr	r3, [r4, #28]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	5959      	ldr	r1, [r3, r5]
 800b854:	2900      	cmp	r1, #0
 800b856:	d13b      	bne.n	800b8d0 <_reclaim_reent+0x98>
 800b858:	3504      	adds	r5, #4
 800b85a:	2d80      	cmp	r5, #128	@ 0x80
 800b85c:	d1f7      	bne.n	800b84e <_reclaim_reent+0x16>
 800b85e:	69e3      	ldr	r3, [r4, #28]
 800b860:	4620      	mov	r0, r4
 800b862:	68d9      	ldr	r1, [r3, #12]
 800b864:	f000 f88a 	bl	800b97c <_free_r>
 800b868:	69e3      	ldr	r3, [r4, #28]
 800b86a:	6819      	ldr	r1, [r3, #0]
 800b86c:	b111      	cbz	r1, 800b874 <_reclaim_reent+0x3c>
 800b86e:	4620      	mov	r0, r4
 800b870:	f000 f884 	bl	800b97c <_free_r>
 800b874:	6961      	ldr	r1, [r4, #20]
 800b876:	b111      	cbz	r1, 800b87e <_reclaim_reent+0x46>
 800b878:	4620      	mov	r0, r4
 800b87a:	f000 f87f 	bl	800b97c <_free_r>
 800b87e:	69e1      	ldr	r1, [r4, #28]
 800b880:	b111      	cbz	r1, 800b888 <_reclaim_reent+0x50>
 800b882:	4620      	mov	r0, r4
 800b884:	f000 f87a 	bl	800b97c <_free_r>
 800b888:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b88a:	b111      	cbz	r1, 800b892 <_reclaim_reent+0x5a>
 800b88c:	4620      	mov	r0, r4
 800b88e:	f000 f875 	bl	800b97c <_free_r>
 800b892:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b894:	b111      	cbz	r1, 800b89c <_reclaim_reent+0x64>
 800b896:	4620      	mov	r0, r4
 800b898:	f000 f870 	bl	800b97c <_free_r>
 800b89c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b89e:	b111      	cbz	r1, 800b8a6 <_reclaim_reent+0x6e>
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f000 f86b 	bl	800b97c <_free_r>
 800b8a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b8a8:	b111      	cbz	r1, 800b8b0 <_reclaim_reent+0x78>
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f000 f866 	bl	800b97c <_free_r>
 800b8b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b8b2:	b111      	cbz	r1, 800b8ba <_reclaim_reent+0x82>
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f000 f861 	bl	800b97c <_free_r>
 800b8ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b8bc:	b111      	cbz	r1, 800b8c4 <_reclaim_reent+0x8c>
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f000 f85c 	bl	800b97c <_free_r>
 800b8c4:	6a23      	ldr	r3, [r4, #32]
 800b8c6:	b14b      	cbz	r3, 800b8dc <_reclaim_reent+0xa4>
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8ce:	4718      	bx	r3
 800b8d0:	680e      	ldr	r6, [r1, #0]
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 f852 	bl	800b97c <_free_r>
 800b8d8:	4631      	mov	r1, r6
 800b8da:	e7bb      	b.n	800b854 <_reclaim_reent+0x1c>
 800b8dc:	bd70      	pop	{r4, r5, r6, pc}
 800b8de:	bf00      	nop
 800b8e0:	200000fc 	.word	0x200000fc

0800b8e4 <__errno>:
 800b8e4:	4b01      	ldr	r3, [pc, #4]	@ (800b8ec <__errno+0x8>)
 800b8e6:	6818      	ldr	r0, [r3, #0]
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	200000fc 	.word	0x200000fc

0800b8f0 <__libc_init_array>:
 800b8f0:	b570      	push	{r4, r5, r6, lr}
 800b8f2:	4d0d      	ldr	r5, [pc, #52]	@ (800b928 <__libc_init_array+0x38>)
 800b8f4:	4c0d      	ldr	r4, [pc, #52]	@ (800b92c <__libc_init_array+0x3c>)
 800b8f6:	1b64      	subs	r4, r4, r5
 800b8f8:	10a4      	asrs	r4, r4, #2
 800b8fa:	2600      	movs	r6, #0
 800b8fc:	42a6      	cmp	r6, r4
 800b8fe:	d109      	bne.n	800b914 <__libc_init_array+0x24>
 800b900:	4d0b      	ldr	r5, [pc, #44]	@ (800b930 <__libc_init_array+0x40>)
 800b902:	4c0c      	ldr	r4, [pc, #48]	@ (800b934 <__libc_init_array+0x44>)
 800b904:	f000 fec6 	bl	800c694 <_init>
 800b908:	1b64      	subs	r4, r4, r5
 800b90a:	10a4      	asrs	r4, r4, #2
 800b90c:	2600      	movs	r6, #0
 800b90e:	42a6      	cmp	r6, r4
 800b910:	d105      	bne.n	800b91e <__libc_init_array+0x2e>
 800b912:	bd70      	pop	{r4, r5, r6, pc}
 800b914:	f855 3b04 	ldr.w	r3, [r5], #4
 800b918:	4798      	blx	r3
 800b91a:	3601      	adds	r6, #1
 800b91c:	e7ee      	b.n	800b8fc <__libc_init_array+0xc>
 800b91e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b922:	4798      	blx	r3
 800b924:	3601      	adds	r6, #1
 800b926:	e7f2      	b.n	800b90e <__libc_init_array+0x1e>
 800b928:	0800cb90 	.word	0x0800cb90
 800b92c:	0800cb90 	.word	0x0800cb90
 800b930:	0800cb90 	.word	0x0800cb90
 800b934:	0800cb94 	.word	0x0800cb94

0800b938 <__retarget_lock_init_recursive>:
 800b938:	4770      	bx	lr

0800b93a <__retarget_lock_acquire_recursive>:
 800b93a:	4770      	bx	lr

0800b93c <__retarget_lock_release_recursive>:
 800b93c:	4770      	bx	lr
	...

0800b940 <__assert_func>:
 800b940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b942:	4614      	mov	r4, r2
 800b944:	461a      	mov	r2, r3
 800b946:	4b09      	ldr	r3, [pc, #36]	@ (800b96c <__assert_func+0x2c>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4605      	mov	r5, r0
 800b94c:	68d8      	ldr	r0, [r3, #12]
 800b94e:	b954      	cbnz	r4, 800b966 <__assert_func+0x26>
 800b950:	4b07      	ldr	r3, [pc, #28]	@ (800b970 <__assert_func+0x30>)
 800b952:	461c      	mov	r4, r3
 800b954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b958:	9100      	str	r1, [sp, #0]
 800b95a:	462b      	mov	r3, r5
 800b95c:	4905      	ldr	r1, [pc, #20]	@ (800b974 <__assert_func+0x34>)
 800b95e:	f000 fccd 	bl	800c2fc <fiprintf>
 800b962:	f000 fe4b 	bl	800c5fc <abort>
 800b966:	4b04      	ldr	r3, [pc, #16]	@ (800b978 <__assert_func+0x38>)
 800b968:	e7f4      	b.n	800b954 <__assert_func+0x14>
 800b96a:	bf00      	nop
 800b96c:	200000fc 	.word	0x200000fc
 800b970:	0800cb51 	.word	0x0800cb51
 800b974:	0800cb23 	.word	0x0800cb23
 800b978:	0800cb16 	.word	0x0800cb16

0800b97c <_free_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	4605      	mov	r5, r0
 800b980:	2900      	cmp	r1, #0
 800b982:	d041      	beq.n	800ba08 <_free_r+0x8c>
 800b984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b988:	1f0c      	subs	r4, r1, #4
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	bfb8      	it	lt
 800b98e:	18e4      	addlt	r4, r4, r3
 800b990:	f000 fc64 	bl	800c25c <__malloc_lock>
 800b994:	4a1d      	ldr	r2, [pc, #116]	@ (800ba0c <_free_r+0x90>)
 800b996:	6813      	ldr	r3, [r2, #0]
 800b998:	b933      	cbnz	r3, 800b9a8 <_free_r+0x2c>
 800b99a:	6063      	str	r3, [r4, #4]
 800b99c:	6014      	str	r4, [r2, #0]
 800b99e:	4628      	mov	r0, r5
 800b9a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9a4:	f000 bc60 	b.w	800c268 <__malloc_unlock>
 800b9a8:	42a3      	cmp	r3, r4
 800b9aa:	d908      	bls.n	800b9be <_free_r+0x42>
 800b9ac:	6820      	ldr	r0, [r4, #0]
 800b9ae:	1821      	adds	r1, r4, r0
 800b9b0:	428b      	cmp	r3, r1
 800b9b2:	bf01      	itttt	eq
 800b9b4:	6819      	ldreq	r1, [r3, #0]
 800b9b6:	685b      	ldreq	r3, [r3, #4]
 800b9b8:	1809      	addeq	r1, r1, r0
 800b9ba:	6021      	streq	r1, [r4, #0]
 800b9bc:	e7ed      	b.n	800b99a <_free_r+0x1e>
 800b9be:	461a      	mov	r2, r3
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	b10b      	cbz	r3, 800b9c8 <_free_r+0x4c>
 800b9c4:	42a3      	cmp	r3, r4
 800b9c6:	d9fa      	bls.n	800b9be <_free_r+0x42>
 800b9c8:	6811      	ldr	r1, [r2, #0]
 800b9ca:	1850      	adds	r0, r2, r1
 800b9cc:	42a0      	cmp	r0, r4
 800b9ce:	d10b      	bne.n	800b9e8 <_free_r+0x6c>
 800b9d0:	6820      	ldr	r0, [r4, #0]
 800b9d2:	4401      	add	r1, r0
 800b9d4:	1850      	adds	r0, r2, r1
 800b9d6:	4283      	cmp	r3, r0
 800b9d8:	6011      	str	r1, [r2, #0]
 800b9da:	d1e0      	bne.n	800b99e <_free_r+0x22>
 800b9dc:	6818      	ldr	r0, [r3, #0]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	6053      	str	r3, [r2, #4]
 800b9e2:	4408      	add	r0, r1
 800b9e4:	6010      	str	r0, [r2, #0]
 800b9e6:	e7da      	b.n	800b99e <_free_r+0x22>
 800b9e8:	d902      	bls.n	800b9f0 <_free_r+0x74>
 800b9ea:	230c      	movs	r3, #12
 800b9ec:	602b      	str	r3, [r5, #0]
 800b9ee:	e7d6      	b.n	800b99e <_free_r+0x22>
 800b9f0:	6820      	ldr	r0, [r4, #0]
 800b9f2:	1821      	adds	r1, r4, r0
 800b9f4:	428b      	cmp	r3, r1
 800b9f6:	bf04      	itt	eq
 800b9f8:	6819      	ldreq	r1, [r3, #0]
 800b9fa:	685b      	ldreq	r3, [r3, #4]
 800b9fc:	6063      	str	r3, [r4, #4]
 800b9fe:	bf04      	itt	eq
 800ba00:	1809      	addeq	r1, r1, r0
 800ba02:	6021      	streq	r1, [r4, #0]
 800ba04:	6054      	str	r4, [r2, #4]
 800ba06:	e7ca      	b.n	800b99e <_free_r+0x22>
 800ba08:	bd38      	pop	{r3, r4, r5, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20005954 	.word	0x20005954

0800ba10 <__sfputc_r>:
 800ba10:	6893      	ldr	r3, [r2, #8]
 800ba12:	3b01      	subs	r3, #1
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	b410      	push	{r4}
 800ba18:	6093      	str	r3, [r2, #8]
 800ba1a:	da08      	bge.n	800ba2e <__sfputc_r+0x1e>
 800ba1c:	6994      	ldr	r4, [r2, #24]
 800ba1e:	42a3      	cmp	r3, r4
 800ba20:	db01      	blt.n	800ba26 <__sfputc_r+0x16>
 800ba22:	290a      	cmp	r1, #10
 800ba24:	d103      	bne.n	800ba2e <__sfputc_r+0x1e>
 800ba26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba2a:	f000 bc79 	b.w	800c320 <__swbuf_r>
 800ba2e:	6813      	ldr	r3, [r2, #0]
 800ba30:	1c58      	adds	r0, r3, #1
 800ba32:	6010      	str	r0, [r2, #0]
 800ba34:	7019      	strb	r1, [r3, #0]
 800ba36:	4608      	mov	r0, r1
 800ba38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <__sfputs_r>:
 800ba3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba40:	4606      	mov	r6, r0
 800ba42:	460f      	mov	r7, r1
 800ba44:	4614      	mov	r4, r2
 800ba46:	18d5      	adds	r5, r2, r3
 800ba48:	42ac      	cmp	r4, r5
 800ba4a:	d101      	bne.n	800ba50 <__sfputs_r+0x12>
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	e007      	b.n	800ba60 <__sfputs_r+0x22>
 800ba50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba54:	463a      	mov	r2, r7
 800ba56:	4630      	mov	r0, r6
 800ba58:	f7ff ffda 	bl	800ba10 <__sfputc_r>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d1f3      	bne.n	800ba48 <__sfputs_r+0xa>
 800ba60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba64 <_vfiprintf_r>:
 800ba64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba68:	460d      	mov	r5, r1
 800ba6a:	b09d      	sub	sp, #116	@ 0x74
 800ba6c:	4614      	mov	r4, r2
 800ba6e:	4698      	mov	r8, r3
 800ba70:	4606      	mov	r6, r0
 800ba72:	b118      	cbz	r0, 800ba7c <_vfiprintf_r+0x18>
 800ba74:	6a03      	ldr	r3, [r0, #32]
 800ba76:	b90b      	cbnz	r3, 800ba7c <_vfiprintf_r+0x18>
 800ba78:	f7ff fd50 	bl	800b51c <__sinit>
 800ba7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba7e:	07d9      	lsls	r1, r3, #31
 800ba80:	d405      	bmi.n	800ba8e <_vfiprintf_r+0x2a>
 800ba82:	89ab      	ldrh	r3, [r5, #12]
 800ba84:	059a      	lsls	r2, r3, #22
 800ba86:	d402      	bmi.n	800ba8e <_vfiprintf_r+0x2a>
 800ba88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba8a:	f7ff ff56 	bl	800b93a <__retarget_lock_acquire_recursive>
 800ba8e:	89ab      	ldrh	r3, [r5, #12]
 800ba90:	071b      	lsls	r3, r3, #28
 800ba92:	d501      	bpl.n	800ba98 <_vfiprintf_r+0x34>
 800ba94:	692b      	ldr	r3, [r5, #16]
 800ba96:	b99b      	cbnz	r3, 800bac0 <_vfiprintf_r+0x5c>
 800ba98:	4629      	mov	r1, r5
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	f000 fc7e 	bl	800c39c <__swsetup_r>
 800baa0:	b170      	cbz	r0, 800bac0 <_vfiprintf_r+0x5c>
 800baa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baa4:	07dc      	lsls	r4, r3, #31
 800baa6:	d504      	bpl.n	800bab2 <_vfiprintf_r+0x4e>
 800baa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800baac:	b01d      	add	sp, #116	@ 0x74
 800baae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab2:	89ab      	ldrh	r3, [r5, #12]
 800bab4:	0598      	lsls	r0, r3, #22
 800bab6:	d4f7      	bmi.n	800baa8 <_vfiprintf_r+0x44>
 800bab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baba:	f7ff ff3f 	bl	800b93c <__retarget_lock_release_recursive>
 800babe:	e7f3      	b.n	800baa8 <_vfiprintf_r+0x44>
 800bac0:	2300      	movs	r3, #0
 800bac2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bac4:	2320      	movs	r3, #32
 800bac6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800baca:	f8cd 800c 	str.w	r8, [sp, #12]
 800bace:	2330      	movs	r3, #48	@ 0x30
 800bad0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc80 <_vfiprintf_r+0x21c>
 800bad4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bad8:	f04f 0901 	mov.w	r9, #1
 800badc:	4623      	mov	r3, r4
 800bade:	469a      	mov	sl, r3
 800bae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bae4:	b10a      	cbz	r2, 800baea <_vfiprintf_r+0x86>
 800bae6:	2a25      	cmp	r2, #37	@ 0x25
 800bae8:	d1f9      	bne.n	800bade <_vfiprintf_r+0x7a>
 800baea:	ebba 0b04 	subs.w	fp, sl, r4
 800baee:	d00b      	beq.n	800bb08 <_vfiprintf_r+0xa4>
 800baf0:	465b      	mov	r3, fp
 800baf2:	4622      	mov	r2, r4
 800baf4:	4629      	mov	r1, r5
 800baf6:	4630      	mov	r0, r6
 800baf8:	f7ff ffa1 	bl	800ba3e <__sfputs_r>
 800bafc:	3001      	adds	r0, #1
 800bafe:	f000 80a7 	beq.w	800bc50 <_vfiprintf_r+0x1ec>
 800bb02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb04:	445a      	add	r2, fp
 800bb06:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb08:	f89a 3000 	ldrb.w	r3, [sl]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f000 809f 	beq.w	800bc50 <_vfiprintf_r+0x1ec>
 800bb12:	2300      	movs	r3, #0
 800bb14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb1c:	f10a 0a01 	add.w	sl, sl, #1
 800bb20:	9304      	str	r3, [sp, #16]
 800bb22:	9307      	str	r3, [sp, #28]
 800bb24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb28:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb2a:	4654      	mov	r4, sl
 800bb2c:	2205      	movs	r2, #5
 800bb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb32:	4853      	ldr	r0, [pc, #332]	@ (800bc80 <_vfiprintf_r+0x21c>)
 800bb34:	f7f4 fb64 	bl	8000200 <memchr>
 800bb38:	9a04      	ldr	r2, [sp, #16]
 800bb3a:	b9d8      	cbnz	r0, 800bb74 <_vfiprintf_r+0x110>
 800bb3c:	06d1      	lsls	r1, r2, #27
 800bb3e:	bf44      	itt	mi
 800bb40:	2320      	movmi	r3, #32
 800bb42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb46:	0713      	lsls	r3, r2, #28
 800bb48:	bf44      	itt	mi
 800bb4a:	232b      	movmi	r3, #43	@ 0x2b
 800bb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb50:	f89a 3000 	ldrb.w	r3, [sl]
 800bb54:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb56:	d015      	beq.n	800bb84 <_vfiprintf_r+0x120>
 800bb58:	9a07      	ldr	r2, [sp, #28]
 800bb5a:	4654      	mov	r4, sl
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	f04f 0c0a 	mov.w	ip, #10
 800bb62:	4621      	mov	r1, r4
 800bb64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb68:	3b30      	subs	r3, #48	@ 0x30
 800bb6a:	2b09      	cmp	r3, #9
 800bb6c:	d94b      	bls.n	800bc06 <_vfiprintf_r+0x1a2>
 800bb6e:	b1b0      	cbz	r0, 800bb9e <_vfiprintf_r+0x13a>
 800bb70:	9207      	str	r2, [sp, #28]
 800bb72:	e014      	b.n	800bb9e <_vfiprintf_r+0x13a>
 800bb74:	eba0 0308 	sub.w	r3, r0, r8
 800bb78:	fa09 f303 	lsl.w	r3, r9, r3
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	9304      	str	r3, [sp, #16]
 800bb80:	46a2      	mov	sl, r4
 800bb82:	e7d2      	b.n	800bb2a <_vfiprintf_r+0xc6>
 800bb84:	9b03      	ldr	r3, [sp, #12]
 800bb86:	1d19      	adds	r1, r3, #4
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	9103      	str	r1, [sp, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	bfbb      	ittet	lt
 800bb90:	425b      	neglt	r3, r3
 800bb92:	f042 0202 	orrlt.w	r2, r2, #2
 800bb96:	9307      	strge	r3, [sp, #28]
 800bb98:	9307      	strlt	r3, [sp, #28]
 800bb9a:	bfb8      	it	lt
 800bb9c:	9204      	strlt	r2, [sp, #16]
 800bb9e:	7823      	ldrb	r3, [r4, #0]
 800bba0:	2b2e      	cmp	r3, #46	@ 0x2e
 800bba2:	d10a      	bne.n	800bbba <_vfiprintf_r+0x156>
 800bba4:	7863      	ldrb	r3, [r4, #1]
 800bba6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bba8:	d132      	bne.n	800bc10 <_vfiprintf_r+0x1ac>
 800bbaa:	9b03      	ldr	r3, [sp, #12]
 800bbac:	1d1a      	adds	r2, r3, #4
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	9203      	str	r2, [sp, #12]
 800bbb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbb6:	3402      	adds	r4, #2
 800bbb8:	9305      	str	r3, [sp, #20]
 800bbba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc90 <_vfiprintf_r+0x22c>
 800bbbe:	7821      	ldrb	r1, [r4, #0]
 800bbc0:	2203      	movs	r2, #3
 800bbc2:	4650      	mov	r0, sl
 800bbc4:	f7f4 fb1c 	bl	8000200 <memchr>
 800bbc8:	b138      	cbz	r0, 800bbda <_vfiprintf_r+0x176>
 800bbca:	9b04      	ldr	r3, [sp, #16]
 800bbcc:	eba0 000a 	sub.w	r0, r0, sl
 800bbd0:	2240      	movs	r2, #64	@ 0x40
 800bbd2:	4082      	lsls	r2, r0
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	3401      	adds	r4, #1
 800bbd8:	9304      	str	r3, [sp, #16]
 800bbda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbde:	4829      	ldr	r0, [pc, #164]	@ (800bc84 <_vfiprintf_r+0x220>)
 800bbe0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbe4:	2206      	movs	r2, #6
 800bbe6:	f7f4 fb0b 	bl	8000200 <memchr>
 800bbea:	2800      	cmp	r0, #0
 800bbec:	d03f      	beq.n	800bc6e <_vfiprintf_r+0x20a>
 800bbee:	4b26      	ldr	r3, [pc, #152]	@ (800bc88 <_vfiprintf_r+0x224>)
 800bbf0:	bb1b      	cbnz	r3, 800bc3a <_vfiprintf_r+0x1d6>
 800bbf2:	9b03      	ldr	r3, [sp, #12]
 800bbf4:	3307      	adds	r3, #7
 800bbf6:	f023 0307 	bic.w	r3, r3, #7
 800bbfa:	3308      	adds	r3, #8
 800bbfc:	9303      	str	r3, [sp, #12]
 800bbfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc00:	443b      	add	r3, r7
 800bc02:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc04:	e76a      	b.n	800badc <_vfiprintf_r+0x78>
 800bc06:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc0a:	460c      	mov	r4, r1
 800bc0c:	2001      	movs	r0, #1
 800bc0e:	e7a8      	b.n	800bb62 <_vfiprintf_r+0xfe>
 800bc10:	2300      	movs	r3, #0
 800bc12:	3401      	adds	r4, #1
 800bc14:	9305      	str	r3, [sp, #20]
 800bc16:	4619      	mov	r1, r3
 800bc18:	f04f 0c0a 	mov.w	ip, #10
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc22:	3a30      	subs	r2, #48	@ 0x30
 800bc24:	2a09      	cmp	r2, #9
 800bc26:	d903      	bls.n	800bc30 <_vfiprintf_r+0x1cc>
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d0c6      	beq.n	800bbba <_vfiprintf_r+0x156>
 800bc2c:	9105      	str	r1, [sp, #20]
 800bc2e:	e7c4      	b.n	800bbba <_vfiprintf_r+0x156>
 800bc30:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc34:	4604      	mov	r4, r0
 800bc36:	2301      	movs	r3, #1
 800bc38:	e7f0      	b.n	800bc1c <_vfiprintf_r+0x1b8>
 800bc3a:	ab03      	add	r3, sp, #12
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	462a      	mov	r2, r5
 800bc40:	4b12      	ldr	r3, [pc, #72]	@ (800bc8c <_vfiprintf_r+0x228>)
 800bc42:	a904      	add	r1, sp, #16
 800bc44:	4630      	mov	r0, r6
 800bc46:	f3af 8000 	nop.w
 800bc4a:	4607      	mov	r7, r0
 800bc4c:	1c78      	adds	r0, r7, #1
 800bc4e:	d1d6      	bne.n	800bbfe <_vfiprintf_r+0x19a>
 800bc50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc52:	07d9      	lsls	r1, r3, #31
 800bc54:	d405      	bmi.n	800bc62 <_vfiprintf_r+0x1fe>
 800bc56:	89ab      	ldrh	r3, [r5, #12]
 800bc58:	059a      	lsls	r2, r3, #22
 800bc5a:	d402      	bmi.n	800bc62 <_vfiprintf_r+0x1fe>
 800bc5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc5e:	f7ff fe6d 	bl	800b93c <__retarget_lock_release_recursive>
 800bc62:	89ab      	ldrh	r3, [r5, #12]
 800bc64:	065b      	lsls	r3, r3, #25
 800bc66:	f53f af1f 	bmi.w	800baa8 <_vfiprintf_r+0x44>
 800bc6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc6c:	e71e      	b.n	800baac <_vfiprintf_r+0x48>
 800bc6e:	ab03      	add	r3, sp, #12
 800bc70:	9300      	str	r3, [sp, #0]
 800bc72:	462a      	mov	r2, r5
 800bc74:	4b05      	ldr	r3, [pc, #20]	@ (800bc8c <_vfiprintf_r+0x228>)
 800bc76:	a904      	add	r1, sp, #16
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f000 f923 	bl	800bec4 <_printf_i>
 800bc7e:	e7e4      	b.n	800bc4a <_vfiprintf_r+0x1e6>
 800bc80:	0800cb52 	.word	0x0800cb52
 800bc84:	0800cb5c 	.word	0x0800cb5c
 800bc88:	00000000 	.word	0x00000000
 800bc8c:	0800ba3f 	.word	0x0800ba3f
 800bc90:	0800cb58 	.word	0x0800cb58

0800bc94 <malloc>:
 800bc94:	4b02      	ldr	r3, [pc, #8]	@ (800bca0 <malloc+0xc>)
 800bc96:	4601      	mov	r1, r0
 800bc98:	6818      	ldr	r0, [r3, #0]
 800bc9a:	f000 b825 	b.w	800bce8 <_malloc_r>
 800bc9e:	bf00      	nop
 800bca0:	200000fc 	.word	0x200000fc

0800bca4 <sbrk_aligned>:
 800bca4:	b570      	push	{r4, r5, r6, lr}
 800bca6:	4e0f      	ldr	r6, [pc, #60]	@ (800bce4 <sbrk_aligned+0x40>)
 800bca8:	460c      	mov	r4, r1
 800bcaa:	6831      	ldr	r1, [r6, #0]
 800bcac:	4605      	mov	r5, r0
 800bcae:	b911      	cbnz	r1, 800bcb6 <sbrk_aligned+0x12>
 800bcb0:	f000 fc82 	bl	800c5b8 <_sbrk_r>
 800bcb4:	6030      	str	r0, [r6, #0]
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	4628      	mov	r0, r5
 800bcba:	f000 fc7d 	bl	800c5b8 <_sbrk_r>
 800bcbe:	1c43      	adds	r3, r0, #1
 800bcc0:	d103      	bne.n	800bcca <sbrk_aligned+0x26>
 800bcc2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	bd70      	pop	{r4, r5, r6, pc}
 800bcca:	1cc4      	adds	r4, r0, #3
 800bccc:	f024 0403 	bic.w	r4, r4, #3
 800bcd0:	42a0      	cmp	r0, r4
 800bcd2:	d0f8      	beq.n	800bcc6 <sbrk_aligned+0x22>
 800bcd4:	1a21      	subs	r1, r4, r0
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	f000 fc6e 	bl	800c5b8 <_sbrk_r>
 800bcdc:	3001      	adds	r0, #1
 800bcde:	d1f2      	bne.n	800bcc6 <sbrk_aligned+0x22>
 800bce0:	e7ef      	b.n	800bcc2 <sbrk_aligned+0x1e>
 800bce2:	bf00      	nop
 800bce4:	20005950 	.word	0x20005950

0800bce8 <_malloc_r>:
 800bce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcec:	1ccd      	adds	r5, r1, #3
 800bcee:	f025 0503 	bic.w	r5, r5, #3
 800bcf2:	3508      	adds	r5, #8
 800bcf4:	2d0c      	cmp	r5, #12
 800bcf6:	bf38      	it	cc
 800bcf8:	250c      	movcc	r5, #12
 800bcfa:	2d00      	cmp	r5, #0
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	db01      	blt.n	800bd04 <_malloc_r+0x1c>
 800bd00:	42a9      	cmp	r1, r5
 800bd02:	d904      	bls.n	800bd0e <_malloc_r+0x26>
 800bd04:	230c      	movs	r3, #12
 800bd06:	6033      	str	r3, [r6, #0]
 800bd08:	2000      	movs	r0, #0
 800bd0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bde4 <_malloc_r+0xfc>
 800bd12:	f000 faa3 	bl	800c25c <__malloc_lock>
 800bd16:	f8d8 3000 	ldr.w	r3, [r8]
 800bd1a:	461c      	mov	r4, r3
 800bd1c:	bb44      	cbnz	r4, 800bd70 <_malloc_r+0x88>
 800bd1e:	4629      	mov	r1, r5
 800bd20:	4630      	mov	r0, r6
 800bd22:	f7ff ffbf 	bl	800bca4 <sbrk_aligned>
 800bd26:	1c43      	adds	r3, r0, #1
 800bd28:	4604      	mov	r4, r0
 800bd2a:	d158      	bne.n	800bdde <_malloc_r+0xf6>
 800bd2c:	f8d8 4000 	ldr.w	r4, [r8]
 800bd30:	4627      	mov	r7, r4
 800bd32:	2f00      	cmp	r7, #0
 800bd34:	d143      	bne.n	800bdbe <_malloc_r+0xd6>
 800bd36:	2c00      	cmp	r4, #0
 800bd38:	d04b      	beq.n	800bdd2 <_malloc_r+0xea>
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	4630      	mov	r0, r6
 800bd40:	eb04 0903 	add.w	r9, r4, r3
 800bd44:	f000 fc38 	bl	800c5b8 <_sbrk_r>
 800bd48:	4581      	cmp	r9, r0
 800bd4a:	d142      	bne.n	800bdd2 <_malloc_r+0xea>
 800bd4c:	6821      	ldr	r1, [r4, #0]
 800bd4e:	1a6d      	subs	r5, r5, r1
 800bd50:	4629      	mov	r1, r5
 800bd52:	4630      	mov	r0, r6
 800bd54:	f7ff ffa6 	bl	800bca4 <sbrk_aligned>
 800bd58:	3001      	adds	r0, #1
 800bd5a:	d03a      	beq.n	800bdd2 <_malloc_r+0xea>
 800bd5c:	6823      	ldr	r3, [r4, #0]
 800bd5e:	442b      	add	r3, r5
 800bd60:	6023      	str	r3, [r4, #0]
 800bd62:	f8d8 3000 	ldr.w	r3, [r8]
 800bd66:	685a      	ldr	r2, [r3, #4]
 800bd68:	bb62      	cbnz	r2, 800bdc4 <_malloc_r+0xdc>
 800bd6a:	f8c8 7000 	str.w	r7, [r8]
 800bd6e:	e00f      	b.n	800bd90 <_malloc_r+0xa8>
 800bd70:	6822      	ldr	r2, [r4, #0]
 800bd72:	1b52      	subs	r2, r2, r5
 800bd74:	d420      	bmi.n	800bdb8 <_malloc_r+0xd0>
 800bd76:	2a0b      	cmp	r2, #11
 800bd78:	d917      	bls.n	800bdaa <_malloc_r+0xc2>
 800bd7a:	1961      	adds	r1, r4, r5
 800bd7c:	42a3      	cmp	r3, r4
 800bd7e:	6025      	str	r5, [r4, #0]
 800bd80:	bf18      	it	ne
 800bd82:	6059      	strne	r1, [r3, #4]
 800bd84:	6863      	ldr	r3, [r4, #4]
 800bd86:	bf08      	it	eq
 800bd88:	f8c8 1000 	streq.w	r1, [r8]
 800bd8c:	5162      	str	r2, [r4, r5]
 800bd8e:	604b      	str	r3, [r1, #4]
 800bd90:	4630      	mov	r0, r6
 800bd92:	f000 fa69 	bl	800c268 <__malloc_unlock>
 800bd96:	f104 000b 	add.w	r0, r4, #11
 800bd9a:	1d23      	adds	r3, r4, #4
 800bd9c:	f020 0007 	bic.w	r0, r0, #7
 800bda0:	1ac2      	subs	r2, r0, r3
 800bda2:	bf1c      	itt	ne
 800bda4:	1a1b      	subne	r3, r3, r0
 800bda6:	50a3      	strne	r3, [r4, r2]
 800bda8:	e7af      	b.n	800bd0a <_malloc_r+0x22>
 800bdaa:	6862      	ldr	r2, [r4, #4]
 800bdac:	42a3      	cmp	r3, r4
 800bdae:	bf0c      	ite	eq
 800bdb0:	f8c8 2000 	streq.w	r2, [r8]
 800bdb4:	605a      	strne	r2, [r3, #4]
 800bdb6:	e7eb      	b.n	800bd90 <_malloc_r+0xa8>
 800bdb8:	4623      	mov	r3, r4
 800bdba:	6864      	ldr	r4, [r4, #4]
 800bdbc:	e7ae      	b.n	800bd1c <_malloc_r+0x34>
 800bdbe:	463c      	mov	r4, r7
 800bdc0:	687f      	ldr	r7, [r7, #4]
 800bdc2:	e7b6      	b.n	800bd32 <_malloc_r+0x4a>
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	42a3      	cmp	r3, r4
 800bdca:	d1fb      	bne.n	800bdc4 <_malloc_r+0xdc>
 800bdcc:	2300      	movs	r3, #0
 800bdce:	6053      	str	r3, [r2, #4]
 800bdd0:	e7de      	b.n	800bd90 <_malloc_r+0xa8>
 800bdd2:	230c      	movs	r3, #12
 800bdd4:	6033      	str	r3, [r6, #0]
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f000 fa46 	bl	800c268 <__malloc_unlock>
 800bddc:	e794      	b.n	800bd08 <_malloc_r+0x20>
 800bdde:	6005      	str	r5, [r0, #0]
 800bde0:	e7d6      	b.n	800bd90 <_malloc_r+0xa8>
 800bde2:	bf00      	nop
 800bde4:	20005954 	.word	0x20005954

0800bde8 <_printf_common>:
 800bde8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdec:	4616      	mov	r6, r2
 800bdee:	4698      	mov	r8, r3
 800bdf0:	688a      	ldr	r2, [r1, #8]
 800bdf2:	690b      	ldr	r3, [r1, #16]
 800bdf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	bfb8      	it	lt
 800bdfc:	4613      	movlt	r3, r2
 800bdfe:	6033      	str	r3, [r6, #0]
 800be00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be04:	4607      	mov	r7, r0
 800be06:	460c      	mov	r4, r1
 800be08:	b10a      	cbz	r2, 800be0e <_printf_common+0x26>
 800be0a:	3301      	adds	r3, #1
 800be0c:	6033      	str	r3, [r6, #0]
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	0699      	lsls	r1, r3, #26
 800be12:	bf42      	ittt	mi
 800be14:	6833      	ldrmi	r3, [r6, #0]
 800be16:	3302      	addmi	r3, #2
 800be18:	6033      	strmi	r3, [r6, #0]
 800be1a:	6825      	ldr	r5, [r4, #0]
 800be1c:	f015 0506 	ands.w	r5, r5, #6
 800be20:	d106      	bne.n	800be30 <_printf_common+0x48>
 800be22:	f104 0a19 	add.w	sl, r4, #25
 800be26:	68e3      	ldr	r3, [r4, #12]
 800be28:	6832      	ldr	r2, [r6, #0]
 800be2a:	1a9b      	subs	r3, r3, r2
 800be2c:	42ab      	cmp	r3, r5
 800be2e:	dc26      	bgt.n	800be7e <_printf_common+0x96>
 800be30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be34:	6822      	ldr	r2, [r4, #0]
 800be36:	3b00      	subs	r3, #0
 800be38:	bf18      	it	ne
 800be3a:	2301      	movne	r3, #1
 800be3c:	0692      	lsls	r2, r2, #26
 800be3e:	d42b      	bmi.n	800be98 <_printf_common+0xb0>
 800be40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be44:	4641      	mov	r1, r8
 800be46:	4638      	mov	r0, r7
 800be48:	47c8      	blx	r9
 800be4a:	3001      	adds	r0, #1
 800be4c:	d01e      	beq.n	800be8c <_printf_common+0xa4>
 800be4e:	6823      	ldr	r3, [r4, #0]
 800be50:	6922      	ldr	r2, [r4, #16]
 800be52:	f003 0306 	and.w	r3, r3, #6
 800be56:	2b04      	cmp	r3, #4
 800be58:	bf02      	ittt	eq
 800be5a:	68e5      	ldreq	r5, [r4, #12]
 800be5c:	6833      	ldreq	r3, [r6, #0]
 800be5e:	1aed      	subeq	r5, r5, r3
 800be60:	68a3      	ldr	r3, [r4, #8]
 800be62:	bf0c      	ite	eq
 800be64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be68:	2500      	movne	r5, #0
 800be6a:	4293      	cmp	r3, r2
 800be6c:	bfc4      	itt	gt
 800be6e:	1a9b      	subgt	r3, r3, r2
 800be70:	18ed      	addgt	r5, r5, r3
 800be72:	2600      	movs	r6, #0
 800be74:	341a      	adds	r4, #26
 800be76:	42b5      	cmp	r5, r6
 800be78:	d11a      	bne.n	800beb0 <_printf_common+0xc8>
 800be7a:	2000      	movs	r0, #0
 800be7c:	e008      	b.n	800be90 <_printf_common+0xa8>
 800be7e:	2301      	movs	r3, #1
 800be80:	4652      	mov	r2, sl
 800be82:	4641      	mov	r1, r8
 800be84:	4638      	mov	r0, r7
 800be86:	47c8      	blx	r9
 800be88:	3001      	adds	r0, #1
 800be8a:	d103      	bne.n	800be94 <_printf_common+0xac>
 800be8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be94:	3501      	adds	r5, #1
 800be96:	e7c6      	b.n	800be26 <_printf_common+0x3e>
 800be98:	18e1      	adds	r1, r4, r3
 800be9a:	1c5a      	adds	r2, r3, #1
 800be9c:	2030      	movs	r0, #48	@ 0x30
 800be9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bea2:	4422      	add	r2, r4
 800bea4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bea8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800beac:	3302      	adds	r3, #2
 800beae:	e7c7      	b.n	800be40 <_printf_common+0x58>
 800beb0:	2301      	movs	r3, #1
 800beb2:	4622      	mov	r2, r4
 800beb4:	4641      	mov	r1, r8
 800beb6:	4638      	mov	r0, r7
 800beb8:	47c8      	blx	r9
 800beba:	3001      	adds	r0, #1
 800bebc:	d0e6      	beq.n	800be8c <_printf_common+0xa4>
 800bebe:	3601      	adds	r6, #1
 800bec0:	e7d9      	b.n	800be76 <_printf_common+0x8e>
	...

0800bec4 <_printf_i>:
 800bec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bec8:	7e0f      	ldrb	r7, [r1, #24]
 800beca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800becc:	2f78      	cmp	r7, #120	@ 0x78
 800bece:	4691      	mov	r9, r2
 800bed0:	4680      	mov	r8, r0
 800bed2:	460c      	mov	r4, r1
 800bed4:	469a      	mov	sl, r3
 800bed6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800beda:	d807      	bhi.n	800beec <_printf_i+0x28>
 800bedc:	2f62      	cmp	r7, #98	@ 0x62
 800bede:	d80a      	bhi.n	800bef6 <_printf_i+0x32>
 800bee0:	2f00      	cmp	r7, #0
 800bee2:	f000 80d2 	beq.w	800c08a <_printf_i+0x1c6>
 800bee6:	2f58      	cmp	r7, #88	@ 0x58
 800bee8:	f000 80b9 	beq.w	800c05e <_printf_i+0x19a>
 800beec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bef0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bef4:	e03a      	b.n	800bf6c <_printf_i+0xa8>
 800bef6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800befa:	2b15      	cmp	r3, #21
 800befc:	d8f6      	bhi.n	800beec <_printf_i+0x28>
 800befe:	a101      	add	r1, pc, #4	@ (adr r1, 800bf04 <_printf_i+0x40>)
 800bf00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf04:	0800bf5d 	.word	0x0800bf5d
 800bf08:	0800bf71 	.word	0x0800bf71
 800bf0c:	0800beed 	.word	0x0800beed
 800bf10:	0800beed 	.word	0x0800beed
 800bf14:	0800beed 	.word	0x0800beed
 800bf18:	0800beed 	.word	0x0800beed
 800bf1c:	0800bf71 	.word	0x0800bf71
 800bf20:	0800beed 	.word	0x0800beed
 800bf24:	0800beed 	.word	0x0800beed
 800bf28:	0800beed 	.word	0x0800beed
 800bf2c:	0800beed 	.word	0x0800beed
 800bf30:	0800c071 	.word	0x0800c071
 800bf34:	0800bf9b 	.word	0x0800bf9b
 800bf38:	0800c02b 	.word	0x0800c02b
 800bf3c:	0800beed 	.word	0x0800beed
 800bf40:	0800beed 	.word	0x0800beed
 800bf44:	0800c093 	.word	0x0800c093
 800bf48:	0800beed 	.word	0x0800beed
 800bf4c:	0800bf9b 	.word	0x0800bf9b
 800bf50:	0800beed 	.word	0x0800beed
 800bf54:	0800beed 	.word	0x0800beed
 800bf58:	0800c033 	.word	0x0800c033
 800bf5c:	6833      	ldr	r3, [r6, #0]
 800bf5e:	1d1a      	adds	r2, r3, #4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6032      	str	r2, [r6, #0]
 800bf64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e09d      	b.n	800c0ac <_printf_i+0x1e8>
 800bf70:	6833      	ldr	r3, [r6, #0]
 800bf72:	6820      	ldr	r0, [r4, #0]
 800bf74:	1d19      	adds	r1, r3, #4
 800bf76:	6031      	str	r1, [r6, #0]
 800bf78:	0606      	lsls	r6, r0, #24
 800bf7a:	d501      	bpl.n	800bf80 <_printf_i+0xbc>
 800bf7c:	681d      	ldr	r5, [r3, #0]
 800bf7e:	e003      	b.n	800bf88 <_printf_i+0xc4>
 800bf80:	0645      	lsls	r5, r0, #25
 800bf82:	d5fb      	bpl.n	800bf7c <_printf_i+0xb8>
 800bf84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf88:	2d00      	cmp	r5, #0
 800bf8a:	da03      	bge.n	800bf94 <_printf_i+0xd0>
 800bf8c:	232d      	movs	r3, #45	@ 0x2d
 800bf8e:	426d      	negs	r5, r5
 800bf90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf94:	4859      	ldr	r0, [pc, #356]	@ (800c0fc <_printf_i+0x238>)
 800bf96:	230a      	movs	r3, #10
 800bf98:	e011      	b.n	800bfbe <_printf_i+0xfa>
 800bf9a:	6821      	ldr	r1, [r4, #0]
 800bf9c:	6833      	ldr	r3, [r6, #0]
 800bf9e:	0608      	lsls	r0, r1, #24
 800bfa0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bfa4:	d402      	bmi.n	800bfac <_printf_i+0xe8>
 800bfa6:	0649      	lsls	r1, r1, #25
 800bfa8:	bf48      	it	mi
 800bfaa:	b2ad      	uxthmi	r5, r5
 800bfac:	2f6f      	cmp	r7, #111	@ 0x6f
 800bfae:	4853      	ldr	r0, [pc, #332]	@ (800c0fc <_printf_i+0x238>)
 800bfb0:	6033      	str	r3, [r6, #0]
 800bfb2:	bf14      	ite	ne
 800bfb4:	230a      	movne	r3, #10
 800bfb6:	2308      	moveq	r3, #8
 800bfb8:	2100      	movs	r1, #0
 800bfba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bfbe:	6866      	ldr	r6, [r4, #4]
 800bfc0:	60a6      	str	r6, [r4, #8]
 800bfc2:	2e00      	cmp	r6, #0
 800bfc4:	bfa2      	ittt	ge
 800bfc6:	6821      	ldrge	r1, [r4, #0]
 800bfc8:	f021 0104 	bicge.w	r1, r1, #4
 800bfcc:	6021      	strge	r1, [r4, #0]
 800bfce:	b90d      	cbnz	r5, 800bfd4 <_printf_i+0x110>
 800bfd0:	2e00      	cmp	r6, #0
 800bfd2:	d04b      	beq.n	800c06c <_printf_i+0x1a8>
 800bfd4:	4616      	mov	r6, r2
 800bfd6:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfda:	fb03 5711 	mls	r7, r3, r1, r5
 800bfde:	5dc7      	ldrb	r7, [r0, r7]
 800bfe0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfe4:	462f      	mov	r7, r5
 800bfe6:	42bb      	cmp	r3, r7
 800bfe8:	460d      	mov	r5, r1
 800bfea:	d9f4      	bls.n	800bfd6 <_printf_i+0x112>
 800bfec:	2b08      	cmp	r3, #8
 800bfee:	d10b      	bne.n	800c008 <_printf_i+0x144>
 800bff0:	6823      	ldr	r3, [r4, #0]
 800bff2:	07df      	lsls	r7, r3, #31
 800bff4:	d508      	bpl.n	800c008 <_printf_i+0x144>
 800bff6:	6923      	ldr	r3, [r4, #16]
 800bff8:	6861      	ldr	r1, [r4, #4]
 800bffa:	4299      	cmp	r1, r3
 800bffc:	bfde      	ittt	le
 800bffe:	2330      	movle	r3, #48	@ 0x30
 800c000:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c004:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c008:	1b92      	subs	r2, r2, r6
 800c00a:	6122      	str	r2, [r4, #16]
 800c00c:	f8cd a000 	str.w	sl, [sp]
 800c010:	464b      	mov	r3, r9
 800c012:	aa03      	add	r2, sp, #12
 800c014:	4621      	mov	r1, r4
 800c016:	4640      	mov	r0, r8
 800c018:	f7ff fee6 	bl	800bde8 <_printf_common>
 800c01c:	3001      	adds	r0, #1
 800c01e:	d14a      	bne.n	800c0b6 <_printf_i+0x1f2>
 800c020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c024:	b004      	add	sp, #16
 800c026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	f043 0320 	orr.w	r3, r3, #32
 800c030:	6023      	str	r3, [r4, #0]
 800c032:	4833      	ldr	r0, [pc, #204]	@ (800c100 <_printf_i+0x23c>)
 800c034:	2778      	movs	r7, #120	@ 0x78
 800c036:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c03a:	6823      	ldr	r3, [r4, #0]
 800c03c:	6831      	ldr	r1, [r6, #0]
 800c03e:	061f      	lsls	r7, r3, #24
 800c040:	f851 5b04 	ldr.w	r5, [r1], #4
 800c044:	d402      	bmi.n	800c04c <_printf_i+0x188>
 800c046:	065f      	lsls	r7, r3, #25
 800c048:	bf48      	it	mi
 800c04a:	b2ad      	uxthmi	r5, r5
 800c04c:	6031      	str	r1, [r6, #0]
 800c04e:	07d9      	lsls	r1, r3, #31
 800c050:	bf44      	itt	mi
 800c052:	f043 0320 	orrmi.w	r3, r3, #32
 800c056:	6023      	strmi	r3, [r4, #0]
 800c058:	b11d      	cbz	r5, 800c062 <_printf_i+0x19e>
 800c05a:	2310      	movs	r3, #16
 800c05c:	e7ac      	b.n	800bfb8 <_printf_i+0xf4>
 800c05e:	4827      	ldr	r0, [pc, #156]	@ (800c0fc <_printf_i+0x238>)
 800c060:	e7e9      	b.n	800c036 <_printf_i+0x172>
 800c062:	6823      	ldr	r3, [r4, #0]
 800c064:	f023 0320 	bic.w	r3, r3, #32
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	e7f6      	b.n	800c05a <_printf_i+0x196>
 800c06c:	4616      	mov	r6, r2
 800c06e:	e7bd      	b.n	800bfec <_printf_i+0x128>
 800c070:	6833      	ldr	r3, [r6, #0]
 800c072:	6825      	ldr	r5, [r4, #0]
 800c074:	6961      	ldr	r1, [r4, #20]
 800c076:	1d18      	adds	r0, r3, #4
 800c078:	6030      	str	r0, [r6, #0]
 800c07a:	062e      	lsls	r6, r5, #24
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	d501      	bpl.n	800c084 <_printf_i+0x1c0>
 800c080:	6019      	str	r1, [r3, #0]
 800c082:	e002      	b.n	800c08a <_printf_i+0x1c6>
 800c084:	0668      	lsls	r0, r5, #25
 800c086:	d5fb      	bpl.n	800c080 <_printf_i+0x1bc>
 800c088:	8019      	strh	r1, [r3, #0]
 800c08a:	2300      	movs	r3, #0
 800c08c:	6123      	str	r3, [r4, #16]
 800c08e:	4616      	mov	r6, r2
 800c090:	e7bc      	b.n	800c00c <_printf_i+0x148>
 800c092:	6833      	ldr	r3, [r6, #0]
 800c094:	1d1a      	adds	r2, r3, #4
 800c096:	6032      	str	r2, [r6, #0]
 800c098:	681e      	ldr	r6, [r3, #0]
 800c09a:	6862      	ldr	r2, [r4, #4]
 800c09c:	2100      	movs	r1, #0
 800c09e:	4630      	mov	r0, r6
 800c0a0:	f7f4 f8ae 	bl	8000200 <memchr>
 800c0a4:	b108      	cbz	r0, 800c0aa <_printf_i+0x1e6>
 800c0a6:	1b80      	subs	r0, r0, r6
 800c0a8:	6060      	str	r0, [r4, #4]
 800c0aa:	6863      	ldr	r3, [r4, #4]
 800c0ac:	6123      	str	r3, [r4, #16]
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0b4:	e7aa      	b.n	800c00c <_printf_i+0x148>
 800c0b6:	6923      	ldr	r3, [r4, #16]
 800c0b8:	4632      	mov	r2, r6
 800c0ba:	4649      	mov	r1, r9
 800c0bc:	4640      	mov	r0, r8
 800c0be:	47d0      	blx	sl
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	d0ad      	beq.n	800c020 <_printf_i+0x15c>
 800c0c4:	6823      	ldr	r3, [r4, #0]
 800c0c6:	079b      	lsls	r3, r3, #30
 800c0c8:	d413      	bmi.n	800c0f2 <_printf_i+0x22e>
 800c0ca:	68e0      	ldr	r0, [r4, #12]
 800c0cc:	9b03      	ldr	r3, [sp, #12]
 800c0ce:	4298      	cmp	r0, r3
 800c0d0:	bfb8      	it	lt
 800c0d2:	4618      	movlt	r0, r3
 800c0d4:	e7a6      	b.n	800c024 <_printf_i+0x160>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	4632      	mov	r2, r6
 800c0da:	4649      	mov	r1, r9
 800c0dc:	4640      	mov	r0, r8
 800c0de:	47d0      	blx	sl
 800c0e0:	3001      	adds	r0, #1
 800c0e2:	d09d      	beq.n	800c020 <_printf_i+0x15c>
 800c0e4:	3501      	adds	r5, #1
 800c0e6:	68e3      	ldr	r3, [r4, #12]
 800c0e8:	9903      	ldr	r1, [sp, #12]
 800c0ea:	1a5b      	subs	r3, r3, r1
 800c0ec:	42ab      	cmp	r3, r5
 800c0ee:	dcf2      	bgt.n	800c0d6 <_printf_i+0x212>
 800c0f0:	e7eb      	b.n	800c0ca <_printf_i+0x206>
 800c0f2:	2500      	movs	r5, #0
 800c0f4:	f104 0619 	add.w	r6, r4, #25
 800c0f8:	e7f5      	b.n	800c0e6 <_printf_i+0x222>
 800c0fa:	bf00      	nop
 800c0fc:	0800cb63 	.word	0x0800cb63
 800c100:	0800cb74 	.word	0x0800cb74

0800c104 <__sflush_r>:
 800c104:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10c:	0716      	lsls	r6, r2, #28
 800c10e:	4605      	mov	r5, r0
 800c110:	460c      	mov	r4, r1
 800c112:	d454      	bmi.n	800c1be <__sflush_r+0xba>
 800c114:	684b      	ldr	r3, [r1, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	dc02      	bgt.n	800c120 <__sflush_r+0x1c>
 800c11a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	dd48      	ble.n	800c1b2 <__sflush_r+0xae>
 800c120:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c122:	2e00      	cmp	r6, #0
 800c124:	d045      	beq.n	800c1b2 <__sflush_r+0xae>
 800c126:	2300      	movs	r3, #0
 800c128:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c12c:	682f      	ldr	r7, [r5, #0]
 800c12e:	6a21      	ldr	r1, [r4, #32]
 800c130:	602b      	str	r3, [r5, #0]
 800c132:	d030      	beq.n	800c196 <__sflush_r+0x92>
 800c134:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c136:	89a3      	ldrh	r3, [r4, #12]
 800c138:	0759      	lsls	r1, r3, #29
 800c13a:	d505      	bpl.n	800c148 <__sflush_r+0x44>
 800c13c:	6863      	ldr	r3, [r4, #4]
 800c13e:	1ad2      	subs	r2, r2, r3
 800c140:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c142:	b10b      	cbz	r3, 800c148 <__sflush_r+0x44>
 800c144:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c146:	1ad2      	subs	r2, r2, r3
 800c148:	2300      	movs	r3, #0
 800c14a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c14c:	6a21      	ldr	r1, [r4, #32]
 800c14e:	4628      	mov	r0, r5
 800c150:	47b0      	blx	r6
 800c152:	1c43      	adds	r3, r0, #1
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	d106      	bne.n	800c166 <__sflush_r+0x62>
 800c158:	6829      	ldr	r1, [r5, #0]
 800c15a:	291d      	cmp	r1, #29
 800c15c:	d82b      	bhi.n	800c1b6 <__sflush_r+0xb2>
 800c15e:	4a2a      	ldr	r2, [pc, #168]	@ (800c208 <__sflush_r+0x104>)
 800c160:	410a      	asrs	r2, r1
 800c162:	07d6      	lsls	r6, r2, #31
 800c164:	d427      	bmi.n	800c1b6 <__sflush_r+0xb2>
 800c166:	2200      	movs	r2, #0
 800c168:	6062      	str	r2, [r4, #4]
 800c16a:	04d9      	lsls	r1, r3, #19
 800c16c:	6922      	ldr	r2, [r4, #16]
 800c16e:	6022      	str	r2, [r4, #0]
 800c170:	d504      	bpl.n	800c17c <__sflush_r+0x78>
 800c172:	1c42      	adds	r2, r0, #1
 800c174:	d101      	bne.n	800c17a <__sflush_r+0x76>
 800c176:	682b      	ldr	r3, [r5, #0]
 800c178:	b903      	cbnz	r3, 800c17c <__sflush_r+0x78>
 800c17a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c17c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c17e:	602f      	str	r7, [r5, #0]
 800c180:	b1b9      	cbz	r1, 800c1b2 <__sflush_r+0xae>
 800c182:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c186:	4299      	cmp	r1, r3
 800c188:	d002      	beq.n	800c190 <__sflush_r+0x8c>
 800c18a:	4628      	mov	r0, r5
 800c18c:	f7ff fbf6 	bl	800b97c <_free_r>
 800c190:	2300      	movs	r3, #0
 800c192:	6363      	str	r3, [r4, #52]	@ 0x34
 800c194:	e00d      	b.n	800c1b2 <__sflush_r+0xae>
 800c196:	2301      	movs	r3, #1
 800c198:	4628      	mov	r0, r5
 800c19a:	47b0      	blx	r6
 800c19c:	4602      	mov	r2, r0
 800c19e:	1c50      	adds	r0, r2, #1
 800c1a0:	d1c9      	bne.n	800c136 <__sflush_r+0x32>
 800c1a2:	682b      	ldr	r3, [r5, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d0c6      	beq.n	800c136 <__sflush_r+0x32>
 800c1a8:	2b1d      	cmp	r3, #29
 800c1aa:	d001      	beq.n	800c1b0 <__sflush_r+0xac>
 800c1ac:	2b16      	cmp	r3, #22
 800c1ae:	d11e      	bne.n	800c1ee <__sflush_r+0xea>
 800c1b0:	602f      	str	r7, [r5, #0]
 800c1b2:	2000      	movs	r0, #0
 800c1b4:	e022      	b.n	800c1fc <__sflush_r+0xf8>
 800c1b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ba:	b21b      	sxth	r3, r3
 800c1bc:	e01b      	b.n	800c1f6 <__sflush_r+0xf2>
 800c1be:	690f      	ldr	r7, [r1, #16]
 800c1c0:	2f00      	cmp	r7, #0
 800c1c2:	d0f6      	beq.n	800c1b2 <__sflush_r+0xae>
 800c1c4:	0793      	lsls	r3, r2, #30
 800c1c6:	680e      	ldr	r6, [r1, #0]
 800c1c8:	bf08      	it	eq
 800c1ca:	694b      	ldreq	r3, [r1, #20]
 800c1cc:	600f      	str	r7, [r1, #0]
 800c1ce:	bf18      	it	ne
 800c1d0:	2300      	movne	r3, #0
 800c1d2:	eba6 0807 	sub.w	r8, r6, r7
 800c1d6:	608b      	str	r3, [r1, #8]
 800c1d8:	f1b8 0f00 	cmp.w	r8, #0
 800c1dc:	dde9      	ble.n	800c1b2 <__sflush_r+0xae>
 800c1de:	6a21      	ldr	r1, [r4, #32]
 800c1e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c1e2:	4643      	mov	r3, r8
 800c1e4:	463a      	mov	r2, r7
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	47b0      	blx	r6
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	dc08      	bgt.n	800c200 <__sflush_r+0xfc>
 800c1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1f6:	81a3      	strh	r3, [r4, #12]
 800c1f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c200:	4407      	add	r7, r0
 800c202:	eba8 0800 	sub.w	r8, r8, r0
 800c206:	e7e7      	b.n	800c1d8 <__sflush_r+0xd4>
 800c208:	dfbffffe 	.word	0xdfbffffe

0800c20c <_fflush_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	690b      	ldr	r3, [r1, #16]
 800c210:	4605      	mov	r5, r0
 800c212:	460c      	mov	r4, r1
 800c214:	b913      	cbnz	r3, 800c21c <_fflush_r+0x10>
 800c216:	2500      	movs	r5, #0
 800c218:	4628      	mov	r0, r5
 800c21a:	bd38      	pop	{r3, r4, r5, pc}
 800c21c:	b118      	cbz	r0, 800c226 <_fflush_r+0x1a>
 800c21e:	6a03      	ldr	r3, [r0, #32]
 800c220:	b90b      	cbnz	r3, 800c226 <_fflush_r+0x1a>
 800c222:	f7ff f97b 	bl	800b51c <__sinit>
 800c226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d0f3      	beq.n	800c216 <_fflush_r+0xa>
 800c22e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c230:	07d0      	lsls	r0, r2, #31
 800c232:	d404      	bmi.n	800c23e <_fflush_r+0x32>
 800c234:	0599      	lsls	r1, r3, #22
 800c236:	d402      	bmi.n	800c23e <_fflush_r+0x32>
 800c238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c23a:	f7ff fb7e 	bl	800b93a <__retarget_lock_acquire_recursive>
 800c23e:	4628      	mov	r0, r5
 800c240:	4621      	mov	r1, r4
 800c242:	f7ff ff5f 	bl	800c104 <__sflush_r>
 800c246:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c248:	07da      	lsls	r2, r3, #31
 800c24a:	4605      	mov	r5, r0
 800c24c:	d4e4      	bmi.n	800c218 <_fflush_r+0xc>
 800c24e:	89a3      	ldrh	r3, [r4, #12]
 800c250:	059b      	lsls	r3, r3, #22
 800c252:	d4e1      	bmi.n	800c218 <_fflush_r+0xc>
 800c254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c256:	f7ff fb71 	bl	800b93c <__retarget_lock_release_recursive>
 800c25a:	e7dd      	b.n	800c218 <_fflush_r+0xc>

0800c25c <__malloc_lock>:
 800c25c:	4801      	ldr	r0, [pc, #4]	@ (800c264 <__malloc_lock+0x8>)
 800c25e:	f7ff bb6c 	b.w	800b93a <__retarget_lock_acquire_recursive>
 800c262:	bf00      	nop
 800c264:	2000594c 	.word	0x2000594c

0800c268 <__malloc_unlock>:
 800c268:	4801      	ldr	r0, [pc, #4]	@ (800c270 <__malloc_unlock+0x8>)
 800c26a:	f7ff bb67 	b.w	800b93c <__retarget_lock_release_recursive>
 800c26e:	bf00      	nop
 800c270:	2000594c 	.word	0x2000594c

0800c274 <__sread>:
 800c274:	b510      	push	{r4, lr}
 800c276:	460c      	mov	r4, r1
 800c278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c27c:	f000 f98a 	bl	800c594 <_read_r>
 800c280:	2800      	cmp	r0, #0
 800c282:	bfab      	itete	ge
 800c284:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c286:	89a3      	ldrhlt	r3, [r4, #12]
 800c288:	181b      	addge	r3, r3, r0
 800c28a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c28e:	bfac      	ite	ge
 800c290:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c292:	81a3      	strhlt	r3, [r4, #12]
 800c294:	bd10      	pop	{r4, pc}

0800c296 <__swrite>:
 800c296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c29a:	461f      	mov	r7, r3
 800c29c:	898b      	ldrh	r3, [r1, #12]
 800c29e:	05db      	lsls	r3, r3, #23
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	4616      	mov	r6, r2
 800c2a6:	d505      	bpl.n	800c2b4 <__swrite+0x1e>
 800c2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f000 f95e 	bl	800c570 <_lseek_r>
 800c2b4:	89a3      	ldrh	r3, [r4, #12]
 800c2b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c2be:	81a3      	strh	r3, [r4, #12]
 800c2c0:	4632      	mov	r2, r6
 800c2c2:	463b      	mov	r3, r7
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ca:	f000 b985 	b.w	800c5d8 <_write_r>

0800c2ce <__sseek>:
 800c2ce:	b510      	push	{r4, lr}
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d6:	f000 f94b 	bl	800c570 <_lseek_r>
 800c2da:	1c43      	adds	r3, r0, #1
 800c2dc:	89a3      	ldrh	r3, [r4, #12]
 800c2de:	bf15      	itete	ne
 800c2e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c2e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c2e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c2ea:	81a3      	strheq	r3, [r4, #12]
 800c2ec:	bf18      	it	ne
 800c2ee:	81a3      	strhne	r3, [r4, #12]
 800c2f0:	bd10      	pop	{r4, pc}

0800c2f2 <__sclose>:
 800c2f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2f6:	f000 b909 	b.w	800c50c <_close_r>
	...

0800c2fc <fiprintf>:
 800c2fc:	b40e      	push	{r1, r2, r3}
 800c2fe:	b503      	push	{r0, r1, lr}
 800c300:	4601      	mov	r1, r0
 800c302:	ab03      	add	r3, sp, #12
 800c304:	4805      	ldr	r0, [pc, #20]	@ (800c31c <fiprintf+0x20>)
 800c306:	f853 2b04 	ldr.w	r2, [r3], #4
 800c30a:	6800      	ldr	r0, [r0, #0]
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	f7ff fba9 	bl	800ba64 <_vfiprintf_r>
 800c312:	b002      	add	sp, #8
 800c314:	f85d eb04 	ldr.w	lr, [sp], #4
 800c318:	b003      	add	sp, #12
 800c31a:	4770      	bx	lr
 800c31c:	200000fc 	.word	0x200000fc

0800c320 <__swbuf_r>:
 800c320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c322:	460e      	mov	r6, r1
 800c324:	4614      	mov	r4, r2
 800c326:	4605      	mov	r5, r0
 800c328:	b118      	cbz	r0, 800c332 <__swbuf_r+0x12>
 800c32a:	6a03      	ldr	r3, [r0, #32]
 800c32c:	b90b      	cbnz	r3, 800c332 <__swbuf_r+0x12>
 800c32e:	f7ff f8f5 	bl	800b51c <__sinit>
 800c332:	69a3      	ldr	r3, [r4, #24]
 800c334:	60a3      	str	r3, [r4, #8]
 800c336:	89a3      	ldrh	r3, [r4, #12]
 800c338:	071a      	lsls	r2, r3, #28
 800c33a:	d501      	bpl.n	800c340 <__swbuf_r+0x20>
 800c33c:	6923      	ldr	r3, [r4, #16]
 800c33e:	b943      	cbnz	r3, 800c352 <__swbuf_r+0x32>
 800c340:	4621      	mov	r1, r4
 800c342:	4628      	mov	r0, r5
 800c344:	f000 f82a 	bl	800c39c <__swsetup_r>
 800c348:	b118      	cbz	r0, 800c352 <__swbuf_r+0x32>
 800c34a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c34e:	4638      	mov	r0, r7
 800c350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	6922      	ldr	r2, [r4, #16]
 800c356:	1a98      	subs	r0, r3, r2
 800c358:	6963      	ldr	r3, [r4, #20]
 800c35a:	b2f6      	uxtb	r6, r6
 800c35c:	4283      	cmp	r3, r0
 800c35e:	4637      	mov	r7, r6
 800c360:	dc05      	bgt.n	800c36e <__swbuf_r+0x4e>
 800c362:	4621      	mov	r1, r4
 800c364:	4628      	mov	r0, r5
 800c366:	f7ff ff51 	bl	800c20c <_fflush_r>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d1ed      	bne.n	800c34a <__swbuf_r+0x2a>
 800c36e:	68a3      	ldr	r3, [r4, #8]
 800c370:	3b01      	subs	r3, #1
 800c372:	60a3      	str	r3, [r4, #8]
 800c374:	6823      	ldr	r3, [r4, #0]
 800c376:	1c5a      	adds	r2, r3, #1
 800c378:	6022      	str	r2, [r4, #0]
 800c37a:	701e      	strb	r6, [r3, #0]
 800c37c:	6962      	ldr	r2, [r4, #20]
 800c37e:	1c43      	adds	r3, r0, #1
 800c380:	429a      	cmp	r2, r3
 800c382:	d004      	beq.n	800c38e <__swbuf_r+0x6e>
 800c384:	89a3      	ldrh	r3, [r4, #12]
 800c386:	07db      	lsls	r3, r3, #31
 800c388:	d5e1      	bpl.n	800c34e <__swbuf_r+0x2e>
 800c38a:	2e0a      	cmp	r6, #10
 800c38c:	d1df      	bne.n	800c34e <__swbuf_r+0x2e>
 800c38e:	4621      	mov	r1, r4
 800c390:	4628      	mov	r0, r5
 800c392:	f7ff ff3b 	bl	800c20c <_fflush_r>
 800c396:	2800      	cmp	r0, #0
 800c398:	d0d9      	beq.n	800c34e <__swbuf_r+0x2e>
 800c39a:	e7d6      	b.n	800c34a <__swbuf_r+0x2a>

0800c39c <__swsetup_r>:
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4b29      	ldr	r3, [pc, #164]	@ (800c444 <__swsetup_r+0xa8>)
 800c3a0:	4605      	mov	r5, r0
 800c3a2:	6818      	ldr	r0, [r3, #0]
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	b118      	cbz	r0, 800c3b0 <__swsetup_r+0x14>
 800c3a8:	6a03      	ldr	r3, [r0, #32]
 800c3aa:	b90b      	cbnz	r3, 800c3b0 <__swsetup_r+0x14>
 800c3ac:	f7ff f8b6 	bl	800b51c <__sinit>
 800c3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3b4:	0719      	lsls	r1, r3, #28
 800c3b6:	d422      	bmi.n	800c3fe <__swsetup_r+0x62>
 800c3b8:	06da      	lsls	r2, r3, #27
 800c3ba:	d407      	bmi.n	800c3cc <__swsetup_r+0x30>
 800c3bc:	2209      	movs	r2, #9
 800c3be:	602a      	str	r2, [r5, #0]
 800c3c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3c4:	81a3      	strh	r3, [r4, #12]
 800c3c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3ca:	e033      	b.n	800c434 <__swsetup_r+0x98>
 800c3cc:	0758      	lsls	r0, r3, #29
 800c3ce:	d512      	bpl.n	800c3f6 <__swsetup_r+0x5a>
 800c3d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3d2:	b141      	cbz	r1, 800c3e6 <__swsetup_r+0x4a>
 800c3d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3d8:	4299      	cmp	r1, r3
 800c3da:	d002      	beq.n	800c3e2 <__swsetup_r+0x46>
 800c3dc:	4628      	mov	r0, r5
 800c3de:	f7ff facd 	bl	800b97c <_free_r>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c3ec:	81a3      	strh	r3, [r4, #12]
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	6063      	str	r3, [r4, #4]
 800c3f2:	6923      	ldr	r3, [r4, #16]
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	89a3      	ldrh	r3, [r4, #12]
 800c3f8:	f043 0308 	orr.w	r3, r3, #8
 800c3fc:	81a3      	strh	r3, [r4, #12]
 800c3fe:	6923      	ldr	r3, [r4, #16]
 800c400:	b94b      	cbnz	r3, 800c416 <__swsetup_r+0x7a>
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c40c:	d003      	beq.n	800c416 <__swsetup_r+0x7a>
 800c40e:	4621      	mov	r1, r4
 800c410:	4628      	mov	r0, r5
 800c412:	f000 f83f 	bl	800c494 <__smakebuf_r>
 800c416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c41a:	f013 0201 	ands.w	r2, r3, #1
 800c41e:	d00a      	beq.n	800c436 <__swsetup_r+0x9a>
 800c420:	2200      	movs	r2, #0
 800c422:	60a2      	str	r2, [r4, #8]
 800c424:	6962      	ldr	r2, [r4, #20]
 800c426:	4252      	negs	r2, r2
 800c428:	61a2      	str	r2, [r4, #24]
 800c42a:	6922      	ldr	r2, [r4, #16]
 800c42c:	b942      	cbnz	r2, 800c440 <__swsetup_r+0xa4>
 800c42e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c432:	d1c5      	bne.n	800c3c0 <__swsetup_r+0x24>
 800c434:	bd38      	pop	{r3, r4, r5, pc}
 800c436:	0799      	lsls	r1, r3, #30
 800c438:	bf58      	it	pl
 800c43a:	6962      	ldrpl	r2, [r4, #20]
 800c43c:	60a2      	str	r2, [r4, #8]
 800c43e:	e7f4      	b.n	800c42a <__swsetup_r+0x8e>
 800c440:	2000      	movs	r0, #0
 800c442:	e7f7      	b.n	800c434 <__swsetup_r+0x98>
 800c444:	200000fc 	.word	0x200000fc

0800c448 <__swhatbuf_r>:
 800c448:	b570      	push	{r4, r5, r6, lr}
 800c44a:	460c      	mov	r4, r1
 800c44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c450:	2900      	cmp	r1, #0
 800c452:	b096      	sub	sp, #88	@ 0x58
 800c454:	4615      	mov	r5, r2
 800c456:	461e      	mov	r6, r3
 800c458:	da0d      	bge.n	800c476 <__swhatbuf_r+0x2e>
 800c45a:	89a3      	ldrh	r3, [r4, #12]
 800c45c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c460:	f04f 0100 	mov.w	r1, #0
 800c464:	bf14      	ite	ne
 800c466:	2340      	movne	r3, #64	@ 0x40
 800c468:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c46c:	2000      	movs	r0, #0
 800c46e:	6031      	str	r1, [r6, #0]
 800c470:	602b      	str	r3, [r5, #0]
 800c472:	b016      	add	sp, #88	@ 0x58
 800c474:	bd70      	pop	{r4, r5, r6, pc}
 800c476:	466a      	mov	r2, sp
 800c478:	f000 f858 	bl	800c52c <_fstat_r>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	dbec      	blt.n	800c45a <__swhatbuf_r+0x12>
 800c480:	9901      	ldr	r1, [sp, #4]
 800c482:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c486:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c48a:	4259      	negs	r1, r3
 800c48c:	4159      	adcs	r1, r3
 800c48e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c492:	e7eb      	b.n	800c46c <__swhatbuf_r+0x24>

0800c494 <__smakebuf_r>:
 800c494:	898b      	ldrh	r3, [r1, #12]
 800c496:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c498:	079d      	lsls	r5, r3, #30
 800c49a:	4606      	mov	r6, r0
 800c49c:	460c      	mov	r4, r1
 800c49e:	d507      	bpl.n	800c4b0 <__smakebuf_r+0x1c>
 800c4a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c4a4:	6023      	str	r3, [r4, #0]
 800c4a6:	6123      	str	r3, [r4, #16]
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	6163      	str	r3, [r4, #20]
 800c4ac:	b003      	add	sp, #12
 800c4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b0:	ab01      	add	r3, sp, #4
 800c4b2:	466a      	mov	r2, sp
 800c4b4:	f7ff ffc8 	bl	800c448 <__swhatbuf_r>
 800c4b8:	9f00      	ldr	r7, [sp, #0]
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	4639      	mov	r1, r7
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f7ff fc12 	bl	800bce8 <_malloc_r>
 800c4c4:	b948      	cbnz	r0, 800c4da <__smakebuf_r+0x46>
 800c4c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ca:	059a      	lsls	r2, r3, #22
 800c4cc:	d4ee      	bmi.n	800c4ac <__smakebuf_r+0x18>
 800c4ce:	f023 0303 	bic.w	r3, r3, #3
 800c4d2:	f043 0302 	orr.w	r3, r3, #2
 800c4d6:	81a3      	strh	r3, [r4, #12]
 800c4d8:	e7e2      	b.n	800c4a0 <__smakebuf_r+0xc>
 800c4da:	89a3      	ldrh	r3, [r4, #12]
 800c4dc:	6020      	str	r0, [r4, #0]
 800c4de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4e2:	81a3      	strh	r3, [r4, #12]
 800c4e4:	9b01      	ldr	r3, [sp, #4]
 800c4e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c4ea:	b15b      	cbz	r3, 800c504 <__smakebuf_r+0x70>
 800c4ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	f000 f82d 	bl	800c550 <_isatty_r>
 800c4f6:	b128      	cbz	r0, 800c504 <__smakebuf_r+0x70>
 800c4f8:	89a3      	ldrh	r3, [r4, #12]
 800c4fa:	f023 0303 	bic.w	r3, r3, #3
 800c4fe:	f043 0301 	orr.w	r3, r3, #1
 800c502:	81a3      	strh	r3, [r4, #12]
 800c504:	89a3      	ldrh	r3, [r4, #12]
 800c506:	431d      	orrs	r5, r3
 800c508:	81a5      	strh	r5, [r4, #12]
 800c50a:	e7cf      	b.n	800c4ac <__smakebuf_r+0x18>

0800c50c <_close_r>:
 800c50c:	b538      	push	{r3, r4, r5, lr}
 800c50e:	4d06      	ldr	r5, [pc, #24]	@ (800c528 <_close_r+0x1c>)
 800c510:	2300      	movs	r3, #0
 800c512:	4604      	mov	r4, r0
 800c514:	4608      	mov	r0, r1
 800c516:	602b      	str	r3, [r5, #0]
 800c518:	f7f5 fabc 	bl	8001a94 <_close>
 800c51c:	1c43      	adds	r3, r0, #1
 800c51e:	d102      	bne.n	800c526 <_close_r+0x1a>
 800c520:	682b      	ldr	r3, [r5, #0]
 800c522:	b103      	cbz	r3, 800c526 <_close_r+0x1a>
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	bd38      	pop	{r3, r4, r5, pc}
 800c528:	20005948 	.word	0x20005948

0800c52c <_fstat_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d07      	ldr	r5, [pc, #28]	@ (800c54c <_fstat_r+0x20>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	4611      	mov	r1, r2
 800c538:	602b      	str	r3, [r5, #0]
 800c53a:	f7f5 fab7 	bl	8001aac <_fstat>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	d102      	bne.n	800c548 <_fstat_r+0x1c>
 800c542:	682b      	ldr	r3, [r5, #0]
 800c544:	b103      	cbz	r3, 800c548 <_fstat_r+0x1c>
 800c546:	6023      	str	r3, [r4, #0]
 800c548:	bd38      	pop	{r3, r4, r5, pc}
 800c54a:	bf00      	nop
 800c54c:	20005948 	.word	0x20005948

0800c550 <_isatty_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	4d06      	ldr	r5, [pc, #24]	@ (800c56c <_isatty_r+0x1c>)
 800c554:	2300      	movs	r3, #0
 800c556:	4604      	mov	r4, r0
 800c558:	4608      	mov	r0, r1
 800c55a:	602b      	str	r3, [r5, #0]
 800c55c:	f7f5 fab6 	bl	8001acc <_isatty>
 800c560:	1c43      	adds	r3, r0, #1
 800c562:	d102      	bne.n	800c56a <_isatty_r+0x1a>
 800c564:	682b      	ldr	r3, [r5, #0]
 800c566:	b103      	cbz	r3, 800c56a <_isatty_r+0x1a>
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	20005948 	.word	0x20005948

0800c570 <_lseek_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4d07      	ldr	r5, [pc, #28]	@ (800c590 <_lseek_r+0x20>)
 800c574:	4604      	mov	r4, r0
 800c576:	4608      	mov	r0, r1
 800c578:	4611      	mov	r1, r2
 800c57a:	2200      	movs	r2, #0
 800c57c:	602a      	str	r2, [r5, #0]
 800c57e:	461a      	mov	r2, r3
 800c580:	f7f5 faaf 	bl	8001ae2 <_lseek>
 800c584:	1c43      	adds	r3, r0, #1
 800c586:	d102      	bne.n	800c58e <_lseek_r+0x1e>
 800c588:	682b      	ldr	r3, [r5, #0]
 800c58a:	b103      	cbz	r3, 800c58e <_lseek_r+0x1e>
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	bd38      	pop	{r3, r4, r5, pc}
 800c590:	20005948 	.word	0x20005948

0800c594 <_read_r>:
 800c594:	b538      	push	{r3, r4, r5, lr}
 800c596:	4d07      	ldr	r5, [pc, #28]	@ (800c5b4 <_read_r+0x20>)
 800c598:	4604      	mov	r4, r0
 800c59a:	4608      	mov	r0, r1
 800c59c:	4611      	mov	r1, r2
 800c59e:	2200      	movs	r2, #0
 800c5a0:	602a      	str	r2, [r5, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	f7f5 fa3d 	bl	8001a22 <_read>
 800c5a8:	1c43      	adds	r3, r0, #1
 800c5aa:	d102      	bne.n	800c5b2 <_read_r+0x1e>
 800c5ac:	682b      	ldr	r3, [r5, #0]
 800c5ae:	b103      	cbz	r3, 800c5b2 <_read_r+0x1e>
 800c5b0:	6023      	str	r3, [r4, #0]
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
 800c5b4:	20005948 	.word	0x20005948

0800c5b8 <_sbrk_r>:
 800c5b8:	b538      	push	{r3, r4, r5, lr}
 800c5ba:	4d06      	ldr	r5, [pc, #24]	@ (800c5d4 <_sbrk_r+0x1c>)
 800c5bc:	2300      	movs	r3, #0
 800c5be:	4604      	mov	r4, r0
 800c5c0:	4608      	mov	r0, r1
 800c5c2:	602b      	str	r3, [r5, #0]
 800c5c4:	f7f5 fa9a 	bl	8001afc <_sbrk>
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	d102      	bne.n	800c5d2 <_sbrk_r+0x1a>
 800c5cc:	682b      	ldr	r3, [r5, #0]
 800c5ce:	b103      	cbz	r3, 800c5d2 <_sbrk_r+0x1a>
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	bd38      	pop	{r3, r4, r5, pc}
 800c5d4:	20005948 	.word	0x20005948

0800c5d8 <_write_r>:
 800c5d8:	b538      	push	{r3, r4, r5, lr}
 800c5da:	4d07      	ldr	r5, [pc, #28]	@ (800c5f8 <_write_r+0x20>)
 800c5dc:	4604      	mov	r4, r0
 800c5de:	4608      	mov	r0, r1
 800c5e0:	4611      	mov	r1, r2
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	602a      	str	r2, [r5, #0]
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	f7f5 fa38 	bl	8001a5c <_write>
 800c5ec:	1c43      	adds	r3, r0, #1
 800c5ee:	d102      	bne.n	800c5f6 <_write_r+0x1e>
 800c5f0:	682b      	ldr	r3, [r5, #0]
 800c5f2:	b103      	cbz	r3, 800c5f6 <_write_r+0x1e>
 800c5f4:	6023      	str	r3, [r4, #0]
 800c5f6:	bd38      	pop	{r3, r4, r5, pc}
 800c5f8:	20005948 	.word	0x20005948

0800c5fc <abort>:
 800c5fc:	b508      	push	{r3, lr}
 800c5fe:	2006      	movs	r0, #6
 800c600:	f000 f82c 	bl	800c65c <raise>
 800c604:	2001      	movs	r0, #1
 800c606:	f7f5 fa01 	bl	8001a0c <_exit>

0800c60a <_raise_r>:
 800c60a:	291f      	cmp	r1, #31
 800c60c:	b538      	push	{r3, r4, r5, lr}
 800c60e:	4605      	mov	r5, r0
 800c610:	460c      	mov	r4, r1
 800c612:	d904      	bls.n	800c61e <_raise_r+0x14>
 800c614:	2316      	movs	r3, #22
 800c616:	6003      	str	r3, [r0, #0]
 800c618:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c61c:	bd38      	pop	{r3, r4, r5, pc}
 800c61e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c620:	b112      	cbz	r2, 800c628 <_raise_r+0x1e>
 800c622:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c626:	b94b      	cbnz	r3, 800c63c <_raise_r+0x32>
 800c628:	4628      	mov	r0, r5
 800c62a:	f000 f831 	bl	800c690 <_getpid_r>
 800c62e:	4622      	mov	r2, r4
 800c630:	4601      	mov	r1, r0
 800c632:	4628      	mov	r0, r5
 800c634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c638:	f000 b818 	b.w	800c66c <_kill_r>
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d00a      	beq.n	800c656 <_raise_r+0x4c>
 800c640:	1c59      	adds	r1, r3, #1
 800c642:	d103      	bne.n	800c64c <_raise_r+0x42>
 800c644:	2316      	movs	r3, #22
 800c646:	6003      	str	r3, [r0, #0]
 800c648:	2001      	movs	r0, #1
 800c64a:	e7e7      	b.n	800c61c <_raise_r+0x12>
 800c64c:	2100      	movs	r1, #0
 800c64e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c652:	4620      	mov	r0, r4
 800c654:	4798      	blx	r3
 800c656:	2000      	movs	r0, #0
 800c658:	e7e0      	b.n	800c61c <_raise_r+0x12>
	...

0800c65c <raise>:
 800c65c:	4b02      	ldr	r3, [pc, #8]	@ (800c668 <raise+0xc>)
 800c65e:	4601      	mov	r1, r0
 800c660:	6818      	ldr	r0, [r3, #0]
 800c662:	f7ff bfd2 	b.w	800c60a <_raise_r>
 800c666:	bf00      	nop
 800c668:	200000fc 	.word	0x200000fc

0800c66c <_kill_r>:
 800c66c:	b538      	push	{r3, r4, r5, lr}
 800c66e:	4d07      	ldr	r5, [pc, #28]	@ (800c68c <_kill_r+0x20>)
 800c670:	2300      	movs	r3, #0
 800c672:	4604      	mov	r4, r0
 800c674:	4608      	mov	r0, r1
 800c676:	4611      	mov	r1, r2
 800c678:	602b      	str	r3, [r5, #0]
 800c67a:	f7f5 f9b7 	bl	80019ec <_kill>
 800c67e:	1c43      	adds	r3, r0, #1
 800c680:	d102      	bne.n	800c688 <_kill_r+0x1c>
 800c682:	682b      	ldr	r3, [r5, #0]
 800c684:	b103      	cbz	r3, 800c688 <_kill_r+0x1c>
 800c686:	6023      	str	r3, [r4, #0]
 800c688:	bd38      	pop	{r3, r4, r5, pc}
 800c68a:	bf00      	nop
 800c68c:	20005948 	.word	0x20005948

0800c690 <_getpid_r>:
 800c690:	f7f5 b9a4 	b.w	80019dc <_getpid>

0800c694 <_init>:
 800c694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c696:	bf00      	nop
 800c698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c69a:	bc08      	pop	{r3}
 800c69c:	469e      	mov	lr, r3
 800c69e:	4770      	bx	lr

0800c6a0 <_fini>:
 800c6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a2:	bf00      	nop
 800c6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6a6:	bc08      	pop	{r3}
 800c6a8:	469e      	mov	lr, r3
 800c6aa:	4770      	bx	lr
